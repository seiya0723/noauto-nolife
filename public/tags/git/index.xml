<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on 自動化無しに生活無し</title>
    <link>https://noauto-nolife.com/tags/git/</link>
    <description>Recent content in Git on 自動化無しに生活無し</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 04 Sep 2022 15:49:58 +0900</lastBuildDate>
    
	<atom:link href="https://noauto-nolife.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ubuntuに環境変数をセットし、Pythonでosモジュールを使って読む方法【os.environ】</title>
      <link>https://noauto-nolife.com/post/ubuntu-env-read-python/</link>
      <pubDate>Sun, 04 Sep 2022 15:49:58 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu-env-read-python/</guid>
      <description>例えば、gitで管理しているプロジェクトをgitでデプロイする時。 たとえローカルサーバーのDBのパスワードとは言え、ハードコードした状態でコミットするわけには行かない。(gitignoreに入れてしまうとパスワードが含まれない) そこで、環境変数をセットし、Python側でそれを読む。 環境変数をセットする。 #変数名=値 ZZZ=test #変数を環境変数としてセットする。 export ZZZ #↑2つは下記でも可 export ZZZ=test セットした環境変数</description>
    </item>
    
    <item>
      <title>【git/GitHub】コマンドと使い方の一覧</title>
      <link>https://noauto-nolife.com/post/startup-git/</link>
      <pubDate>Sun, 08 May 2022 10:58:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-git/</guid>
      <description>後に追記予定あり。 必要と思われるものから順に、解説サイトから抜粋して並べている。 基本操作編 これができれば、作ったコードをGitHubに公開できる。 リポジトリを作る git init インデックスする(コミットするファイルを記録) 全てのファイルをインデックスする場合はこうする git add . コミットする git commit -m &amp;quot;ここにコミットのメッセージを記録する&amp;quot; 【補足1】ユーザー情報を入力していないため、コミットできな</description>
    </item>
    
    <item>
      <title>【GitHub】gitコマンドでリモートリポジトリへプッシュするためのトークンをジェネレートする</title>
      <link>https://noauto-nolife.com/post/github-token-generate/</link>
      <pubDate>Thu, 16 Dec 2021 15:07:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/github-token-generate/</guid>
      <description>gitコマンドでGitHubにプッシュする時、アカウントのパスワードではプッシュすることはできない。前もってアカウント内に作っておいたトークンを入力する必要がある。 本記事ではその作り方を解説する。 トークン生成手順 下記リンク、もしくはSettingsからDeveloper settingsをクリック、Personal access tokensをクリックする。 https://github.com/settings/tokens Generate new tokenをクリック。パスワードの入力を要求される</description>
    </item>
    
    <item>
      <title>【Laravel】GitHubにプッシュする時.gitignoreに追加する必要のあるファイル、ディレクトリ</title>
      <link>https://noauto-nolife.com/post/laravel-gitignore-add/</link>
      <pubDate>Sat, 18 Sep 2021 11:11:14 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-gitignore-add/</guid>
      <description>GitHubにプッシュする時、.gitignoreに追加する必要のあるファイル、ディレクトリをここにまとめる。 そんなものはどうでも良いから、もともとあったものと、追加したものを含めた完全版を見せてくれと思う人は、ページ末尾の結論へ。 対象に追加するべき、ファイル *.log *.sqlite .htaccess .logには開発用サーバーで動かしたログが残る。.sqliteは言わずもがなデータが残っている。 対象に追加するべき、ディレクトリ /storage /config /</description>
    </item>
    
    <item>
      <title>DjangoをDEBUG=FalseでHerokuにデプロイする方法</title>
      <link>https://noauto-nolife.com/post/django-deploy-heroku/</link>
      <pubDate>Mon, 26 Oct 2020 11:16:34 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-heroku/</guid>
      <description>プロジェクトのディレクトリ構造は、『現場で使えるDjangoの教科書 基礎編』に準拠している。 requirements.txt もし、仮想環境を使用していない場合、virtualenvを使って必要なライブラリをpipコマンドにてインストールする。 -- HerokuCLIをインストール Herokuではherokuコマンドを実行して、事前にログインをした上でデプロイを行う。下記からインストールする。 https://devcenter.heroku.com/ja/articles/heroku-cli herokuコマンドを実行して、デプロ</description>
    </item>
    
  </channel>
</rss>