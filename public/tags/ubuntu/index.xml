<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu on 自動化無しに生活無し</title>
    <link>https://noauto-nolife.com/tags/ubuntu/</link>
    <description>Recent content in Ubuntu on 自動化無しに生活無し</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 10 Sep 2022 20:48:19 +0900</lastBuildDate>
    
	<atom:link href="https://noauto-nolife.com/tags/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FFmpegを使ってUbuntuサーバーにUSBで接続されたウェブカメラで映像を録画する</title>
      <link>https://noauto-nolife.com/post/ffmpeg-ubuntu-server-webcamera/</link>
      <pubDate>Sat, 10 Sep 2022 20:48:19 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ffmpeg-ubuntu-server-webcamera/</guid>
      <description>Ubuntu 22.04 Serverでやった ハードはラズパイ3B+ インストール FFmpegとv4l2-utilsをインストール sudo apt install ffmpeg v4l-utils デバイスを特定する v4l2-ctl --list-devices こんなふうに表示される(一部省略) BUFFALO BSWHD06M USB Camera : (usb-3f980000.usb-1.4): /dev/video0 /dev/video1 /dev/media3 対応しているフォーマットと解像度を特定する ffmpeg -f v4l2 -list_formats all -i /dev/video0 こんなふうに表示される(一部省略) [video4linux2,v4l2 @ 0xaaaad7c25420] Raw : yuyv422 : YUYV 4:2:2 : 1280x720 800x600 640x480 640x360 352x288 320x240 176x144 160x120 [video4linux2,v4l2 @ 0xaaaad7c25420] Compressed: mjpeg : Motion-JPEG : 1280x960 1280x720 800x600 640x480 640x360 352x288 320x240 176x144 160x120 映像を録画する ffmpeg -f v4l2 -framerate 30 -video_size 352x288 -i /dev/video0 output.mkv 後はこの映像をs</description>
    </item>
    
    <item>
      <title>Ubuntuに環境変数をセットし、Pythonでosモジュールを使って読む方法【os.environ】</title>
      <link>https://noauto-nolife.com/post/ubuntu-env-read-python/</link>
      <pubDate>Sun, 04 Sep 2022 15:49:58 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu-env-read-python/</guid>
      <description>例えば、gitで管理しているプロジェクトをgitでデプロイする時。 たとえローカルサーバーのDBのパスワードとは言え、ハードコードした状態でコミットするわけには行かない。(gitignoreに入れてしまうとパスワードが含まれない) そこで、環境変数をセットし、Python側でそれを読む。 環境変数をセットする。 #変数名=値 ZZZ=test #変数を環境変数としてセットする。 export ZZZ #↑2つは下記でも可 export ZZZ=test セットした環境変数</description>
    </item>
    
    <item>
      <title>PHPでmb_strlenもしくはstrlenがNotFoundのときの対策</title>
      <link>https://noauto-nolife.com/post/php-not-found-mb-strlen/</link>
      <pubDate>Fri, 02 Sep 2022 09:07:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/php-not-found-mb-strlen/</guid>
      <description>mb_strlen()もしくはstrlen()がNotFoundになるときは、下記コマンドを実行してphp-mbstringをインストールする #PHPのバージョンは合わせる sudo apt install php8.1-mbstring ちなみに、strlen()はバイト数、mb_strlen()は文字列の長さ(マルチバイト文字を1文字とみなす)を返す。</description>
    </item>
    
    <item>
      <title>UbuntuにSambaをインストールしてファイルサーバー化させる</title>
      <link>https://noauto-nolife.com/post/ubuntu-samba/</link>
      <pubDate>Sat, 27 Aug 2022 10:04:40 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu-samba/</guid>
      <description>本記事はプライベート用として運用するため、セキュリティは全く考慮していない。 本記事に倣って作ったファイルサーバーは、LAN内の端末であれば、いずれも自由に読み書きできてしまうので注意。 インストールする sudo apt install samba 共有ディレクトリを作る 今回はホームディレクトリに作った mkdir ~/share chmod 777 ~/share 設定する sudo vi /etc/samba/smb.conf を開いて、末尾に下記を記入。UserNameには任意のユーザー名を指定 [share] path = /home/UserName/share browseable = yes writable = yes guest ok = yes guest only = yes create mode = 0777</description>
    </item>
    
    <item>
      <title>Ubuntu18.04を使ってRaspberryPi3Bにサーバー版Ubuntu22.04をインストールする</title>
      <link>https://noauto-nolife.com/post/rasp3b-ubuntu-install-by-ubuntu/</link>
      <pubDate>Wed, 24 Aug 2022 08:58:03 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/rasp3b-ubuntu-install-by-ubuntu/</guid>
      <description>公式のRaspberry Pi OSはサーバーとして機能させるには不必要なものがあまりにも多すぎる。 ここは普段使い慣れているUbuntuをインストールしたい。 ということで、Ubuntu18.04からRaspberry Piにサーバー版をインストールさせる 必要なもの ラズパイ3B本体 MicroSD(64GBぐらいが理想) MicroSDとUSBの変換器(PCにMicroSDのコネクタがある場合は不要) インストー</description>
    </item>
    
    <item>
      <title>別のUbuntuにデータを輸送する</title>
      <link>https://noauto-nolife.com/post/ubuntu-data-transport/</link>
      <pubDate>Mon, 15 Aug 2022 18:20:02 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu-data-transport/</guid>
      <description>別のPCのUbuntuにデータを全て輸送する必要があったりする。 そういう時、手順をまとめておかないと手直しに返って時間がかかる。 よって、必要なデータ移行作業をここに列挙しておく。 準備編 前もって、下記をやっておく(任意) サーバー版Ubuntu 20.04のインストールから設定、SSHログインまで【固定IPアドレス、タイムゾーン、bashrcなど】 【保存版】Ubuntu18.04をインストールした後に真</description>
    </item>
    
    <item>
      <title>UbuntuにWordpressをインストールする【MariaDB&#43;Apache】</title>
      <link>https://noauto-nolife.com/post/startup-wordpress-ubuntu/</link>
      <pubDate>Sat, 04 Jun 2022 16:46:42 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-wordpress-ubuntu/</guid>
      <description>手元のPCにWordpressをインストールして試したいが、OSに直にインストールするのは避けたい。 そういう時、VirtualBoxにインストールしたUbuntuへ、Wordpressをインストールすると良いだろう。 流れ Apacheのインストール MariaDBのインストールとDB・ユーザーの作成 PHPのインストール Wordpressのインストール Apacheのインストール インストール sudo apt install apache2 自動起</description>
    </item>
    
    <item>
      <title>UbuntuにインストールされているPythonをアップデートする</title>
      <link>https://noauto-nolife.com/post/python3-update/</link>
      <pubDate>Sat, 07 May 2022 22:33:21 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/python3-update/</guid>
      <description>経緯 非同期系ライブラリのacyncioのコードを動かそうとした時。 正常に動いてくれない。公式によると、これはPythonが3.7以上でなければ動いてくれないとのこと。( https://docs.python.org/3/library/asyncio.html ) そこでPythonのバージョンを調べたところ、 うわっ..私のPython古すぎ..!! ということで、UbuntuにインストールされているPythonをアップデートしておく。ちなみに2022年5月現時点では、Pythonの最新安定</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にNginxとPHP7.4をインストールしてHelloWorldをする</title>
      <link>https://noauto-nolife.com/post/startup-php-nginx-ubuntu/</link>
      <pubDate>Mon, 25 Apr 2022 10:56:04 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-php-nginx-ubuntu/</guid>
      <description>5年以上前にやったきり、完全に忘れているNginxでPHPを動かす方法。 本記事ではその手順をまとめる。 必要なパッケージのインストール sudo apt install nginx php php-fpm Nginxはサーバー、phpはPHP処理系、php-fpmはNginxから動作させるために必要なもの Nginxの設定 /etc/nginx/sites-available/defaultを書き換える。 sudo vi /etc/nginx/sites-available/default TODOと書かれた場所だけ編集する。 ## # You should look at the following</description>
    </item>
    
    <item>
      <title>Linuxでコマンドラインからクリップボードにコピーする【UbuntuもOK】</title>
      <link>https://noauto-nolife.com/post/linux-commandline-clipboard/</link>
      <pubDate>Wed, 30 Mar 2022 09:13:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/linux-commandline-clipboard/</guid>
      <description>とてつもなく長いコードをクリップボードにコピーして、誰かと共有したい時、エディタのカーソルを上に持っていって下まで下げてコピーするのはとても面倒。 だから、コマンド一発でファイルの内容全てをコピーする。xselを使って。 sudo apt install xsel これでOK。後はコピペしたいファイルを用意して、下記コマンドを実行する。 cat ./index.html | xsel --clipboard --input これでindex.htmlの中身が全部コピーできた。bashrcにエイリアスで登録しておく</description>
    </item>
    
    <item>
      <title>UbuntuにDjangoをデプロイする【PostgreSQL&#43;Nginx、Virtualenv使用】</title>
      <link>https://noauto-nolife.com/post/django-deploy-ubuntu-venv/</link>
      <pubDate>Wed, 30 Mar 2022 08:03:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-ubuntu-venv/</guid>
      <description>Ubuntuのデプロイ時にVirtualenvを使う。 以前の方法はOSに直接Djangoなどのライブラリをインストールしているため、OSの更新と同時にライブラリも更新されてしまう。 Virtualenvを使えば、OSを更新してもライブラリのバージョンは常に一定。手動で更新する仕様になる。 Djangoプロジェクトの配置 下記になるよう配置する。 /home/[ユーザー名]/Documents/[プロジェク</description>
    </item>
    
    <item>
      <title>【HUGO】最新版をインストールして、サイトを作り、テーマを当ててビルドするまで</title>
      <link>https://noauto-nolife.com/post/hugo-install-latest/</link>
      <pubDate>Tue, 22 Mar 2022 08:39:10 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/hugo-install-latest/</guid>
      <description>手順 GitHubから最新版のインストーラを入手 サイトを作る 記事を作る テーマをインストールする HUGOサーバー(開発用サーバー)を起動する ビルドする GitHubから最新版のインストーラを入手 https://github.com/gohugoio/hugo/releases 上記サイトから、Latestと書かれてあるバージョンのインストーラーをDLする。Ubuntu 20.04の場合はhugo_0.95.0_Linux-64bit.debをDLすると良いだろう。 Windowsであれば</description>
    </item>
    
    <item>
      <title>dockerのイメージファイルを出力し(docker save)、出力されたファイルを読み込む(docker load)</title>
      <link>https://noauto-nolife.com/post/docker-image-file-share/</link>
      <pubDate>Sun, 13 Feb 2022 16:54:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/docker-image-file-share/</guid>
      <description>dockerコンテナをイメージ化した後、配布する場合、dockerHubを使う方法の他に直接ファイルをやり取りする方法もある。 下記コマンドでOK sudo docker save [イメージファイルのリポジトリ名] -o [出力したいファイル名].tar この出力されたファイルを別PCから読み込む sudo docker load -i [さっき出力したファイル名].tar 読み込みした後のイメージファイルのリポジトリ名は、もともとのリポジトリ名を引き継ぐ。 結論 ちなみに</description>
    </item>
    
    <item>
      <title>UbuntuでUbuntuのdockerイメージを作るまで</title>
      <link>https://noauto-nolife.com/post/startup-ubuntu-docker/</link>
      <pubDate>Thu, 03 Feb 2022 11:22:31 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-ubuntu-docker/</guid>
      <description>インストール sudo apt install docker.io これでインストールできる。 用語解説 イメージ イメージとは、OSのとある状態をセーブした物。実機にOSをインストールする時、必要になるイメージディスクと思えば話が早い。 例えば、Ubuntuをインストールした直後の状態を再現したい場合、UbuntuのイメージをdockerHubのUbuntuリポジトリからDLしてコンテナを作る。 コンテナ コンテナとは、イメージを元に作った仮想環境。複数</description>
    </item>
    
    <item>
      <title>LaravelのHerokuデプロイがPHPバージョン問題で必ず失敗する問題は、バージョンアップで対処する【ERROR: Dependency installation failed!】</title>
      <link>https://noauto-nolife.com/post/laravel-heroku-deploy-php-version-error/</link>
      <pubDate>Fri, 17 Dec 2021 11:24:38 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-heroku-deploy-php-version-error/</guid>
      <description>経緯 2021年12月某日、今日もLaravelのプロジェクトの開発を終え、『さあデプロイだ』とHerokuへデプロイをすると、下記のようなエラーメッセージが出た。 原因 これまで、普通にデプロイできていて、今日になってなぜデプロイに失敗するのか。どこかで設定ファイルの編集ミスったかと思いあれこれ確認してみたが、原因はわからない。 そこでStackOverflowにて、検索してみると、同様のエラー報告がみ</description>
    </item>
    
    <item>
      <title>Nginxのログをチェックする、ログの出力設定を変更する</title>
      <link>https://noauto-nolife.com/post/nginx-log-check/</link>
      <pubDate>Tue, 21 Sep 2021 07:19:18 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/nginx-log-check/</guid>
      <description>事案が発生した時、まっさきに確認するべきがサーバーのログ。とりわけウェブサーバーのNginxのログ確認方法、設定方法をここに記す。 Nginxのログの見方 Nginxの設定ファイル(/etc/nginx/nginx.conf)にログのパスが書かれてある ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ログは/var/log/nginx/access.logに保管されてある事がわかる。中身はこんな感じ。 左から順にこうなっている。 送信元</description>
    </item>
    
    <item>
      <title>UUIDを生成するコマンドuuidgen【予測されたくないページのURL割り当て等】</title>
      <link>https://noauto-nolife.com/post/uuid-generate/</link>
      <pubDate>Sun, 19 Sep 2021 18:14:00 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/uuid-generate/</guid>
      <description>Ubuntuであれば、下記コマンドを実行するだけで自動的にUUIDが生成される。 uuidgen 用途 秘匿する必要のあるページ(管理サイト等)にURLとして割り当てることで、総当たりでヒットされにくくなる。 UUIDが重複する確立は途方もなく低いので、他のセキュリティ対策ができない場合の代替案として有効であると思われる。 例えば、sedコマンドなどを使用して、Djangoのurls.pyから管理サイトを割り当てている</description>
    </item>
    
    <item>
      <title>シェルスクリプトでウェブサーバーの応答不能・ステータスコードをチェックして記録・通知する【pingとcurl、即メール送信にも有効】</title>
      <link>https://noauto-nolife.com/post/shellscript-server-checker/</link>
      <pubDate>Sun, 19 Sep 2021 08:51:18 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/shellscript-server-checker/</guid>
      <description>サーバーが応答不能になった時、すぐに対処できるよう、通知機能が欲しい。そういうときのシェルスクリプト。 pingで応答不能をチェックする #! /bin/bash while true ; do ping -c 1 192.168.11.99 rc=$? if [[ $rc -eq 0 ]] ; then echo &amp;quot;正常です&amp;quot; else echo &amp;quot;失敗しました&amp;quot; fi sleep 1 done 後は『正常です』『失敗しました』のいずれかに任意の処理を書き込む。 curlで応答不能をチェックする curlはHTTPのステータスコードも手に入るの</description>
    </item>
    
    <item>
      <title>【Laravel】Sqliteのデータベースファイルをワンライナーで再生成する【findコマンド&#43;-exec評価式&#43;alias】【migrate:fresh】</title>
      <link>https://noauto-nolife.com/post/laravel-database-regenerate/</link>
      <pubDate>Sat, 18 Sep 2021 08:42:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-database-regenerate/</guid>
      <description>前々から思っていた。マイグレーションミスってDBごと消してマイグレーションファイルを修正したい場合、DBのファイルを探して削除するのは面倒だと。 プロジェクトのディレクトリで下記コマンドを実行する。 find ./database/ -name &amp;quot;database.sqlite&amp;quot; -exec rm &amp;quot;{}&amp;quot; \; -exec touch &amp;quot;{}&amp;quot; \; bashのaliasに登録すれば上記コマンドをさらに短くできる。 alias laravel-dbrefresh=&#39;find ./database/ -name &amp;quot;database.sqlite&amp;quot; -exec rm &amp;quot;{}&amp;quot; \; -exec touch &amp;quot;{}&amp;quot; \;&#39; このコマンドの注意点は2つある。 1つ目はLaravelプロジェクト直下に移動して実行するこ</description>
    </item>
    
    <item>
      <title>【Django】settings.pyのSECRET_KEYを再発行(リジェネレート)する【alias登録で即生成・即実装からの再起動】</title>
      <link>https://noauto-nolife.com/post/django-secret-key-regenerate/</link>
      <pubDate>Fri, 17 Sep 2021 11:19:11 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-secret-key-regenerate/</guid>
      <description>うっかり、SECRET_KEYをバージョン管理対象に含ませてしまった。このままではクラウドサーバーにデプロイしたSECRET_KEYが予測され、CSRFトークン等が機能不全になってしまう。 そんな時に備えておきたい、SECRET_KEYの再発行の方法を解説する。 ソースコード Qiitaより拝借。 from django.core.management.utils import get_random_secret_key secret_key = get_random_secret_key() text = &#39;SECRET_KEY = \&#39;{0}\&#39;&#39;.format(secret_key) print(text) 実行すると、 SECRET_KEY = &#39;07y^y0#_7b74jy)d6z0lu5*r$#azfyt1*1f+g1-3w+l@&amp;amp;hs^2!&#39; 等の文言が出てくる。 aliasに登録して、どこでも再発行できるよ</description>
    </item>
    
    <item>
      <title>サーバー版Ubuntu 20.04のインストールから設定、SSHログインまで【固定IPアドレス、タイムゾーン、bashrcなど】</title>
      <link>https://noauto-nolife.com/post/startup-ubuntu2004-server/</link>
      <pubDate>Sat, 21 Aug 2021 17:39:30 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-ubuntu2004-server/</guid>
      <description>デスクトップ版のUbuntuとサーバー版のUbuntuは完全に別物である。 デスクトップ版はGUIでラクラク固定IPアドレス設定できたり、作業しながらブラウザで検索できる一方で、サーバー版のUbuntuはただ無機質なターミナルが全画面を覆っているだけである。 本記事ではインストールからIPアドレスの固定化、bashの設定やタイムゾーン設定、別端末からSSHでログインするまでを解説する。 対象読者は、既に</description>
    </item>
    
    <item>
      <title>VirtualBoxにUbuntuをインストールする</title>
      <link>https://noauto-nolife.com/post/virtualbox-ubuntu-install/</link>
      <pubDate>Sat, 19 Jun 2021 16:49:00 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/virtualbox-ubuntu-install/</guid>
      <description>作ったウェブアプリをデプロイする時、実機のLinuxサーバーでも良いが、VirtualBox上のLinux系OSのいずれかにデプロイして試験運用するのも良いだろう。 そこでその前段階としてVirtualBoxにUbuntuをインストールさせる。 用意する物 Ubuntuのisoファイル VirtualBoxのインストーラー(パッケージファイル) メモリ4GB以上の空きがあり、なおかつ20GB以上のストレージ</description>
    </item>
    
    <item>
      <title>LaravelをUbuntuにデプロイする【Nginx&#43;PostgreSQL】</title>
      <link>https://noauto-nolife.com/post/laravel-ubuntu-deploy/</link>
      <pubDate>Tue, 13 Apr 2021 19:09:40 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-ubuntu-deploy/</guid>
      <description>構成について タイトルの通り、下記構成にてデプロイを行う Laravel Framework 7.30.4 Ubuntu 18.04 nginx version: nginx/1.14.0 (Ubuntu) psql (PostgreSQL) 10.16 (Ubuntu 10.16-0ubuntu0.18.04.1) なぜPostgreSQLなのか？(MySQLではないのか？) MySQLは使わない。なぜなら、Laravelのtimestamp型とMySQLが組み合わさると2038年問題が発生するから。 コード側を合わせるという方法もあるが、今回はデプロイが主目的であるため、安全なPostgreSQLでデプロイする。 https://qiita.com/ucan-lab/items/99ee14ad6bb24614980c デプロイまでの流</description>
    </item>
    
    <item>
      <title>laravelコマンドをUbuntuで実行可能にする方法</title>
      <link>https://noauto-nolife.com/post/laravel-command-ubuntu/</link>
      <pubDate>Thu, 28 Jan 2021 14:52:39 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-command-ubuntu/</guid>
      <description>laravelで新しいプロジェクトを生成するとき、 composer create-project --prefer-dist laravel/laravel [プロジェクト名] このように実行するのだが、とても長い。 laravel new [プロジェクト名] そこで上記コマンドを実行しようとしてもlaravelコマンドがインストールされていないと言う。laravelコマンドを使えるようにするにはまずはcomposerからのインストールが必要。 composer global require &amp;quot;laravel/installer&amp;quot; そしてその上で、~/.bashrcにてパスを通す。~/.bashrcの</description>
    </item>
    
    <item>
      <title>DjangoをLinux(Ubuntu)サーバーにデプロイする方法【Nginx&#43;PostgreSQL】</title>
      <link>https://noauto-nolife.com/post/django-deploy-linux/</link>
      <pubDate>Mon, 26 Oct 2020 11:16:29 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-linux/</guid>
      <description>DjangoをLinuxサーバーにデプロイできれば、クラウドとは違ってハードウェアの性能を余すこと無く使うことができる。 高度なAIを運用したり、それなりにセキュリティが求められるウェブアプリを運用する予定であれば実機のLinuxサーバーにデプロイしたほうが良い。 デプロイまでの流れ PostgreSQLとNginxのインストール settings.pyの修正 ホームディレクトリにプロジェクト一式を設置 必要</description>
    </item>
    
    <item>
      <title>【保存版】Ubuntu18.04をインストールした後に真っ先にやる16の設定</title>
      <link>https://noauto-nolife.com/post/ubuntu1804-settings/</link>
      <pubDate>Sat, 12 Jan 2019 14:57:56 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu1804-settings/</guid>
      <description>ほとんど自分用の備忘録です。あまり役に立たないかもしれませんが、トップバーとdockの合成はやっておくと一気に便利になるでしょう。 その1:bashの履歴の上限を開放して、日時を表示させる その2:日本語のディレクトリ名を英語に変更させる その3:各種パッケージをインストールする その4:vimのプラグインをインストールする その5:vimのデフォルトの設定を変更させる その6:UbuntuのトップバーとDo</description>
    </item>
    
    <item>
      <title>UbuntuにSSHでリモートログインする方法【パスワード認証&#43;公開鍵認証&#43;scpコマンド】</title>
      <link>https://noauto-nolife.com/post/ubuntu-ssh/</link>
      <pubDate>Thu, 20 Sep 2018 18:22:19 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu-ssh/</guid>
      <description>SSH（Secure Shell）とはネットワークに接続されている端末にリモートログインをするための技術のことを言います。 SSHにより直接端末を操作しなくても遠隔地から端末にログインを行い、コマンド入力で簡単に操作できるようになります。それだけでなく、SSHを使用した際にはネットワークを流れる通信がすべて暗号化されるようになるのです。SSHでは暗号化された通信経路を使用するので、通信経路が暗号化され</description>
    </item>
    
  </channel>
</rss>