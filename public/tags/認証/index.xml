<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>認証 on 自動化無しに生活無し</title>
    <link>https://noauto-nolife.com/tags/%E8%AA%8D%E8%A8%BC/</link>
    <description>Recent content in 認証 on 自動化無しに生活無し</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 07 Apr 2022 13:19:33 +0900</lastBuildDate>
    
	<atom:link href="https://noauto-nolife.com/tags/%E8%AA%8D%E8%A8%BC/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Django】未認証ユーザーをログインページにリダイレクトする【LoginRequiredMixinもしくは@login_required】</title>
      <link>https://noauto-nolife.com/post/django-login-required-mixin/</link>
      <pubDate>Thu, 07 Apr 2022 13:19:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-login-required-mixin/</guid>
      <description>ログインしていないユーザーが特定のページにアクセスしてきた時、処理を実行せず、ログインページにリダイレクトするには、LoginRequiredMixinを使う。 前提 予め前もって、認証を実装しておく。allauthを使っても、Djangoの備え付けの認証を使っても良い。 【メール認証】Django-allauthの実装方法とテンプレート編集【ID認証】 【Django】allauth未使用でユーザー認証</description>
    </item>
    
    <item>
      <title>【Django】ユーザーモデルと1対多のリレーションを組む方法【カスタムユーザーモデル不使用】</title>
      <link>https://noauto-nolife.com/post/django-foreignkey-user/</link>
      <pubDate>Sun, 05 Dec 2021 11:48:32 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-foreignkey-user/</guid>
      <description>認証にはallauthを使用する。 コードは40分Djangoの簡易掲示板を元に作成する。forms.pyを実装させている。 Userモデルと1対多のリレーションを組み、誰が投稿したのかわかるようにする。 models.py from django.db import models from django.contrib.auth.models import User class Topic(models.Model): comment = models.CharField(verbose_name=&amp;quot;コメント&amp;quot;,max_length=2000) user = models.ForeignKey(User, verbose_name=&amp;quot;投稿</description>
    </item>
    
    <item>
      <title>独自ドメインのサイトにreCAPTCHAを実装させる方法と仕組み【ボット対策】</title>
      <link>https://noauto-nolife.com/post/recaptcha-setting/</link>
      <pubDate>Sun, 19 Sep 2021 18:21:31 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/recaptcha-setting/</guid>
      <description>CAPTCHAとして特に名高いGoogleのreCAPTCHAを使用する。これで不正なアカウントの大量作成や、Selenium等のスクレイピングツールの使用をある程度制限させることができる。 reCAPTCHA実装までの流れ カードの登録を済ませたグーグルアカウントを用意 独自ドメインを取得してサイトに設定 グーグルアカウントからreCAPTCHAを使用する サイトにreCAPTCHAのscriptタグ、フ</description>
    </item>
    
    <item>
      <title>【Django】同一人物による工作(再生数の水増しなど)をいかにして防ぐか、方法と対策【unique_together,Recaptcha,UA,IPアドレス等】</title>
      <link>https://noauto-nolife.com/post/django-same-user-operate-prevent/</link>
      <pubDate>Thu, 26 Aug 2021 12:24:05 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-same-user-operate-prevent/</guid>
      <description>例えば、動画サイトを運営していて、動画の再生回数を記録する機能を実装したとする。 動画の検索で、再生数の多い順に並び替えて表示する機能が既にある場合、再生回数の水増しによって、全く面白くない動画が検索の上位に表示されるなどの問題が発生する。 それだけでなく、再生回数の水増しを放置してしまうと、ランキングも荒れ果て、結果的にユーザーが離反してしまう恐れもある。(※ただし、ランキングの集計方法によってある</description>
    </item>
    
    <item>
      <title>Djangoでカスタムユーザーモデルを外部キーとして指定する方法【1対多】</title>
      <link>https://noauto-nolife.com/post/django-custom-user-model-foreignkey/</link>
      <pubDate>Sat, 20 Feb 2021 11:13:37 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-custom-user-model-foreignkey/</guid>
      <description>例えば、簡易掲示板で投稿者のユーザーIDを外部キーとして指定したい場合がある。 作ったカスタムユーザーモデルを外部キーとして通常のアプリから指定する方法を解説する。 本記事では、下記記事で解説したカスタムユーザーモデルを実装したことを前提として話を進める。 【Django】allauthとカスタムユーザーモデルを実装した簡易掲示板を作る【AbstrastBaseUser】 カスタムユーザーモデルを外部キー</description>
    </item>
    
    <item>
      <title>DjangoでUUIDを主キーとし、first_nameとlast_nameを1つにまとめたカスタムユーザーモデルを作る【AbstractBaseUserとallauth】</title>
      <link>https://noauto-nolife.com/post/django-custom-user-model-uuid/</link>
      <pubDate>Mon, 15 Feb 2021 15:47:57 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-custom-user-model-uuid/</guid>
      <description>Djangoでユーザーを作ったとき、デフォルトでは数値型オートインクリメントの主キーになる。 身内だけで使う小さなウェブアプリであれば大した問題にはならないと思うが、基本主キーが数値型かつオートインクリメントであれば、簡単に予測されてしまう。セキュリティリスクは最小限に留めるためにも、なるべく主キーはUUID型にしたい。 そこで、本記事ではユーザーの主キーにUUIDを使用したカスタムユーザーモデルの作</description>
    </item>
    
    <item>
      <title>Djangoにカスタムユーザーモデルを実装させる【AbstractUserとallauth】</title>
      <link>https://noauto-nolife.com/post/django-allauth-custom-user-model/</link>
      <pubDate>Mon, 14 Dec 2020 16:28:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-allauth-custom-user-model/</guid>
      <description>Djangoでカスタムユーザーモデルを実装すれば、ユーザーが会員登録をする時、IDとパスワードだけでなく、ファーストネームや年齢、職業なども入力させた上で会員登録を行うことができる。 これにより、会員登録した後、データ投稿時にユーザー情報もセットで挿入できる。未指定でログイン可能な会員になってしまうという問題を防ぐことができる。 ただ、カスタムユーザーモデルの実装は容易ではない。カスタムユーザーモデル</description>
    </item>
    
    <item>
      <title>【メール認証】Django-allauthの実装方法とテンプレート編集【ID認証】</title>
      <link>https://noauto-nolife.com/post/startup-django-allauth/</link>
      <pubDate>Sat, 24 Oct 2020 16:32:35 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-django-allauth/</guid>
      <description>ここに、Django-allauthの実装方法をまとめる。主にsettings.pyを操作することになる。 また、allauth付属のテンプレートではHTMLのみなのでテンプレート及びCSSによる装飾も付せて説明する。 はじめに django-allauthは外部ライブラリなので、pipコマンドでインストールする必要がある。 pip install django-allauth ユーザーIDとパスワードを使用した認証方法の実装 ユーザーIDとパスワードを</description>
    </item>
    
  </channel>
</rss>