<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>スクレイピング on 自動化無しに生活無し</title>
    <link>https://noauto-nolife.com/tags/%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in スクレイピング on 自動化無しに生活無し</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 09 Dec 2021 15:46:22 +0900</lastBuildDate>
    
	<atom:link href="https://noauto-nolife.com/tags/%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WindowsのタスクスケジューラーでPythonスクリプトを実行させる【スクレイピングの予約実行などに】</title>
      <link>https://noauto-nolife.com/post/windows-taskscheduler/</link>
      <pubDate>Thu, 09 Dec 2021 15:46:22 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/windows-taskscheduler/</guid>
      <description>例えば、毎日定時に実行しなければならないスクリプトがある場合、手動でその時間に実行しているようではめんどくさい。 そんな時、Windowsの場合は、指定した時間になったら実行してくれるタスクスケジューラーを使うと良いだろう。 タスクスケジューラーを起動する Windowsキーを押して、『tasks』と入力すると出てくる これを起動する。 新しいタスクを作成する 『タスクスケジューラライブラリ』にて右クリック。</description>
    </item>
    
    <item>
      <title>【Python】requestsライブラリを使用して、DjangoにPOSTメソッドのHTTPリクエストを送信する(管理サイトへのログイン)【セッションを維持してCSRF問題の対策】</title>
      <link>https://noauto-nolife.com/post/python-requests-post-method/</link>
      <pubDate>Fri, 26 Nov 2021 17:03:01 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/python-requests-post-method/</guid>
      <description>Pythonのrequestsライブラリはスクレイピング(GETメソッド)で使用されているが、それだけでなくテストとしてPOSTメソッドでデータを投稿する事ができる。 ただ、ここで問題になるのが、CSRFトークンの存在。CSRFトークンをセットしなければCSRF検証に失敗してしまい、データの投稿ができなくなる。 そこで、セッションを維持した状態でCSRFトークンをリクエストボディにセットし、データを送</description>
    </item>
    
    <item>
      <title>Djangoでスクレイピング対策をする【MIDDLEWAREでUA除外、ランダムでHTML構造変化等】</title>
      <link>https://noauto-nolife.com/post/django-anti-scraping/</link>
      <pubDate>Sat, 02 Oct 2021 19:05:06 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-anti-scraping/</guid>
      <description>最近ではPythonのスクレイピング関係の書籍が増えてきて、誰でも簡単にスクレイピングできるようになってきている。 その影響か、私が管理しているサイトもしょっちゅうスクレイピングかと思われるアクセスがログから確認できる。 放置しているとさらにエスカレートし、ただの負荷にしかならないので、スクレイピングには対策が必要。本記事では、とりわけ私の得意なDjangoでその方法を記す。 MIDDLEWAREにPy</description>
    </item>
    
    <item>
      <title>SeleniumでFirefoxブラウザのプロファイルを読み込む【Recaptcha突破、Cookie&#43;アドオン読み込み】</title>
      <link>https://noauto-nolife.com/post/selenium-read-profile/</link>
      <pubDate>Mon, 29 Mar 2021 08:37:13 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/selenium-read-profile/</guid>
      <description>めったに使うことのないSeleniumではあるが、いざ使おうとするとかなり手間取る。 特にログイン。Django等の管理サイトでログインする際にはパスとIDを控えておけば良いが、GoogleのRecaptchaとかボット対策をしていると当然突破できない。そこで予めブラウザでログインをしておいて、そのプロファイルを読み込めば良い。 プロファイルを読み込みするコード 下記コードをコピペすれば良いだけである。</description>
    </item>
    
    <item>
      <title>DjangoにPythonスクレイピングを実装した簡易検索エンジンの作り方【BeautifulSoup】</title>
      <link>https://noauto-nolife.com/post/django-scraping/</link>
      <pubDate>Sat, 24 Oct 2020 12:25:17 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-scraping/</guid>
      <description>DjangoにPythonスクレイピングを実装させるだけで簡易的な検索エンジンを作ることができる。 しかも、モデルの定義は不要でビューとテンプレートだけなので初心者の演習におすすめ。 流れ Djangoの環境構築、プロジェクトの作成等は割愛します。 アプリを作る urls.pyを修正 views.pyを作る テンプレートを作る スクレイピングのコードを作る views.pyを修正 テンプレートを修正 開発サーバーを起動</description>
    </item>
    
  </channel>
</rss>