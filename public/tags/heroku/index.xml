<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Heroku on 自動化無しに生活無し</title>
    <link>https://noauto-nolife.com/tags/heroku/</link>
    <description>Recent content in Heroku on 自動化無しに生活無し</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 26 Aug 2022 17:37:46 +0900</lastBuildDate>
    
	<atom:link href="https://noauto-nolife.com/tags/heroku/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Heroku有料化の対策を考える【2022年11月28日よりHerokuPostgres(9ドル)、HerokuDynos(7ドル)の有料化】</title>
      <link>https://noauto-nolife.com/post/heroku-counter-plan/</link>
      <pubDate>Fri, 26 Aug 2022 17:37:46 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/heroku-counter-plan/</guid>
      <description>2022年8月26日、メールボックスを見るとHerokuからメールが届いていた。内容は下記。 まとめると、こうなる 2022年11月28日からHerokuの一部サービスで無料プランが無くなる 対象はHerokuDynos、HerokuPostgres、Redisの3つ 有料化以降、WEB(7$)+DB(9$)のウェブアプリをデプロイする時、一ヶ月につき16$支払う必要がある さあ困った。 これまでHeroku</description>
    </item>
    
    <item>
      <title>Herokuの無料プランで独自ドメインを設定し、HTTPS通信を行う方法【ムームードメイン&#43;Cloudflare】</title>
      <link>https://noauto-nolife.com/post/heroku-origin-domain/</link>
      <pubDate>Tue, 22 Feb 2022 08:13:11 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/heroku-origin-domain/</guid>
      <description>無料プランでは独自ドメインのセットは出来てもHTTPS通信を行うことは出来ない。 そのため、Cloudflareをリバースプロキシとして機能させ、クライアントからCloudflare間まで暗号化させる。 一見安全性に欠けるような形だが、AWSにデプロイした際も、クライアントからリバースプロキシ間までしか暗号化はされないので、それほど問題ではない。 気になるなら、有料プランを使用してHTTPS通信を行うと</description>
    </item>
    
    <item>
      <title>LaravelのHerokuデプロイがPHPバージョン問題で必ず失敗する問題は、バージョンアップで対処する【ERROR: Dependency installation failed!】</title>
      <link>https://noauto-nolife.com/post/laravel-heroku-deploy-php-version-error/</link>
      <pubDate>Fri, 17 Dec 2021 11:24:38 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-heroku-deploy-php-version-error/</guid>
      <description>経緯 2021年12月某日、今日もLaravelのプロジェクトの開発を終え、『さあデプロイだ』とHerokuへデプロイをすると、下記のようなエラーメッセージが出た。 原因 これまで、普通にデプロイできていて、今日になってなぜデプロイに失敗するのか。どこかで設定ファイルの編集ミスったかと思いあれこれ確認してみたが、原因はわからない。 そこでStackOverflowにて、検索してみると、同様のエラー報告がみ</description>
    </item>
    
    <item>
      <title>【Laravel】Herokuにデプロイした後、URLをhttpsにする【デフォルトではhttpから始まるため、クライアントのブラウザが静的ファイルの読み込みに失敗する問題の対策】</title>
      <link>https://noauto-nolife.com/post/laravel-deploy-after-https-force/</link>
      <pubDate>Fri, 03 Dec 2021 16:36:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-deploy-after-https-force/</guid>
      <description>HerokuにLaravelをデプロイした後の話。デフォルトではHTTPSではなく、HTTP通信であるため、静的ファイルのアクセスは暗号化されない。 それが原因で、クライアントのブラウザのセキュリティが発動して、静的ファイルの読み込みを拒否する。結果、CSSやJavaScript、画像などの読み込みに失敗し、サイトレイアウトが乱れる。 ビューでassetやroute等を使用している場合、それら全てがh</description>
    </item>
    
    <item>
      <title>LaravelをCloudinaryを使用したHerokuにデプロイ、画像やファイルをアップロードする</title>
      <link>https://noauto-nolife.com/post/laravel-heroku-cloudinary-deploy/</link>
      <pubDate>Thu, 02 Dec 2021 06:59:02 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-heroku-cloudinary-deploy/</guid>
      <description>画像やファイルをアップロードするLaravelウェブアプリをオンプレミスではなく、クラウド(とりわけHeroku)にデプロイしたい場合、ストレージ問題を解決する必要がある。普通のLaravelアプリのHerokuデプロイはそれほど難しくはないが、Cloudinaryを使うとなると情報が限られ、難易度も高い。 そこで本記事では限られている情報に少しでも貢献するため、画像やファイルアップロード機能のある</description>
    </item>
    
    <item>
      <title>CloudinaryでPDF等の画像や動画以外のファイルをアップロードし、共有する方法【blocked for delivery】</title>
      <link>https://noauto-nolife.com/post/cloudinary-blocked-for-delivery/</link>
      <pubDate>Thu, 30 Sep 2021 09:11:38 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/cloudinary-blocked-for-delivery/</guid>
      <description>どうやらPDF等の画像や動画以外の一部のファイルは配信拒否されてしまうらしい。セキュリティ対策の一貫として行われているそうな。 しかし、PDFを共有する前提のウェブアプリであればただの足かせでしか無いし、ユーザー認証や管理者が管理をきちんとしていればセキュリティ的な事案はある程度は低減できる。 本記事ではCloudinaryを使用してPDFを配信する方法を記す。 対策 対策は至ってシンプル。Cloudin</description>
    </item>
    
    <item>
      <title>【Django】Heroku&#43;Cloudinaryの環境にアップロードしたファイルを参照する方法【MIMEとサイズ】</title>
      <link>https://noauto-nolife.com/post/django-deploy-heroku-cloudinary-file-reference/</link>
      <pubDate>Wed, 29 Sep 2021 15:45:48 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-heroku-cloudinary-file-reference/</guid>
      <description>クライアントがアップロードしたファイルをビュー側で参照するときがある。例えば、許可されていないMIMEのアップロード、ファイルサイズの確認など。 通常であれば、下記のようにすれば良い。 request.FILES[&amp;quot;document&amp;quot;] しかし、こんな参照をすると、Cloudinaryにはアップロードできてもファイルが壊れてしまう。PDF等の普通のファイルであれば問題はないが、mp4等の動画ファイルで発生している模様。 コード POSTメソッドだけ掲載。</description>
    </item>
    
    <item>
      <title>DjangoをHeroku&#43;Cloudinary(基本無料ストレージ)の環境にデプロイする【ウェブアプリのデモを一般公開したい場合などに】</title>
      <link>https://noauto-nolife.com/post/django-deploy-heroku-cloudinary/</link>
      <pubDate>Sat, 25 Sep 2021 10:34:37 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-heroku-cloudinary/</guid>
      <description>Herokuにはクレジットカードを登録することで、Cloudinaryというアドオンを利用することができる。これがHerokuのストレージとして運用可能。 一部はDjangoをDEBUG=FalseでHerokuにデプロイする方法と内容が重複しているため、そちらを読んだ人向けに書く。 アップロードするコードはDjangoで画像及びファイルをアップロードする方法より流用。テンプレートのsrc属性、hre</description>
    </item>
    
    <item>
      <title>DjangoをS3(AWS)ストレージ付きのHerokuにデプロイする</title>
      <link>https://noauto-nolife.com/post/django-deploy-heroku-s3/</link>
      <pubDate>Sat, 31 Jul 2021 15:59:46 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-heroku-s3/</guid>
      <description>Herokuで画像などのファイルをアップロードしたい時、別途ストレージを用意する必要がある。 特に代表的なのがAWSのS3をストレージとする方法。 既に解説記事があるので、S3の設定関係はDjangoをEC2(Ubuntu)、RDS(PostgreSQL)、S3の環境にデプロイをするを参照。 コードはDjangoで画像及びファイルをアップロードする方法から流用する。 Herokuデプロイの詳しい流れは、D</description>
    </item>
    
    <item>
      <title>Ajax搭載したLaravelをHerokuにデプロイした時、405エラーが出る問題の解決【method not allowed】</title>
      <link>https://noauto-nolife.com/post/laravel-heroku-405-error/</link>
      <pubDate>Sat, 13 Feb 2021 14:07:52 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-heroku-405-error/</guid>
      <description>Herokuにデプロイ後、Ajaxを使ったPOST文をサーバーサイドに送信しようとすると、405、即ちMethod Not Allowedがコンソールに表示される。 ルーティングには問題なくPOST文のメソッドは記述されているし、コントローラにも処理はある。何より開発サーバー上で問題なく動いていたものが、Herokuデプロイ後に動作しなくなるのはHeroku上の問題だと思い、あれこれやってみたが、一向にうま</description>
    </item>
    
    <item>
      <title>LaravelをHerokuにデプロイする【Heroku-postgresql使用】</title>
      <link>https://noauto-nolife.com/post/laravel-heroku-deploy/</link>
      <pubDate>Sat, 13 Feb 2021 14:01:48 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-heroku-deploy/</guid>
      <description>LaravelをHerokuにデプロイする。DBにはHerokuPostgresを使用する。 本記事の対象読者はHerokuCLIはインストール済み、基本的なコマンドは習得済みとする。 流れ Herokuからアプリを作る HerokuPostgresを実装 起動用のProcfileを作る ローカルリポジトリとHerokuのリモートリポジトリの関連付け デプロイ 環境変数の設定を施す(多いのでシェルスクリプトを実装</description>
    </item>
    
    <item>
      <title>Herokuのデータベース(herokupostgres)の実装と設定方法【Hobby-Plan】</title>
      <link>https://noauto-nolife.com/post/heroku-postgres-settings/</link>
      <pubDate>Thu, 05 Nov 2020 12:05:07 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/heroku-postgres-settings/</guid>
      <description>Heroku postgresの実装方法 プロジェクトのResourcesからHeroku Postgresを指定。 続いて、Submit Order Formを指定する。プランはHobbyを選択。 Add-onsのHerokuPostgresのリンクをクリック、SettingsタブのDatabaseCredentialsのView Credentialsをクリック データベース名などの認証情報が表示される。これをプロジェクトの設定</description>
    </item>
    
    <item>
      <title>DjangoをDEBUG=FalseでHerokuにデプロイする方法</title>
      <link>https://noauto-nolife.com/post/django-deploy-heroku/</link>
      <pubDate>Mon, 26 Oct 2020 11:16:34 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-heroku/</guid>
      <description>プロジェクトのディレクトリ構造は、『現場で使えるDjangoの教科書 基礎編』に準拠している。 requirements.txt もし、仮想環境を使用していない場合、virtualenvを使って必要なライブラリをpipコマンドにてインストールする。 -- HerokuCLIをインストール Herokuではherokuコマンドを実行して、事前にログインをした上でデプロイを行う。下記からインストールする。 https://devcenter.heroku.com/ja/articles/heroku-cli herokuコマンドを実行して、デプロ</description>
    </item>
    
  </channel>
</rss>