<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 自動化無しに生活無し</title>
    <link>https://noauto-nolife.com/tags/python/</link>
    <description>Recent content in Python on 自動化無しに生活無し</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 19 Dec 2021 17:12:22 +0900</lastBuildDate>
    
	<atom:link href="https://noauto-nolife.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Djangoをやる前に知っておきたいPython構文【オブジェクト指向と別ファイル読み込みは特に重要】</title>
      <link>https://noauto-nolife.com/post/django-essential-python/</link>
      <pubDate>Sun, 19 Dec 2021 17:12:22 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-essential-python/</guid>
      <description>Djangoを始める前に知っておきたいPython構文をまとめる。 型 #数値型 score = 100 #文字列型 name = &amp;quot;Taro&amp;quot; #リスト型 numbers = [ 46,77,22 ] #辞書型 topic = { &amp;quot;id&amp;quot;:1, &amp;quot;comment&amp;quot;:&amp;quot;Hello&amp;quot; } #辞書型のリスト topics = [ { &amp;quot;id&amp;quot;:1, &amp;quot;comment&amp;quot;:&amp;quot;Hello&amp;quot; }, { &amp;quot;id&amp;quot;:2, &amp;quot;comment&amp;quot;:&amp;quot;Hi&amp;quot; }, { &amp;quot;id&amp;quot;:3, &amp;quot;comment&amp;quot;:&amp;quot;こんにちは&amp;quot; }, { &amp;quot;id&amp;quot;:4, &amp;quot;comment&amp;quot;:&amp;quot;どうも&amp;quot; }, ] 数値型は演算子(+ - * /)のいずれかを使用して計算を行うことができ</description>
    </item>
    
    <item>
      <title>【openpyxl】PythonからExcelファイルを読み書きする</title>
      <link>https://noauto-nolife.com/post/startup-openpyxl/</link>
      <pubDate>Thu, 16 Dec 2021 16:31:27 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-openpyxl/</guid>
      <description>Pythonを使えばExcelファイルの新規作成や編集、読み込みなどもできる。 ソースコード import openpyxl as px #新規作成(オブジェクト生成)から一旦保存。 wb = px.Workbook() wb.save(&#39;test.xlsx&#39;) #既存のファイルを読み込み wb = px.load_workbook(&#39;test.xlsx&#39;) #アクティブシートを選択(新規作成時に最初からあるシート) ws = wb.active #シート名を変更 ws.title = &amp;quot;領収書&amp;quot; #セルに値を入力していく import datetime ws[&amp;quot;A1&amp;quot;].value = &amp;quot;決済日&amp;quot; ws[&amp;quot;A2&amp;quot;].value = str(datetime.date.today()) ws[&amp;quot;B1&amp;quot;].value = &amp;quot;商品名&amp;quot; ws[&amp;quot;C1&amp;quot;].value</description>
    </item>
    
    <item>
      <title>WindowsのタスクスケジューラーでPythonスクリプトを実行させる【スクレイピングの予約実行などに】</title>
      <link>https://noauto-nolife.com/post/windows-taskscheduler/</link>
      <pubDate>Thu, 09 Dec 2021 15:46:22 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/windows-taskscheduler/</guid>
      <description>例えば、毎日定時に実行しなければならないスクリプトがある場合、手動でその時間に実行しているようではめんどくさい。 そんな時、Windowsの場合は、指定した時間になったら実行してくれるタスクスケジューラーを使うと良いだろう。 タスクスケジューラーを起動する Windowsキーを押して、『tasks』と入力すると出てくる これを起動する。 新しいタスクを作成する 『タスクスケジューラライブラリ』にて右クリック。</description>
    </item>
    
    <item>
      <title>【Python】requestsライブラリを使用して、DjangoにPOSTメソッドのHTTPリクエストを送信する(管理サイトへのログイン)【セッションを維持してCSRF問題の対策】</title>
      <link>https://noauto-nolife.com/post/python-requests-post-method/</link>
      <pubDate>Fri, 26 Nov 2021 17:03:01 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/python-requests-post-method/</guid>
      <description>Pythonのrequestsライブラリはスクレイピング(GETメソッド)で使用されているが、それだけでなくテストとしてPOSTメソッドでデータを投稿する事ができる。 ただ、ここで問題になるのが、CSRFトークンの存在。CSRFトークンをセットしなければCSRF検証に失敗してしまい、データの投稿ができなくなる。 そこで、セッションを維持した状態でCSRFトークンをリクエストボディにセットし、データを送</description>
    </item>
    
    <item>
      <title>Pycharmを使う前にやっておきたい設定と覚えておくと良い操作方法</title>
      <link>https://noauto-nolife.com/post/pycharm-config/</link>
      <pubDate>Thu, 04 Nov 2021 17:50:56 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/pycharm-config/</guid>
      <description>Pycharmはデフォルトではやや使いづらい。そのため、本記事ではなるべく使いやすくする設定と覚えておくとよい操作方法を記す。 設定 日本語化 https://mergedoc.osdn.jp/ にアクセス。Pleiadesプラグイン・ダウンロードからOSにあった日本語用のzipをDL。 zipを展開した後、WindowsやMacの場合はマウスクリックでインストーラーを起動させれば良い。 ※日本語の表記ゆれなどを考慮し、以降の設定はインストールしてすぐの英</description>
    </item>
    
    <item>
      <title>Pythonの角括弧と丸括弧の違い、丸括弧を使う場合の注意点【()と[]、タプル型とリスト型】</title>
      <link>https://noauto-nolife.com/post/python-brackets/</link>
      <pubDate>Tue, 22 Jun 2021 15:12:04 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/python-brackets/</guid>
      <description>Djangoの公式コードを流用したりしていると、よく見かける()を使ったコード。 これはタプルである。タプルはリスト型の[]と同じであるが、書き換えが不可能であるという点でリスト型とは異なる。 タプルを定義する時、下記のような書き方をしてしまうと、文字列型として判定されてしまう。 (&amp;quot;username&amp;quot;) タプルとして扱ってもらいたいのであれば、下記のように記述する。カンマを忘れずに。 (&amp;quot;username&amp;quot;,) タプルはリストと同様に扱えるので、後から</description>
    </item>
    
    <item>
      <title>SeleniumでFirefoxブラウザのプロファイルを読み込む【Recaptcha突破、Cookie&#43;アドオン読み込み】</title>
      <link>https://noauto-nolife.com/post/selenium-read-profile/</link>
      <pubDate>Mon, 29 Mar 2021 08:37:13 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/selenium-read-profile/</guid>
      <description>めったに使うことのないSeleniumではあるが、いざ使おうとするとかなり手間取る。 特にログイン。Django等の管理サイトでログインする際にはパスとIDを控えておけば良いが、GoogleのRecaptchaとかボット対策をしていると当然突破できない。そこで予めブラウザでログインをしておいて、そのプロファイルを読み込めば良い。 プロファイルを読み込みするコード 下記コードをコピペすれば良いだけである。</description>
    </item>
    
    <item>
      <title>DjangoでSendgridを実装させる方法【APIキーと2段階認証を利用する】</title>
      <link>https://noauto-nolife.com/post/django-sendgrid/</link>
      <pubDate>Fri, 12 Feb 2021 17:48:49 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-sendgrid/</guid>
      <description>Sendgridのパスワードを使用したメール送信が廃止され、APIを使用した2段階認証が強制されるため、ここに対策を記す。本記事はDjango(Python)を対象とした対策について解説する。 django-sendgrid-v5のインストール APIを使用するために、pipにてdjango-sendgrid-v5をインストールさせる。 pip install django-sendgrid-v5 settings.pyにて設定を施す settings.pyの</description>
    </item>
    
    <item>
      <title>DjangoやPythonにおける*argsと**kwargsとは何か</title>
      <link>https://noauto-nolife.com/post/django-args-kwargs/</link>
      <pubDate>Tue, 26 Jan 2021 17:07:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-args-kwargs/</guid>
      <description>結論から言うと、*argsはキーワード未指定の引数のリスト、**kwargsはキーワードが指定された引数の辞書を手に入れるためのものである。 *argsはキーワード未指定の引数のリスト まずは、下記コードを参考にしたい。 #! /usr/bin/env python3 # -*- coding: utf-8 -*- import sys def main(name,*args): print(name) print(args) if __name__ == &amp;quot;__main__&amp;quot;: try: main(&amp;quot;Tom&amp;quot;,&amp;quot;Mike&amp;quot;,&amp;quot;Bob&amp;quot;) except KeyboardInterrupt: print(&amp;quot;\nprogram was ended.\n&amp;quot;) sys.exit() main()関数に3つの文字列の引数を与えている。&amp;quot;Tom&amp;quot;,&amp;quot;Mike&amp;quot;,&amp;quot;Bo</description>
    </item>
    
  </channel>
</rss>