<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>コスト削減 on 自動化無しに生活無し</title>
    <link>https://noauto-nolife.com/tags/%E3%82%B3%E3%82%B9%E3%83%88%E5%89%8A%E6%B8%9B/</link>
    <description>Recent content in コスト削減 on 自動化無しに生活無し</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 15 Jul 2022 14:13:01 +0900</lastBuildDate>
    
	<atom:link href="https://noauto-nolife.com/tags/%E3%82%B3%E3%82%B9%E3%83%88%E5%89%8A%E6%B8%9B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Django】1回のリクエストで複数のデータを投稿する【request.POST.getlist()】</title>
      <link>https://noauto-nolife.com/post/django-multi-send/</link>
      <pubDate>Fri, 15 Jul 2022 14:13:01 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-multi-send/</guid>
      <description>例えば、複数のデータを投稿しなければならない時。 フォームに内容を書いて投稿(POSTリクエスト)、投稿内容が表示される(レスポンス) フォームに内容を書いて投稿(POSTリクエスト)、投稿内容が表示される(レスポンス) フォームに内容を書いて投稿(POSTリクエスト)、投稿内容が表示される(レスポンス) フォームに内容を書いて投稿(POSTリクエスト)、投稿内容が表示される(レスポンス) などと複数回リク</description>
    </item>
    
    <item>
      <title>WebSocketとポーリング、ロングポーリングの違い【非同期通信と双方向通信】</title>
      <link>https://noauto-nolife.com/post/polling-long-polling-websocket-difference/</link>
      <pubDate>Thu, 05 May 2022 08:53:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/polling-long-polling-websocket-difference/</guid>
      <description>前説 非同期通信 非同期通信とは、2人以上のユーザーがそれぞれ自分たちの都合のいいタイミングでデータを受信し、通信をすることである。 同期通信とは、リクエストを送信した後、レスポンスを受け取るまで何もできない。 非同期通信ではリクエスト送信をJavaScriptに任せることで、リクエスト送信後からレスポンスを受け取るまでに、続けて処理を行うことができる。 この非同期通信を行うために使用する技術がAjaxであ</description>
    </item>
    
    <item>
      <title>【Django】channelsを使ってWebSocketを実現させる【チャットサイト開発に】</title>
      <link>https://noauto-nolife.com/post/startup-django-channels-web-socket/</link>
      <pubDate>Mon, 02 May 2022 21:34:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-django-channels-web-socket/</guid>
      <description>django-channelsのチュートリアルに倣って、WebSocketを使ったチャットサイトを作った。 とても実装難易度が高く、一筋縄では行かない。そのため実装手順の備忘録として本記事をまとめておく。 わかっていること WebSocketとはプロトコルのこと、HTTPでは実現できない双方向通信を実現させるためのもの 前もってHTTPでWebSocketの通信経路を作る必要がある WebSocketの経路</description>
    </item>
    
    <item>
      <title>【Django】Ajax(jQuery)でロングポーリングを実装させる【チャットサイトの開発に】</title>
      <link>https://noauto-nolife.com/post/django-ajax-long-polling/</link>
      <pubDate>Thu, 28 Apr 2022 16:06:12 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-ajax-long-polling/</guid>
      <description>Ajaxを使えば、ページを部分的に更新させることができる。 そして、setTimeoutを使うことで、指定した時間おきにページを部分的に更新することができる。 ただ、Ajaxによるリクエストとレスポンスを繰り返している(ただのポーリング)ようでは、ウェブサーバーに負担が掛かってしまう。 クラウドサーバーなどは死活問題で、負荷が増えると課金してサーバーの強化などを考慮しなければならない。 そこで、リクエスト</description>
    </item>
    
  </channel>
</rss>