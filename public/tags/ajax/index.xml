<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ajax on 自動化無しに生活無し</title>
    <link>https://noauto-nolife.com/tags/ajax/</link>
    <description>Recent content in Ajax on 自動化無しに生活無し</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 24 Jan 2022 13:18:55 +0900</lastBuildDate>
    
	<atom:link href="https://noauto-nolife.com/tags/ajax/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Django】PUT、PATCH、DELETEメソッドのリクエストを送信する【Django REST Framework】</title>
      <link>https://noauto-nolife.com/post/django-method-put-delete-patch/</link>
      <pubDate>Mon, 24 Jan 2022 13:18:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-method-put-delete-patch/</guid>
      <description>前提 まず前提として、PUT、PATCH、DELETEのメソッドはHTMLのformタグから送信することはできない。 例外として、Laravelでは下記のようにしてformタグでDELETEメソッドを送信するが、Djangoではそれは通用しない。これから解説するDjango Rest Frameworkを使用しても。 &amp;lt;form action=&amp;quot;{{ route(&#39;topics.destroy&#39;,$topic-&amp;gt;id) }}/&amp;quot; method=&amp;quot;POST&amp;quot; style=&amp;quot;display:inline-block;&amp;quot;&amp;gt; {{ csrf_field() }} {{ method_field(&amp;quot;delete&amp;quot;) }} &amp;lt;button class=&amp;quot;btn btn-outline-danger&amp;quot; type=&amp;quot;submit&amp;quot;&amp;gt;削除&amp;lt;</description>
    </item>
    
    <item>
      <title>【Django】Ajaxを使ってOSMとLeaflet.jsでマーカーを配置させる</title>
      <link>https://noauto-nolife.com/post/django-osm-leaflet-mapping-ajax/</link>
      <pubDate>Tue, 23 Nov 2021 08:12:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-osm-leaflet-mapping-ajax/</guid>
      <description>Ajaxを使うことで、ページ全体を再レンダリングしなくてもデータの投稿ができるようになる。これをOSMとLeaflet.jsを使ったマッピングに使うことで、データの投稿がとてもスムーズになる。 Ajaxに関してはDjangoでAjax(jQuery)を実装、送信と同時に投稿内容を確認する【Django Rest Framework不使用版】を、OSMとLeaflet.jsはDjangoでOpenStreetM</description>
    </item>
    
    <item>
      <title>DjangoでAjax(jQuery)を実装、送信と同時に投稿内容を確認する【Django Rest Framework不使用版】</title>
      <link>https://noauto-nolife.com/post/django-ajax/</link>
      <pubDate>Sat, 13 Nov 2021 07:05:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-ajax/</guid>
      <description>ウェブアプリケーションでAjaxが使えるようになれば、ページ内の一部の要素のみを更新させることができる。 それすなわち、 通信量の大幅な削減 ページのちらつき低減 SPA(シングルページアプリケーション)の開発可能 ロングポーリングを使用した永続的な接続が可能(→オンラインチャットなどに転用可能) など、様々な恩恵が得られる。 Ajaxの実装は実質テンプレートとビュー、静的ファイルの編集のみと非常にシンプル。 今</description>
    </item>
    
    <item>
      <title>【Django】canvasで描画した画像をAjax(jQuery)で送信【お絵かきBBS、イラストチャット、ゲームのスクショ共有などに】</title>
      <link>https://noauto-nolife.com/post/django-canvas-send-img-by-ajax/</link>
      <pubDate>Thu, 21 Oct 2021 07:25:39 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-canvas-send-img-by-ajax/</guid>
      <description>例えば、チャットサイト、掲示板サイトでユーザーが描画したイラストを投稿できる形式にしたい時。 ユーザーが手元の端末でペイントツールを起動して画像を保存して、サイトに添付して貼り付けるのはやや面倒。それだけでなく、サイト独自のレギュレーション(お題に沿ってイラストを付け加える形式、指定された色しか使ってはいけないなど)がある場合、ユーザーのペイントツールでそれを強いるのは不可能に近い。 そこで、サイト上</description>
    </item>
    
    <item>
      <title>FormDataをformタグではなく、オブジェクトにキーと値をセットした上でAjax送信</title>
      <link>https://noauto-nolife.com/post/javascript-formdata-obj-set/</link>
      <pubDate>Sat, 14 Aug 2021 11:48:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-formdata-obj-set/</guid>
      <description>タイトルの説明。 通常、Ajaxでサーバーにリクエストを送信する時、下記のようにFormDataクラスを使用して送信する。 let form_elem = &amp;quot;#form_area&amp;quot;; let data = new FormData( $(form_elem).get(0) ); let url = $(form_elem).prop(&amp;quot;action&amp;quot;); let method = $(form_elem).prop(&amp;quot;method&amp;quot;); $.ajax({ url: url, type: method, data: data, processData: false, contentType: false, dataType: &#39;json&#39; }).done( function(data, status, xhr ) { //Done }).fail( function(xhr, status, error) { //Fail }); しかし、送信したいデータがいつもこのようにformタグで囲まれているとも限らない。 そこで、FormDataクラスに引数を入れずにオブジェクトを作り、オブジェクトにキーと値をセットしてAja</description>
    </item>
    
    <item>
      <title>Djangoで動画投稿時にサムネイルもセットでアップロードする【DRF&#43;Ajax(jQuery)&#43;canvas】</title>
      <link>https://noauto-nolife.com/post/django-ajax-thumbnail-upload/</link>
      <pubDate>Mon, 01 Mar 2021 15:03:31 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-ajax-thumbnail-upload/</guid>
      <description>Djangoで動画をアップロードする時、ffmpegなどを使ってサムネイルの自動生成を行うが、クライアントが自分で動画のサムネイルを指定したいときはこの限りではない。 サムネイルに指定したい画像は動画内にあり、クライアントがサムネイルの画像をまだ作っていない場合、アップロードフォームでサムネイルを作る必要がある。 本記事では動画を投稿する際、サムネイルをクライアントが指定した上でアップロードする手法を</description>
    </item>
    
    <item>
      <title>laravelでAjax(jQuery)を送信する【POST&#43;DELETE】</title>
      <link>https://noauto-nolife.com/post/laravel-ajax/</link>
      <pubDate>Thu, 04 Feb 2021 12:29:32 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-ajax/</guid>
      <description>タイトルの通り。laravelにAjax(jQuery)を送信する。コードはLaravelでリクエストのバリデーションを行うを元に作られている。 jQueryを読み込みCSRFトークンをAjax送信時に付せて送信させる まずAjax送信用にjQueryを読み込ませる。それからPOSTリクエストの場合、CSRF対策用のトークンもセットで送信しなければならない。故に、resources/views/bas</description>
    </item>
    
    <item>
      <title>Djangoで多対多のリレーションを含むデータをAjax(jQuery)&#43;DRFで送信させる</title>
      <link>https://noauto-nolife.com/post/django-m2m-restful/</link>
      <pubDate>Tue, 01 Dec 2020 17:17:52 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-m2m-restful/</guid>
      <description>本記事では多対多のリレーションを含んだウェブアプリで、Django REST FrameworkとAjaxを使用した非同期データ送信を実現させる方法を書く。 ソースコードは『【Django】一対多、多対多のリレーションでforms.pyを使ったバリデーションとフォームを表示』の『【2】forms.pyを使用したフォームバリデーション+独自に作ったテンプレート』から流用した。 Ajax(jQuery)+Restf</description>
    </item>
    
    <item>
      <title>DRF(Django REST Framework)&#43;Ajax(jQuery)で画像とファイルをアップロードする方法</title>
      <link>https://noauto-nolife.com/post/drf-ajax-fileupload/</link>
      <pubDate>Tue, 01 Dec 2020 17:06:20 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/drf-ajax-fileupload/</guid>
      <description>本記事では、DRF(Django REST Framework)とAjaxを使用して画像とファイルを非同期でアップロードする方法をまとめる。 コードはDjangoで画像及びファイルをアップロードする方法から引用している。外見はほとんど変わっていない。 テンプレートとJSのコード まずテンプレート。下記はimage.html {% load static %} &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;画像アップロードのテスト&amp;lt;/ti</description>
    </item>
    
    <item>
      <title>【Restful】DjangoでAjax(jQuery)を実装する方法【Django REST Framework使用】</title>
      <link>https://noauto-nolife.com/post/django-ajax-restful/</link>
      <pubDate>Tue, 10 Nov 2020 14:01:19 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-ajax-restful/</guid>
      <description>先日の記事にて、DjangoでAjax(jQuery)を実装する方法を解説した。 ただ、RestfulAPIを使用すれば、さらに少ないコードでAjaxを実装することができる。 RestfulAPI、Django REST Frameworkとは RestfulAPIとは、HTTPリクエストに応じてサーバーの処理を切り分けることができるAPIのこと。 HTTPリクエストのヘッダ部には、リクエスト送信先のURLとリクエ</description>
    </item>
    
  </channel>
</rss>