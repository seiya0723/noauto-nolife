<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自動化無しに生活無し</title>
    <link>https://noauto-nolife.com/</link>
    <description>Recent content on 自動化無しに生活無し</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 17 Sep 2022 10:20:08 +0900</lastBuildDate>
    
	<atom:link href="https://noauto-nolife.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>rtcwakeコマンドを動かす【指定時間後に復帰、WOLが使えない時に】</title>
      <link>https://noauto-nolife.com/post/rtcwake-and-crontab/</link>
      <pubDate>Sat, 17 Sep 2022 10:20:08 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/rtcwake-and-crontab/</guid>
      <description>私のサーバーは夜中は操作しないので、crontabでshutdownすることにしている。 そして、朝になったらラズパイなどの常時動いている端末にWakeOnLanを送信して起動させている。 だが、そのサーバーが無線LANになった時、WakeOnLanは通用しない。 ではいかにして、終了と起動を指定時間に行わせるか。そこで、rtcwakeを使う。 今すぐ終了して7時間後に起動して欲しい場合 sudo rtcwake -m off -s 25200 これを</description>
    </item>
    
    <item>
      <title>【JavaScript】動的に要素が変化した時に何か処理をさせたいならMutationObserverを使う</title>
      <link>https://noauto-nolife.com/post/javascript-dynamic-element-change-detect/</link>
      <pubDate>Sun, 11 Sep 2022 21:23:32 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-dynamic-element-change-detect/</guid>
      <description>例えば、特定の要素内のHTMLがJavaScriptの処理によって変わった時。 こんな時に何か処理を実行したい場合、MutationObserverを使うと良い。 ソースコード //特定の要素が動的に変化した時、何らかの発動させる let body = document.getElementsByTagName(&#39;body&#39;)[0]; let target = new MutationObserver(function(){ detail_sortable() }); target.observe(body, { &amp;quot;childList&amp;quot;:true,&amp;quot;subtree&amp;quot;:true }); 結論 例えば、Ajaxが発動して、ページがレンダリングされた時に何かを発動させることができる。(Ajaxのdoneの時に処理を書くという方法もあるが</description>
    </item>
    
    <item>
      <title>JavaScriptで並び替えをするならSortable.js【jQuery不要のライブラリ】</title>
      <link>https://noauto-nolife.com/post/javascript-sortablejs/</link>
      <pubDate>Sun, 11 Sep 2022 21:21:48 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-sortablejs/</guid>
      <description>CDN &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World test!!&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.6.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;sort_area&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;sort_item&amp;quot; style=&amp;quot;background:orange;padding:0.5rem;margin:0.5rem;&amp;quot;&amp;gt;1&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;sort_item&amp;quot; style=&amp;quot;background:orange;padding:0.5rem;margin:0.5rem;&amp;quot;&amp;gt;2&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;sort_item&amp;quot; style=&amp;quot;background:orange;padding:0.5rem;margin:0.5rem;&amp;quot;&amp;gt;3&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;sort_item&amp;quot; style=&amp;quot;background:orange;padding:0.5rem;margin:0.5rem;&amp;quot;&amp;gt;4&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;sort_item&amp;quot; style=&amp;quot;background:orange;padding:0.5rem;margin:0.5rem;&amp;quot;&amp;gt;5&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;sort_item&amp;quot; style=&amp;quot;background:orange;padding:0.5rem;margin:0.5rem;&amp;quot;&amp;gt;6&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; let sort_areas = $(&amp;quot;.sort_area&amp;quot;); for (let area of sort_areas ){ new Sortable(area, { animation: 150, ghostClass: &#39;dragging&#39;, onEnd: function(){ console.log(&amp;quot;ソート完了&amp;quot;) }, }); } &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 動かすとこうなる 結論 ソート終了時、onEndで何か処理を実行する事ができる。ただこの処理で要素を特定しても、並び替える前の要素を取得してしまうので、そのままAjaxをという考えは通用しない模様。 ドラッ</description>
    </item>
    
    <item>
      <title>vimの操作方法</title>
      <link>https://noauto-nolife.com/post/startup-vim/</link>
      <pubDate>Sun, 11 Sep 2022 18:24:04 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-vim/</guid>
      <description>前提 vimは通常のテキストエディタと違って、主に3つのモードを使い分けて編集を行う コマンドモード 挿入モード ビジュアルモード コマンドモード vimを起動した時、デフォルトでこのモードになっている。 保存や終了、検索やマクロなどのコマンドを実行する事ができる。 挿入モード テキスト入力をするモード。i、o、aキーのいずれかでこのモードに入る。 挿入モードを終了してコマンドモードに移行するにはEscキーを押す。 ビ</description>
    </item>
    
    <item>
      <title>Djangoでクエリビルダを使い、スペース区切りの文字列検索と絞り込みを同時に行う【JSとカスタムテンプレートタグを使用】</title>
      <link>https://noauto-nolife.com/post/django-search-querybuilder-custom-templates-js/</link>
      <pubDate>Sun, 11 Sep 2022 14:21:37 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-search-querybuilder-custom-templates-js/</guid>
      <description>カスタムテンプレートタグはJavaScriptにとって変えることもできるが、今回はあらゆる状況を考慮し、両方使用した。 ビュー from django.shortcuts import render from django.views import View from django.db.models import Q from .models import Category,Product from .forms import CategorySearchForm,ProductMaxPriceForm,ProductMinPriceForm class IndexView(View): def get(self, request, *args, **kwargs): context = {} query = Q() context[&amp;quot;categories&amp;quot;] = Category.objects.order_by(&amp;quot;-dt&amp;quot;) #検索キーワードあり if &amp;quot;search&amp;quot; in request.GET: search = request.GET[&amp;quot;search&amp;quot;] raw_words = search.replace(&amp;quot; &amp;quot;,&amp;quot; &amp;quot;).split(&amp;quot; &amp;quot;) words = [ w for w in raw_words if w != &amp;quot;&amp;quot; ] for w in words: query &amp;amp;= Q(name__contains=w) #カテゴリ検索ありの時、queryに追加する。 form = CategorySearchForm(request.GET) if form.is_valid(): cleaned = form.clean() query &amp;amp;= Q(category=cleaned[&amp;quot;category&amp;quot;].id) #金額の上限 form = ProductMaxPriceForm(request.GET) if form.is_valid(): cleaned = form.clean() query &amp;amp;= Q(price__lte=cleaned[&amp;quot;max_price&amp;quot;]) #金額の下限 form =</description>
    </item>
    
    <item>
      <title>FFmpegを使ってUbuntuサーバーにUSBで接続されたウェブカメラで映像を録画する</title>
      <link>https://noauto-nolife.com/post/ffmpeg-ubuntu-server-webcamera/</link>
      <pubDate>Sat, 10 Sep 2022 20:48:19 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ffmpeg-ubuntu-server-webcamera/</guid>
      <description>Ubuntu 22.04 Serverでやった ハードはラズパイ3B+ インストール FFmpegとv4l2-utilsをインストール sudo apt install ffmpeg v4l-utils デバイスを特定する v4l2-ctl --list-devices こんなふうに表示される(一部省略) BUFFALO BSWHD06M USB Camera : (usb-3f980000.usb-1.4): /dev/video0 /dev/video1 /dev/media3 対応しているフォーマットと解像度を特定する ffmpeg -f v4l2 -list_formats all -i /dev/video0 こんなふうに表示される(一部省略) [video4linux2,v4l2 @ 0xaaaad7c25420] Raw : yuyv422 : YUYV 4:2:2 : 1280x720 800x600 640x480 640x360 352x288 320x240 176x144 160x120 [video4linux2,v4l2 @ 0xaaaad7c25420] Compressed: mjpeg : Motion-JPEG : 1280x960 1280x720 800x600 640x480 640x360 352x288 320x240 176x144 160x120 映像を録画する ffmpeg -f v4l2 -framerate 30 -video_size 352x288 -i /dev/video0 output.mkv 後はこの映像をs</description>
    </item>
    
    <item>
      <title>【Ubuntu】netplanに無線LAN(wifi)で固定IPアドレスを割り当てる</title>
      <link>https://noauto-nolife.com/post/netplan-wireless-settings/</link>
      <pubDate>Sat, 10 Sep 2022 17:48:36 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/netplan-wireless-settings/</guid>
      <description>有線であれば以下のように書く。 network: ethernets: eth0: dhcp4: false addresses: - 192.168.11.246/24 routes: - to: default via: 192.168.11.1 nameservers: addresses: - 192.168.11.1 version: 2 無線LANの場合、ip addrで表示される無線LANのデバイス名を控えた上で下記のように記す network: wifis: wlan0: dhcp4: false addresses: - 192.168.11.246/24 routes: - to: default via: 192.168.11.1 nameservers: addresses: - 192.168.11.1 access-points: &amp;quot;SSIDname&amp;quot;: password: &amp;quot;password&amp;quot; version: 2</description>
    </item>
    
    <item>
      <title>nanoエディタの操作方法</title>
      <link>https://noauto-nolife.com/post/startup-nano-editor/</link>
      <pubDate>Thu, 08 Sep 2022 11:47:22 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-nano-editor/</guid>
      <description>急にnanoエディタが立ち上がり、ふだんvimを使っている身としては、調べながら終了させるのは手間になる。 Ctrl+Xで終了できる 保存するかどうか聞かれるので、nを押して保存せずに終了する。 保存する時は、yを押してEnterキーを推せば保存して終了できる。 nanoエディタはWindowsのメモ帳とほぼ同様に扱うことができ、管理者権限が必要なファイルの編集もできる。 vimが使いづらいなと思う場合にお</description>
    </item>
    
    <item>
      <title>【CSS3】チャットのウェブデザインを作る</title>
      <link>https://noauto-nolife.com/post/css3-chat-web-design/</link>
      <pubDate>Tue, 06 Sep 2022 16:41:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-chat-web-design/</guid>
      <description>HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World test!!&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;main class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;mine_speech_bubble_area&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;speech_bubble&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;others_speech_bubble_area&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;speech_bubble&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Django用のHTML {% for topic in topics %} &amp;lt;div class=&amp;quot;{% if topic.user.id == request.user.id %}mine{% else %}others{% endif %}_speech_bubble_area&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;speech_bubble&amp;quot;&amp;gt;{{ topic.comment|linebreaksbr }}&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; {% endfor %} CSS .mine_speech_bubble_area{ text-align:right; } .others_speech_bubble_area{ text-align:left; } .mine_speech_bubble_area .speech_bubble { /* 自分が送った時は右下の角をつける */ background:lime; border-bottom-right-radius:0; } .others_speech_bubble_area .speech_bubble { /* 自分が送った時は右下の角をつける */ background:silver; border-top-left-radius:0; } .speech_bubble{ text-align:left; word-break:break-all; display:inline-block; max-width:80%; padding:0.5rem; margin:0.5rem 0; border-radius:1rem; } 動かすとこうなる。</description>
    </item>
    
    <item>
      <title>Ubuntuに環境変数をセットし、Pythonでosモジュールを使って読む方法【os.environ】</title>
      <link>https://noauto-nolife.com/post/ubuntu-env-read-python/</link>
      <pubDate>Sun, 04 Sep 2022 15:49:58 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu-env-read-python/</guid>
      <description>例えば、gitで管理しているプロジェクトをgitでデプロイする時。 たとえローカルサーバーのDBのパスワードとは言え、ハードコードした状態でコミットするわけには行かない。(gitignoreに入れてしまうとパスワードが含まれない) そこで、環境変数をセットし、Python側でそれを読む。 環境変数をセットする。 #変数名=値 ZZZ=test #変数を環境変数としてセットする。 export ZZZ #↑2つは下記でも可 export ZZZ=test セットした環境変数</description>
    </item>
    
    <item>
      <title>PHPでmb_strlenもしくはstrlenがNotFoundのときの対策</title>
      <link>https://noauto-nolife.com/post/php-not-found-mb-strlen/</link>
      <pubDate>Fri, 02 Sep 2022 09:07:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/php-not-found-mb-strlen/</guid>
      <description>mb_strlen()もしくはstrlen()がNotFoundになるときは、下記コマンドを実行してphp-mbstringをインストールする #PHPのバージョンは合わせる sudo apt install php8.1-mbstring ちなみに、strlen()はバイト数、mb_strlen()は文字列の長さ(マルチバイト文字を1文字とみなす)を返す。</description>
    </item>
    
    <item>
      <title>HUGOのテンプレートでコメントアウトする</title>
      <link>https://noauto-nolife.com/post/hugo-comment-out/</link>
      <pubDate>Thu, 01 Sep 2022 16:20:29 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/hugo-comment-out/</guid>
      <description>{{/* HUGOのテンプレートをコメントアウトできる。 */}}</description>
    </item>
    
    <item>
      <title>WindowsでPythonとPycharmをインストールする</title>
      <link>https://noauto-nolife.com/post/windows-python-and-pycharm-install/</link>
      <pubDate>Thu, 01 Sep 2022 08:49:01 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/windows-python-and-pycharm-install/</guid>
      <description>Pythonのインストール Pythonのインストーラーを配布しているサイト( https://www.python.org/downloads/ )へ行く。 Download Python 3.10.6 の部分をクリックする。インストーラーがDLされる。 ( ※下記画像の赤枠部分。3.10.6は2022年9月現在のバージョンであり、今後バージョンが更新される。最新版のPythonインストーラーをDLする。 ) ダウンロードフォルダにて、先ほどDLしたインストーラーのファイルがあるので、ダブルクリックしてPytho</description>
    </item>
    
    <item>
      <title>composerでLaravel9.xプロジェクトが作れない問題に対処する【php8.1】</title>
      <link>https://noauto-nolife.com/post/ubuntu-composer-error/</link>
      <pubDate>Mon, 29 Aug 2022 17:39:34 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu-composer-error/</guid>
      <description>ある日、composerコマンドを実行してLaravelプロジェクトを作ろうにも、エラーが出て作れない。 composer create-project --prefer-dist laravel/laravel testlaraveler1 を実行すると下記が得られる。 Creating a &amp;quot;laravel/laravel&amp;quot; project at &amp;quot;./testlaraveler1&amp;quot; Info from https://repo.packagist.org: #StandWithUkraine Installing laravel/laravel (v9.3.5) - Downloading laravel/laravel (v9.3.5) - Installing laravel/laravel (v9.3.5): Extracting archive Created project in /home/akagi/Documents/programming/php/laravel_test03/testlaraveler1 &amp;gt; @php -r &amp;quot;file_exists(&#39;.env&#39;) || copy(&#39;.env.example&#39;, &#39;.env&#39;);&amp;quot; Loading composer repositories with package information Updating dependencies Your requirements could not be resolved to an installable set of packages. Problem 1 - spatie/laravel-ignition[1.0.0, ..., 1.4.0] require ext-curl * -&amp;gt; it is missing from your system. Install or enable PHP&#39;s curl extension. - Root composer.json requires spatie/laravel-ignition ^1.0 -&amp;gt; satisfiable by spatie/laravel-ignition[1.0.0, ..., 1.4.0]. To enable extensions, verify that they are enabled in your .ini files: - /etc/php/8.1/cli/php.ini - /etc/php/8.1/cli/conf.d/10-opcache.ini - /etc/php/8.1/cli/conf.d/10-pdo.ini - /etc/php/8.1/cli/conf.d/15-xml.ini - /etc/php/8.1/cli/conf.d/20-calendar.ini - /etc/php/8.1/cli/conf.d/20-ctype.ini - /etc/php/8.1/cli/conf.d/20-dom.ini - /etc/php/8.1/cli/conf.d/20-exif.ini - /etc/php/8.1/cli/conf.d/20-ffi.ini - /etc/php/8.1/cli/conf.d/20-fileinfo.ini - /etc/php/8.1/cli/conf.d/20-ftp.ini - /etc/php/8.1/cli/conf.d/20-gettext.ini - /etc/php/8.1/cli/conf.d/20-iconv.ini - /etc/php/8.1/cli/conf.d/20-phar.ini -</description>
    </item>
    
    <item>
      <title>UbuntuにSambaをインストールしてファイルサーバー化させる</title>
      <link>https://noauto-nolife.com/post/ubuntu-samba/</link>
      <pubDate>Sat, 27 Aug 2022 10:04:40 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu-samba/</guid>
      <description>本記事はプライベート用として運用するため、セキュリティは全く考慮していない。 本記事に倣って作ったファイルサーバーは、LAN内の端末であれば、いずれも自由に読み書きできてしまうので注意。 インストールする sudo apt install samba 共有ディレクトリを作る 今回はホームディレクトリに作った mkdir ~/share chmod 777 ~/share 設定する sudo vi /etc/samba/smb.conf を開いて、末尾に下記を記入。UserNameには任意のユーザー名を指定 [share] path = /home/UserName/share browseable = yes writable = yes guest ok = yes guest only = yes create mode = 0777</description>
    </item>
    
    <item>
      <title>Heroku有料化の対策を考える【2022年11月28日よりHerokuPostgres(9ドル)、HerokuDynos(7ドル)の有料化】</title>
      <link>https://noauto-nolife.com/post/heroku-counter-plan/</link>
      <pubDate>Fri, 26 Aug 2022 17:37:46 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/heroku-counter-plan/</guid>
      <description>2022年8月26日、メールボックスを見るとHerokuからメールが届いていた。内容は下記。 まとめると、こうなる 2022年11月28日からHerokuの一部サービスで無料プランが無くなる 対象はHerokuDynos、HerokuPostgres、Redisの3つ 有料化以降、WEB(7$)+DB(9$)のウェブアプリをデプロイする時、一ヶ月につき16$支払う必要がある さあ困った。 これまでHeroku</description>
    </item>
    
    <item>
      <title>【Django】django-admin、python、pip、コマンドが動作しない場合の対処法【環境構築問題】</title>
      <link>https://noauto-nolife.com/post/django-admin-command-not-found/</link>
      <pubDate>Thu, 25 Aug 2022 13:48:12 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-admin-command-not-found/</guid>
      <description>いわゆる、PATHが通っていない状態 Pythonのインストーラーでインストールする時、『add Python 3.x to PATH』というチェック項目がある。 そこにチェックを入れることで、pythonコマンドが使えるようになる。 参照元:https://bluebirdofoz.hatenablog.com/entry/2019/01/19/141007 django-adminコマンドが使えない時、 django-admin startproject config . pythonか</description>
    </item>
    
    <item>
      <title>Ubuntu18.04を使ってRaspberryPi3Bにサーバー版Ubuntu22.04をインストールする</title>
      <link>https://noauto-nolife.com/post/rasp3b-ubuntu-install-by-ubuntu/</link>
      <pubDate>Wed, 24 Aug 2022 08:58:03 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/rasp3b-ubuntu-install-by-ubuntu/</guid>
      <description>公式のRaspberry Pi OSはサーバーとして機能させるには不必要なものがあまりにも多すぎる。 ここは普段使い慣れているUbuntuをインストールしたい。 ということで、Ubuntu18.04からRaspberry Piにサーバー版をインストールさせる 必要なもの ラズパイ3B本体 MicroSD(64GBぐらいが理想) MicroSDとUSBの変換器(PCにMicroSDのコネクタがある場合は不要) インストー</description>
    </item>
    
    <item>
      <title>Jupyter Labを始める</title>
      <link>https://noauto-nolife.com/post/startup-jupyter-lab/</link>
      <pubDate>Mon, 22 Aug 2022 12:14:16 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-jupyter-lab/</guid>
      <description>インストール pip install jupyterlab サーバー起動 jupyter lab ファイルの起動 jupyterlabが動いている環境下から適当にディレクトリを作り、ipynbファイルを貼り付ける 下記パスにアクセスする #-------------作ったディレクトリ↓----↓ipynbファイル http://localhost:8888/lab/tree/test/test.ipynb</description>
    </item>
    
    <item>
      <title>【Django】FontAwesomeで星のアイコンを使ったレビューの投稿と表示</title>
      <link>https://noauto-nolife.com/post/django-star-review/</link>
      <pubDate>Sat, 20 Aug 2022 17:55:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-star-review/</guid>
      <description>最終的にこのようになる。 今回はテンプレートのwithとcenterは不使用とした。 そして、5つ星の内、4つ星でレビューした場合、空の星を1つ描画する仕様に仕立てた。 参照 【Django】テンプレートで数値を使用したforループを実行する方法【レビューの星のアイコン表示などに有効】 HTML5とCSS3だけでAmazon風の星レビューのフォームを再現する【ホバーした時、ラジオボタンのチェックされた時に星</description>
    </item>
    
    <item>
      <title>別のUbuntuにデータを輸送する</title>
      <link>https://noauto-nolife.com/post/ubuntu-data-transport/</link>
      <pubDate>Mon, 15 Aug 2022 18:20:02 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu-data-transport/</guid>
      <description>別のPCのUbuntuにデータを全て輸送する必要があったりする。 そういう時、手順をまとめておかないと手直しに返って時間がかかる。 よって、必要なデータ移行作業をここに列挙しておく。 準備編 前もって、下記をやっておく(任意) サーバー版Ubuntu 20.04のインストールから設定、SSHログインまで【固定IPアドレス、タイムゾーン、bashrcなど】 【保存版】Ubuntu18.04をインストールした後に真</description>
    </item>
    
    <item>
      <title>【Django】モデルに計算可能な時間を記録する【勉強時間・筋トレ時間の記録系ウェブアプリの作成に】【DurationField】</title>
      <link>https://noauto-nolife.com/post/django-models-time-calc/</link>
      <pubDate>Sat, 13 Aug 2022 14:44:47 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-time-calc/</guid>
      <description>例えば、勉強時間や筋トレ時間を記録するウェブアプリを作るとする。 この時に、ネックになるのが、時間を記録するモデルフィールド。 IntegerFieldで記録するべきか、DatetimeFieldでtimedeltaを使うか。 いずれにせよ、合計や平均などを出さないといけないので、このフィールド選択を間違えると後々大変なことになる。 フォームの形式も考慮する必要がある。 そこで、本記事では、時間を記録する方</description>
    </item>
    
    <item>
      <title>【Django】Cookieをサーバーサイドで操作する</title>
      <link>https://noauto-nolife.com/post/django-control-cookie/</link>
      <pubDate>Fri, 12 Aug 2022 16:32:07 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-control-cookie/</guid>
      <description>カジュアルなウェブアプリではDBにデータを保存させるよりもCookieに直接保存する場合が多いだろう。 簡易掲示板における名前など、一度入力したデータを再度入力させる場合も、クライアントにとっては使い勝手が悪いので、Cookieをセットして表示させたほうが良い。 サンプルとなるコードはいつもの40分Django。 views.pyにてCookieをセット、参照する testというキー名、値はHelloでC</description>
    </item>
    
    <item>
      <title>【Python3】BeautifulSoup4の使い方、検証のコード作成方法、役立つリンク集のまとめ【保存版】</title>
      <link>https://noauto-nolife.com/post/startup-python3-beautifulsoup4/</link>
      <pubDate>Thu, 11 Aug 2022 09:27:27 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-python3-beautifulsoup4/</guid>
      <description>スクレイピングの用途は様々。 画像などのメディアファイルのDL、サイトの監視、ウェブアプリへの活用などなど。 よって、なるべくすぐにスクレイピング用のコードを作れる状態にしておきたいのだが、そういう時に限ってBeautifulSoupの仕様を忘れたり、コードを漁ったりしないと作れない。 そこで、本記事ではBeautifulSoup4の使い方を含め、検証方法等やドキュメントなどをまとめる。 【request</description>
    </item>
    
    <item>
      <title>Pycharmを使う前にやっておきたい設定と覚えておくと良い操作方法</title>
      <link>https://noauto-nolife.com/post/pycharm-config/</link>
      <pubDate>Wed, 10 Aug 2022 17:50:56 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/pycharm-config/</guid>
      <description>Pycharmはデフォルトではやや使いづらい。そのため、本記事ではなるべく使いやすくする設定と覚えておくとよい操作方法を記す。 設定 日本語化 https://mergedoc.osdn.jp/ にアクセス。Pleiadesプラグイン・ダウンロードからOSにあった日本語用のzipをDL。 zipを展開した後、WindowsやMacの場合はマウスクリックでインストーラーを起動させれば良い。 ※日本語の表記ゆれなどを考慮し、以降の設定はインストールしてすぐの英</description>
    </item>
    
    <item>
      <title>【Django】カレンダーを更に改良する</title>
      <link>https://noauto-nolife.com/post/django-calendar-custom/</link>
      <pubDate>Mon, 08 Aug 2022 16:16:36 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-calendar-custom/</guid>
      <description>カレンダー機能に年月指定をするリンクとフォームを用意した。 ソースコード https://github.com/seiya0723/django_calendar_custom</description>
    </item>
    
    <item>
      <title>【Python】pipで翻訳系ライブラリのgoogletransをインストールする【※バージョン指定しないとエラー】</title>
      <link>https://noauto-nolife.com/post/python-google-trans-install/</link>
      <pubDate>Wed, 03 Aug 2022 15:25:52 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/python-google-trans-install/</guid>
      <description>グーグル翻訳を手軽に試すことができる、Pythonライブラリのgoogletrans。 だが、インストールするバージョンの指定を間違えると、正常に動作してくれない不具合が報告されている。 下記コマンドを実行してインストールするべし。 pip install googletrans==3.1.0a0 その上で、下記を実行する。 from googletrans import Translator translator = Translator() string_ja = &amp;quot;Pythonの勉強は楽しい&amp;quot; trans_en = translator.translate(string_ja, dest=&amp;quot;en&amp;quot;) print(trans_en.text) 正常に翻訳されている。</description>
    </item>
    
    <item>
      <title>JavaScript(jQuery)でストップウォッチとタイマーを作る【勉強や運動の記録などに】</title>
      <link>https://noauto-nolife.com/post/javascript-stopwatch-and-timer/</link>
      <pubDate>Sun, 31 Jul 2022 16:26:04 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-stopwatch-and-timer/</guid>
      <description>記録系のウェブアプリに欠かせないストップウォッチとタイマー これをJavaScript(jQuery)で再現する。 HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World test!!&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.6.0.min.js&amp;quot; integrity=&amp;quot;sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;p-2 my-2&amp;quot;&amp;gt; &amp;lt;h2&amp;gt;タイマー&amp;lt;/h2&amp;gt; &amp;lt;label&amp;gt;&amp;lt;input id=&amp;quot;timer_hour&amp;quot; type=&amp;quot;number&amp;quot; min=&amp;quot;0&amp;quot; max=&amp;quot;99&amp;quot; value=&amp;quot;0&amp;quot;&amp;gt;時間&amp;lt;/label&amp;gt; &amp;lt;label&amp;gt;&amp;lt;input id=&amp;quot;timer_minute&amp;quot; type=&amp;quot;number&amp;quot; min=&amp;quot;0&amp;quot; max=&amp;quot;59&amp;quot; value=&amp;quot;0&amp;quot;&amp;gt;分&amp;lt;/label&amp;gt; &amp;lt;label&amp;gt;&amp;lt;input id=&amp;quot;timer_second&amp;quot;</description>
    </item>
    
    <item>
      <title>【Django】operatorでモデルのフィールド、メソッドを指定してソーティングをする【ランキングの実装に有効】</title>
      <link>https://noauto-nolife.com/post/django-attr-method-sort/</link>
      <pubDate>Sat, 30 Jul 2022 17:48:17 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-attr-method-sort/</guid>
      <description>例えば、モデルがこうだったとする。 from django.db import models class Topic(models.Model): comment = models.CharField(verbose_name=&amp;quot;コメント&amp;quot;,max_length=2000) score = models.IntegerField(verbose_name=&amp;quot;スコア&amp;quot;) def twice(self): return self.score*2 ビューでこのようにすることで、モデルフィールドもしくはモデルメソッドでソーティングができる。 from django.shortcuts import render,redirect from django.views import View from .models import</description>
    </item>
    
    <item>
      <title>【Django】allauthとカスタムユーザーモデルを実装した簡易掲示板を作る【AbstrastBaseUser】</title>
      <link>https://noauto-nolife.com/post/django-custom-user-model-allauth-bbs/</link>
      <pubDate>Sat, 30 Jul 2022 08:46:59 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-custom-user-model-allauth-bbs/</guid>
      <description>手元のディレクトリ内で雛形が分散していたので、自分用に作った。 コードは40分Django簡易掲示板から。allauthはsettings.pyにID認証を、ユーザーモデルはDjangoのGitHubから何も書き加えていないモデルをそのまま流用した。 以前はfirst_nameとlast_nameを1つのhandle_nameにしたが、今回は元に戻した。 雛形をすぐにDLして書き換えができるようにGit</description>
    </item>
    
    <item>
      <title>【Django】1回のリクエストで複数のデータを投稿する【request.POST.getlist()】</title>
      <link>https://noauto-nolife.com/post/django-multi-send/</link>
      <pubDate>Fri, 15 Jul 2022 14:13:01 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-multi-send/</guid>
      <description>例えば、複数のデータを投稿しなければならない時。 フォームに内容を書いて投稿(POSTリクエスト)、投稿内容が表示される(レスポンス) フォームに内容を書いて投稿(POSTリクエスト)、投稿内容が表示される(レスポンス) フォームに内容を書いて投稿(POSTリクエスト)、投稿内容が表示される(レスポンス) フォームに内容を書いて投稿(POSTリクエスト)、投稿内容が表示される(レスポンス) などと複数回リク</description>
    </item>
    
    <item>
      <title>【保存版】Ajax(jQuery)の仕組みと仕様</title>
      <link>https://noauto-nolife.com/post/jquery-ajax-detail/</link>
      <pubDate>Fri, 15 Jul 2022 11:42:54 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/jquery-ajax-detail/</guid>
      <description>本記事は、たびたび忘れがちなAjaxのパラメータや引数などの意味を思い返すための備忘録である。 let form_elem = &amp;quot;#form_area&amp;quot;; let data = new FormData( $(form_elem).get(0) ); let url = $(form_elem).prop(&amp;quot;action&amp;quot;); let method = $(form_elem).prop(&amp;quot;method&amp;quot;); $.ajax({ url: url, // リクエストの送信先 type: method, // 送信するリクエストのメソッド data: data, // 送信するデータ(FormDataオブジェクト型) processData: false, // dataに指定した内容をURLエンコードして送信(?page=2などの形式)にするかの指定。FormDataオブジェクトの場合はfalseを指定 contentType: false,</description>
    </item>
    
    <item>
      <title>【JavaScript】.replace()で検索した文字列すべてを置換したい場合は正規表現を使う</title>
      <link>https://noauto-nolife.com/post/javascript-replace-trap/</link>
      <pubDate>Thu, 14 Jul 2022 17:30:20 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-replace-trap/</guid>
      <description>例えば、以下の文字列の,をに書き換えたいとする。 let data = &amp;quot;aaa,bbb,ccc&amp;quot;; 文字列の置換処理は.replace()で実現できるから、こうすれば良いと思いがちだが実は違う。 console.log(data.replace(&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;)); // aaa bbb,ccc デフォルトでは最初にヒットした文字列しか置換してくれない。検索した文字列を全て置換したい場合、このようにする。 console.log(data.replace( /,/g , &amp;quot; &amp;quot;)); // aaa bbb ccc ちなみにPythonでは.replace()を使うと全て置換してくれる。だから、Pythonでreplaceを使</description>
    </item>
    
    <item>
      <title>【Django】自前でLoginRequiredMixinのような物を作るには、dispatchメソッドを使う【多重継承】</title>
      <link>https://noauto-nolife.com/post/django-create-origin-mixin/</link>
      <pubDate>Mon, 11 Jul 2022 12:06:17 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-create-origin-mixin/</guid>
      <description>LoginRequiredMixinのように、ビューが実行される前に何かの処理を実行したい場合。 dispatchメソッドに処理を書くと良いだろう。ただ、全てのビュークラスにdispatchメソッドを書いているようでは手間がかかる。 そこで、多重継承して利用できるように仕立てる。つまり、LoginRequiredMixinのような物を自前で作るのだ。 ソースコード 下記のようにdispatchメソッドを含</description>
    </item>
    
    <item>
      <title>DjangoでカレンダーのUIを作る</title>
      <link>https://noauto-nolife.com/post/django-calendar-ui/</link>
      <pubDate>Sat, 09 Jul 2022 15:42:16 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-calendar-ui/</guid>
      <description>『Djangoビギナーが40分で掲示板アプリを作る方法』を元に、カレンダーのUIを作る。 1ヶ月分のデータをまとめて表示させたい系のウェブアプリの作成に活用できる。 calendar.py このcalendar.pyをアプリディレクトリ内に作る。 import datetime def create_calendar(year,month): #今月の初日を指定 dt = datetime.date(year,month,1) #calendarはweekのリスト、weekは日付のリスト calendar = [] week = [] #月始めが日曜日以外の場合、空欄を追加する。 if dt.weekday() != 6: week = [ {&amp;quot;day&amp;quot;:&amp;quot;&amp;quot;} for i in range(dt.weekday()+1) ] &amp;quot;&amp;quot;&amp;quot; #内</description>
    </item>
    
    <item>
      <title>【Django】openpyxlでエクセルファイルを新規作成、バイナリでダウンロードする</title>
      <link>https://noauto-nolife.com/post/django-openpyxl/</link>
      <pubDate>Fri, 08 Jul 2022 08:15:03 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-openpyxl/</guid>
      <description>Djangoでエクセルファイルを新規作成し、ダウンロード(以下DL)する。 ファイルのDLと言うと、ファイルのアップロードと同じようにやればいいだろうと思うかもしれない。 実際、ファイルをストレージに保存し、そのURLへリダイレクトしてDLする方法でも、問題なく動作する。しかし、これではストレージが圧迫される。 そこで今回は、サーバーのメモリ内に保存されているファイルをバイナリに変換し、レスポンスとして</description>
    </item>
    
    <item>
      <title>JavaScript(jQuery)で神経衰弱</title>
      <link>https://noauto-nolife.com/post/javascript-memory-weakness/</link>
      <pubDate>Thu, 30 Jun 2022 14:57:25 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-memory-weakness/</guid>
      <description>canvas未使用、JavaScript(jQuery)で神経衰弱を作ってみた。 突貫で作ったためかなり雑ではあるが、トランプを使用したゲームに流用できそうだ。 デモページ カードの素材は ( https://opengameart.org/content/playing-cards-vector-png )より。ウラ面は自前で作った。 https://seiya0723.github.io/memory_cards_game/ ソースコード https://github.com/seiya0723/memory_cards_game HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World test!!&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; img { width:200px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;table id=&amp;quot;table&amp;quot;&amp;gt;&amp;lt;/table&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; JavaScript window.addEventListener(&amp;quot;load&amp;quot; , function (){ // カードの画像: https://opengameart.org/content/playing-cards-vector-png //カードのデータ形式 var CARD_DATA = [ { &amp;quot;number&amp;quot;:1,&amp;quot;src&amp;quot;:&amp;quot;img/ace_of_clubs.png&amp;quot; }, { &amp;quot;number&amp;quot;:1,&amp;quot;src&amp;quot;:&amp;quot;img/ace_of_diamonds.png&amp;quot; }, { &amp;quot;number&amp;quot;:1,&amp;quot;src&amp;quot;:&amp;quot;img/ace_of_hearts.png&amp;quot; }, { &amp;quot;number&amp;quot;:1,&amp;quot;src&amp;quot;:&amp;quot;img/ace_of_spades.png&amp;quot; }, { &amp;quot;number&amp;quot;:2,&amp;quot;src&amp;quot;:&amp;quot;img/2_of_clubs.png&amp;quot; }, { &amp;quot;number&amp;quot;:2,&amp;quot;src&amp;quot;:&amp;quot;img/2_of_diamonds.png&amp;quot; }, { &amp;quot;number&amp;quot;:2,&amp;quot;src&amp;quot;:&amp;quot;img/2_of_hearts.png&amp;quot; }, { &amp;quot;number&amp;quot;:2,&amp;quot;src&amp;quot;:&amp;quot;img/2_of_spades.png&amp;quot; }, {</description>
    </item>
    
    <item>
      <title>Sendgridのアカウントが一時的に凍結された場合の対処法と対策</title>
      <link>https://noauto-nolife.com/post/sendgrid-account-suspended/</link>
      <pubDate>Tue, 28 Jun 2022 07:03:38 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/sendgrid-account-suspended/</guid>
      <description>某日、Sendgridからメールが届く。内容は下記。 Dear Twilio SendGrid Customer, Your Twilio SendGrid account has been temporarily suspended as we have detected that your account&#39;s credentials (password and/or API key) are publicly listed on the code repository GitHub. This is a dangerous practice which may result in your account being used by unauthorized third parties to send malicious content and which may incur damage to your reputation as a quality sender and charges against your account for high usage that you did not perform. Before you ask for your account&#39;s reactivation, please ensure that you: 1) Change your account&#39;s password: https://sendgrid.com/docs/ui/account-and-settings/resetting-your-username-and-password. If your account was created using Heroku or IBM BlueMix, you must use our password reset form. 2) Delete and update exposed API keys in your account [APIのID] : https://sendgrid.com/docs/ui/account-and-settings/api-keys/#delete-an-api-key 3) Enable two-factor authentication for your account 4) Remove your account credentials and API keys from any public listings on code repositories or associated comments on sites such as GitHub or BitBucket. Please see the following link(s) for locations where your credentials</description>
    </item>
    
    <item>
      <title>Django-allauthのメールを使用したログイン方式で、アカウント新規作成時、確認URLにアクセスしていないにもかかわらず、ログインできてしまうのはなぜか？</title>
      <link>https://noauto-nolife.com/post/django-allauth-why-not-verify-email/</link>
      <pubDate>Sun, 19 Jun 2022 16:12:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-allauth-why-not-verify-email/</guid>
      <description>allauthはそういう仕様になっているから。 前提として、下記記事の『メールアドレスとパスワードを使用した認証方法の実装』のコードを採用している場合に限る。 【メール認証】Django-allauthの実装方法とテンプレート編集【ID認証】 メールの確認の仕様を考慮するとわかる アカウント新規作成時に送信されるメールの中にあるURL このURLに対してGETリクエスト送信 Django側はこのURLに対して</description>
    </item>
    
    <item>
      <title>【Django】settings.pyのINSTALLED_APPSにはどのように書くのが適切か【順番とapps】</title>
      <link>https://noauto-nolife.com/post/django-settings-installed-apps/</link>
      <pubDate>Sat, 18 Jun 2022 22:55:34 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-settings-installed-apps/</guid>
      <description>公式の書き方 Django公式によると、下記のように書くのが適切。 INSTALLED_APPS = [ &amp;quot;bbs.apps.BbsConfig&amp;quot;, &#39;django.contrib.admin&#39;, &#39;django.contrib.auth&#39;, &#39;django.contrib.contenttypes&#39;, &#39;django.contrib.sessions&#39;, &#39;django.contrib.messages&#39;, &#39;django.contrib.staticfiles&#39;, ] 参照元: https://docs.djangoproject.com/ja/4.0/ref/applications/#configuring-applications 一部媒体における書き方 一方で一部の媒体では以下のように書かれてある。 INSTALLED_APPS = [ &amp;quot;bbs&amp;quot;, &#39;django.contrib.admin&#39;, &#39;django.contrib.auth&#39;, &#39;django.contrib.contenttypes&#39;, &#39;django.contrib.sessions&#39;, &#39;django.contrib.messages&#39;, &#39;django.contrib.staticfiles&#39;, ] どちらが正しいのか？ bbs/apps.pyにて、下記のように仕立てる。 from django.apps import AppConfig class BbsConfig(AppConfig): default_auto_field = &#39;django.db.models.BigAutoField&#39; name = &#39;bbs&#39; verbose_name = &amp;quot;簡易掲示板&amp;quot; これは管理サイトで操作するモデルの一覧を表記する際、verbose_nameを追加</description>
    </item>
    
    <item>
      <title>【Django】ユーザー作成時に何らかの処理を行う方法【saveメソッドオーバーライド】</title>
      <link>https://noauto-nolife.com/post/django-createuser-save-method-override/</link>
      <pubDate>Sat, 18 Jun 2022 17:17:42 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-createuser-save-method-override/</guid>
      <description>カスタムユーザーモデルを使用している時、ユーザーアカウント新規作成時に何らかの処理を行って欲しい場合。 そういう時はSignupFormのsaveメソッドをオーバーライドする。 SignUpFormのコード from django.contrib.auth.forms import UserCreationForm from .models import CustomUser class SignupForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = CustomUser fields = (&amp;quot;username&amp;quot;) def save(self, request, commit=True, *args, **kwargs): #ユーザーモデルのオブジェクト作成(ただし、保存をしない) user = super().save(commit=False) #生のパスワードをハッシュ化した上で、モデルオブジェクトの属性にセットする。 user.set_password(self.cleaned_data[&amp;quot;password1&amp;quot;]) #保存す</description>
    </item>
    
    <item>
      <title>要件定義書の書き方</title>
      <link>https://noauto-nolife.com/post/startup-create-rdd/</link>
      <pubDate>Sat, 04 Jun 2022 17:13:16 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-create-rdd/</guid>
      <description>開発者になるために必要な要件定義書の書き方と必要なものを解説する。 そもそも要件定義とは？ システムを作るために決めるべきこと。 とりわけ、システムにおける5W1Hに基づいて、取り決めを行う必要がある。 この取り決めが曖昧であれば、受注者と顧客間での認識に食い違いが生まれる。 要件定義書に必要なもの 要件定義書に正解はない。 必ずしも下記の全ての項目を作る必要はない。必要に応じて省略し、簡潔に済ませることもわか</description>
    </item>
    
    <item>
      <title>UbuntuにWordpressをインストールする【MariaDB&#43;Apache】</title>
      <link>https://noauto-nolife.com/post/startup-wordpress-ubuntu/</link>
      <pubDate>Sat, 04 Jun 2022 16:46:42 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-wordpress-ubuntu/</guid>
      <description>手元のPCにWordpressをインストールして試したいが、OSに直にインストールするのは避けたい。 そういう時、VirtualBoxにインストールしたUbuntuへ、Wordpressをインストールすると良いだろう。 流れ Apacheのインストール MariaDBのインストールとDB・ユーザーの作成 PHPのインストール Wordpressのインストール Apacheのインストール インストール sudo apt install apache2 自動起</description>
    </item>
    
    <item>
      <title>JavaScript(jQuery)でQRコードを表示させる</title>
      <link>https://noauto-nolife.com/post/javascript-qrcode/</link>
      <pubDate>Mon, 23 May 2022 11:23:01 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-qrcode/</guid>
      <description>例えば、ユーザーの一部がPCでの操作をやめて、スマホで操作したいと思ったとする。 こういう時QRコードを表示させる、ブラウザのアドオンや機能を使えば良いが、ユーザーにそれを強いるのはやや酷である。 そこで、jQueryを使用して、QRコードを簡単に表示させると良いだろう。 コード &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World test!!&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.qrcode/1.0/jquery.qrcode.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; window.addEventListener(&amp;quot;load&amp;quot; , function (){ let qrtext = location.href; let utf8qrtext = unescape(encodeURIComponent(qrtext)); $(&amp;quot;#qrcode&amp;quot;).html(&amp;quot;&amp;quot;); $(&amp;quot;#qrcode&amp;quot;).qrcode({width:160,height:160,text:utf8qrtext}); }); &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;qrcode&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 動かすとこうなる。 結論 下記を参照。 https://github.com/jeromeetienne/jquery-qrcode</description>
    </item>
    
    <item>
      <title>【Django】context_processorsを使い、全ページに対して同じコンテキストを提供する【サイドバーのカテゴリ欄、ニュース欄などに有効】</title>
      <link>https://noauto-nolife.com/post/django-context-processors/</link>
      <pubDate>Tue, 17 May 2022 09:24:35 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-context-processors/</guid>
      <description>以前は、ビュークラスの継承を使ったり、MIDDLEWAREでリクエストオブジェクトを操作したりすることでテンプレートに対してデータを提供していたが、これではやや無駄が多い。 Djangoにはcontext_processorsという、任意の処理を行った後contextを追加できる便利な機能があるので、こちらを使う。 context_processorsを作る まず、アプリディレクトリ内部に、custom</description>
    </item>
    
    <item>
      <title>【Django】モデルクラスのfilterメソッドで検索・絞り込みをする</title>
      <link>https://noauto-nolife.com/post/django-filter-method/</link>
      <pubDate>Mon, 16 May 2022 10:19:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-filter-method/</guid>
      <description>モデルクラスを使用してデータをDBから取り出す時、filterメソッドを使用することで、取り出しの条件を指定することができる。 完全一致の場合(=) =を使用することで完全一致のデータを取り出すことができる。 topics = Topic.objects.filter(id=3) 主キーに対して、=を実行した時、取り出されるデータは1個もしくは0個になる。 そのため、上記のやり方だとforループしなければ、データを取り出すことができない for topic in topics: print(topic) そこで、単一のモデルオブ</description>
    </item>
    
    <item>
      <title>【Django】ファイルアップロード時にファイル名をリネーム(改名)する</title>
      <link>https://noauto-nolife.com/post/django-fileupload-rename/</link>
      <pubDate>Fri, 13 May 2022 17:18:16 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-fileupload-rename/</guid>
      <description>方法論として、2つある。ビューから書き換える方法と、モデルに独自のバリデーションを仕込む方法の2つである。 ビューからファイル名を書き換える request.FILES[&amp;quot;image&amp;quot;].nameから書き換えができる。 request.FILES[&amp;quot;image&amp;quot;].name = &amp;quot;test.png&amp;quot; form = TopicForm(request.POST,request.FILES) # 以下略 # request.POSTに対しては書き換えできないが、何故かFILESに対しては書き換えできる。 もしちょっと気持ち悪いなと思う場合は下記にすると</description>
    </item>
    
    <item>
      <title>【Django】アップロードするファイルサイズに上限をセットする【validators】</title>
      <link>https://noauto-nolife.com/post/django-fileupload-limit-size/</link>
      <pubDate>Fri, 13 May 2022 16:04:39 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-fileupload-limit-size/</guid>
      <description>本記事ではアップロードするファイルサイズに上限をセットする方法を解説する。 ただし、ビュー側にファイルサイズの上限をチェックする機能を実装させるのではなく、以前紹介した、『【Django】models.pyにて、オリジナルのバリデーション処理を追加する【validators】【正規表現が通用しない場合等に有効】』を元に実装させる。 ビューに判定機能を実装させる方法でも問題はないが、投稿するビューが二分</description>
    </item>
    
    <item>
      <title>【git/GitHub】コマンドと使い方の一覧</title>
      <link>https://noauto-nolife.com/post/startup-git/</link>
      <pubDate>Sun, 08 May 2022 10:58:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-git/</guid>
      <description>後に追記予定あり。 必要と思われるものから順に、解説サイトから抜粋して並べている。 基本操作編 これができれば、作ったコードをGitHubに公開できる。 リポジトリを作る git init インデックスする(コミットするファイルを記録) 全てのファイルをインデックスする場合はこうする git add . コミットする git commit -m &amp;quot;ここにコミットのメッセージを記録する&amp;quot; 【補足1】ユーザー情報を入力していないため、コミットできな</description>
    </item>
    
    <item>
      <title>UbuntuにインストールされているPythonをアップデートする</title>
      <link>https://noauto-nolife.com/post/python3-update/</link>
      <pubDate>Sat, 07 May 2022 22:33:21 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/python3-update/</guid>
      <description>経緯 非同期系ライブラリのacyncioのコードを動かそうとした時。 正常に動いてくれない。公式によると、これはPythonが3.7以上でなければ動いてくれないとのこと。( https://docs.python.org/3/library/asyncio.html ) そこでPythonのバージョンを調べたところ、 うわっ..私のPython古すぎ..!! ということで、UbuntuにインストールされているPythonをアップデートしておく。ちなみに2022年5月現時点では、Pythonの最新安定</description>
    </item>
    
    <item>
      <title>WebSocketとポーリング、ロングポーリングの違い【非同期通信と双方向通信】</title>
      <link>https://noauto-nolife.com/post/polling-long-polling-websocket-difference/</link>
      <pubDate>Thu, 05 May 2022 08:53:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/polling-long-polling-websocket-difference/</guid>
      <description>前説 非同期通信 非同期通信とは、2人以上のユーザーがそれぞれ自分たちの都合のいいタイミングでデータを受信し、通信をすることである。 同期通信とは、リクエストを送信した後、レスポンスを受け取るまで何もできない。 非同期通信ではリクエスト送信をJavaScriptに任せることで、リクエスト送信後からレスポンスを受け取るまでに、続けて処理を行うことができる。 この非同期通信を行うために使用する技術がAjaxであ</description>
    </item>
    
    <item>
      <title>【Django】カスタムユーザーモデルに記録した自分のユーザー情報を編集する【ユーザー情報変更画面に】</title>
      <link>https://noauto-nolife.com/post/django-custom-user-model-mydata-edit/</link>
      <pubDate>Tue, 03 May 2022 17:23:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-custom-user-model-mydata-edit/</guid>
      <description>Djangoでは新規会員登録したとき、記録できるのはユーザーIDとパスワードだけで、会員登録フォームの追加をしない限り、姓名の記録はできない。 仮に新規会員登録した時にフォームが与えられていたとしても、後にその編集をするページがなければ仕方ない。(例えば、姓名が変わった時に変更する手続きをするフォームページを用意していないと、後々問題になる) そこで、本記事ではユーザー情報を編集するページを作る方法を</description>
    </item>
    
    <item>
      <title>【jQuery】数値入力フォームを押しっぱなしで入力する仕様に仕立てる</title>
      <link>https://noauto-nolife.com/post/jquery-number-form-auto/</link>
      <pubDate>Tue, 03 May 2022 11:25:12 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/jquery-number-form-auto/</guid>
      <description>以前、『【jQuery】数値入力フォームをボタンで入力する仕様に仕立てる』で解説したフォームを、ボタン押しっぱなしでも入力できるように仕立てる。 HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World test!!&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;quot;&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;spinner_area&amp;quot;&amp;gt; &amp;lt;input class=&amp;quot;spinner&amp;quot; type=&amp;quot;number&amp;quot; value=&amp;quot;0&amp;quot; max=&amp;quot;10&amp;quot; min=&amp;quot;0&amp;quot;&amp;gt; &amp;lt;button class=&amp;quot;spinner_button&amp;quot; type=&amp;quot;button&amp;quot; name=&amp;quot;minus&amp;quot; value=&amp;quot;-1&amp;quot;&amp;gt;ー&amp;lt;/button&amp;gt; &amp;lt;button class=&amp;quot;spinner_button&amp;quot; type=&amp;quot;button&amp;quot; name=&amp;quot;plus&amp;quot; value=&amp;quot;1&amp;quot; &amp;gt;＋&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; CSS .spinner_button{ user-select: none; cursor:pointer; padding:0.5rem; width: auto; vertical-align: middle; } .spinner_area input{ padding: 0.5rem; border: 0.1rem solid gray; border-radius: 0.25rem; font-size:</description>
    </item>
    
    <item>
      <title>【Django】channelsを使ってWebSocketを実現させる【チャットサイト開発に】</title>
      <link>https://noauto-nolife.com/post/startup-django-channels-web-socket/</link>
      <pubDate>Mon, 02 May 2022 21:34:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-django-channels-web-socket/</guid>
      <description>django-channelsのチュートリアルに倣って、WebSocketを使ったチャットサイトを作った。 とても実装難易度が高く、一筋縄では行かない。そのため実装手順の備忘録として本記事をまとめておく。 わかっていること WebSocketとはプロトコルのこと、HTTPでは実現できない双方向通信を実現させるためのもの 前もってHTTPでWebSocketの通信経路を作る必要がある WebSocketの経路</description>
    </item>
    
    <item>
      <title>【Django】セッションの有効期限をセット、もしくはブラウザを閉じた時にセッションを無効化【settings.py】</title>
      <link>https://noauto-nolife.com/post/django-session-expire-second-and-browser-close/</link>
      <pubDate>Sun, 01 May 2022 20:09:59 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-session-expire-second-and-browser-close/</guid>
      <description>セキュリティを担保したいサイトであれば、ブラウザが閉じてもセッションが残るデフォルトのDjango設定を疎ましく思うだろう。 そういう時は、settings.pyからセッションの有効期限の設定もしくは、ブラウザの終了を検知して無効化する設定を施せばよい。 セッションに有効期限をセットする【単位:秒】 例えば60秒後にセッションを切って、再ログインを要求させる場合はこうする。 SESSION_COOKIE_AGE = 60 デフォルトでは2週間にな</description>
    </item>
    
    <item>
      <title>【Leaflet.js】半径5km圏内の領域に円を描画する【circle】</title>
      <link>https://noauto-nolife.com/post/leaflet-draw-circle-5000m/</link>
      <pubDate>Sun, 01 May 2022 19:50:53 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/leaflet-draw-circle-5000m/</guid>
      <description>半径5km圏内に円を描画する。これで指定したポイントからの距離がつかめる。 HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;コメント付きマップ&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.css&amp;quot; integrity=&amp;quot;sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==&amp;quot; crossorigin=&amp;quot;&amp;quot;/&amp;gt; &amp;lt;script src=&amp;quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.js&amp;quot; integrity=&amp;quot;sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==&amp;quot; crossorigin=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; #map { height:90vh; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1 class=&amp;quot;bg-success text-white text-center&amp;quot;&amp;gt;コメント付きマップ&amp;lt;/h1&amp;gt; &amp;lt;main&amp;gt; &amp;lt;div class=&amp;quot;row mx-0&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;col-sm-6&amp;quot;&amp;gt; &amp;lt;div id=&amp;quot;map&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;col-sm-6&amp;quot;&amp;gt; &amp;lt;input id=&amp;quot;set_gps&amp;quot; type=&amp;quot;button&amp;quot; value=&amp;quot;GPSを使って入力&amp;quot;&amp;gt; &amp;lt;form</description>
    </item>
    
    <item>
      <title>【Leaflet.js】クリックした地図上に画像を配置する【overlays】</title>
      <link>https://noauto-nolife.com/post/leaflet-overlays/</link>
      <pubDate>Sun, 01 May 2022 18:49:01 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/leaflet-overlays/</guid>
      <description>用途がいまいち思いつかないが、leaflet.jsでは地図上に画像を描画する事ができる。 HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;コメント付きマップ&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.css&amp;quot; integrity=&amp;quot;sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==&amp;quot; crossorigin=&amp;quot;&amp;quot;/&amp;gt; &amp;lt;script src=&amp;quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.js&amp;quot; integrity=&amp;quot;sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==&amp;quot; crossorigin=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; #map { height:90vh; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1 class=&amp;quot;bg-success text-white text-center&amp;quot;&amp;gt;コメント付きマップ&amp;lt;/h1&amp;gt; &amp;lt;main&amp;gt; &amp;lt;div class=&amp;quot;row mx-0&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;col-sm-6&amp;quot;&amp;gt; &amp;lt;div id=&amp;quot;map&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;col-sm-6&amp;quot;&amp;gt; &amp;lt;input id=&amp;quot;set_gps&amp;quot; type=&amp;quot;button&amp;quot; value=&amp;quot;GPSを使って入力&amp;quo</description>
    </item>
    
    <item>
      <title>【Django】Ajax(jQuery)でロングポーリングを実装させる【チャットサイトの開発に】</title>
      <link>https://noauto-nolife.com/post/django-ajax-long-polling/</link>
      <pubDate>Thu, 28 Apr 2022 16:06:12 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-ajax-long-polling/</guid>
      <description>Ajaxを使えば、ページを部分的に更新させることができる。 そして、setTimeoutを使うことで、指定した時間おきにページを部分的に更新することができる。 ただ、Ajaxによるリクエストとレスポンスを繰り返している(ただのポーリング)ようでは、ウェブサーバーに負担が掛かってしまう。 クラウドサーバーなどは死活問題で、負荷が増えると課金してサーバーの強化などを考慮しなければならない。 そこで、リクエスト</description>
    </item>
    
    <item>
      <title>Ubuntu20.04にNginxとPHP7.4をインストールしてHelloWorldをする</title>
      <link>https://noauto-nolife.com/post/startup-php-nginx-ubuntu/</link>
      <pubDate>Mon, 25 Apr 2022 10:56:04 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-php-nginx-ubuntu/</guid>
      <description>5年以上前にやったきり、完全に忘れているNginxでPHPを動かす方法。 本記事ではその手順をまとめる。 必要なパッケージのインストール sudo apt install nginx php php-fpm Nginxはサーバー、phpはPHP処理系、php-fpmはNginxから動作させるために必要なもの Nginxの設定 /etc/nginx/sites-available/defaultを書き換える。 sudo vi /etc/nginx/sites-available/default TODOと書かれた場所だけ編集する。 ## # You should look at the following</description>
    </item>
    
    <item>
      <title>【Django】スペース区切りでOR・AND検索を改定する</title>
      <link>https://noauto-nolife.com/post/django-or-and-search-revision/</link>
      <pubDate>Fri, 15 Apr 2022 16:42:39 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-or-and-search-revision/</guid>
      <description>以前、紹介した『Djangoでスペース区切りでOR検索、AND検索をする方法【django.db.models.Q】』では少々ビューの見通しが悪い。 また、他の絞り込みなどの機能も考慮した場合、キーワードが無かった場合にリダイレクトをするのはおかしい。 そこで本記事では検索処理の改定を行う。 views.py from django.shortcuts import render,redirect from django.views import View from .models import Topic from .forms import TopicForm from django.db.models import Q class IndexView(View): def get(self, request, *args, **kwargs): context = {} query = Q() if &amp;quot;search&amp;quot; in request.GET: search = request.GET[&amp;quot;search&amp;quot;] raw_words = search.replace(&amp;quot; &amp;quot;,&amp;quot; &amp;quot;).split(&amp;quot; &amp;quot;) words = [ w for w in raw_words if</description>
    </item>
    
    <item>
      <title>【Django】models.pyにて、オリジナルのバリデーション処理を追加する【validators】【正規表現が通用しない場合等に有効】</title>
      <link>https://noauto-nolife.com/post/django-models-origin-validators/</link>
      <pubDate>Fri, 15 Apr 2022 14:33:20 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-origin-validators/</guid>
      <description>例えば、簡易掲示板にて、特定の禁止ワードを含んだ投稿を拒否したい場合。 承認制にして、管理者が文面を確認した上で公開を許す方法もあるが、それでは人件費がかかる。 なるべく保存する前に禁止ワードを含んでいるかどうかをチェックする仕組みにしたい。 そういう時は、validatorsに独自の関数を割り当てれば良い。 コードは40分Djangoから流用して作る models.py 不快語を除外するバリデーションを実装させる。 from django.db import models</description>
    </item>
    
    <item>
      <title>【Django】DateTimeFieldに自動的に現在時刻を入れるには、auto_now_addもしくはauto_nowフィールドオプションを指定【新規作成時・編集時の時刻】【※編集不可】</title>
      <link>https://noauto-nolife.com/post/django-models-datetime-auto-now-add/</link>
      <pubDate>Thu, 14 Apr 2022 17:07:34 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-datetime-auto-now-add/</guid>
      <description>作成時と編集時の日時を自動的に入れたい場合は、auto_nowもしくはauto_now_addを指定する。 auto_nowはモデルのsaveメソッドが実行された時、auto_now_addはモデルに新規作成された時に、その時の日時が指定したフィールドに格納される。 つまり、モデルを下記のように組むと良いだろう。 from django.db import models class Topic(models.Model): comment = models.CharField(verbose_name=&amp;quot;コ</description>
    </item>
    
    <item>
      <title>JavaScriptでクエリパラメータを書き換え、GETメソッドを送信する【通販サイトなどの絞り込み検索に有効】</title>
      <link>https://noauto-nolife.com/post/javascript-query-change-and-get-method/</link>
      <pubDate>Thu, 07 Apr 2022 13:31:52 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-query-change-and-get-method/</guid>
      <description>クエリパラメータ(クエリ文字列、もしくはクエリストリング)はサーバーサイドだけのデータではない、JavaScriptも操作できる。 これを利用することで、サイトの絞り込み検索を作ることができる。 HTML 下記のように価格帯の入力欄を作る。 &amp;lt;h2&amp;gt;下限&amp;lt;/h2&amp;gt; &amp;lt;input class=&amp;quot;url_replace&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;min_price&amp;quot;&amp;gt; &amp;lt;h2&amp;gt;上限&amp;lt;/h2&amp;gt; &amp;lt;input class=&amp;quot;url_replace&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;max_price&amp;quot;&amp;gt; そして、次項のJavaScriptを読んでおく。 JavaScript window.addEventListener(&amp;quot;load&amp;quot; , function (){ $(&amp;quot;.url_replace&amp;quot;).on(&amp;quot;keydown&amp;quot;, function(e) {</description>
    </item>
    
    <item>
      <title>【Django】未認証ユーザーをログインページにリダイレクトする【LoginRequiredMixinもしくは@login_required】</title>
      <link>https://noauto-nolife.com/post/django-login-required-mixin/</link>
      <pubDate>Thu, 07 Apr 2022 13:19:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-login-required-mixin/</guid>
      <description>ログインしていないユーザーが特定のページにアクセスしてきた時、処理を実行せず、ログインページにリダイレクトするには、LoginRequiredMixinを使う。 前提 予め前もって、認証を実装しておく。allauthを使っても、Djangoの備え付けの認証を使っても良い。 【メール認証】Django-allauthの実装方法とテンプレート編集【ID認証】 【Django】allauth未使用でユーザー認証</description>
    </item>
    
    <item>
      <title>【OSM&#43;leaflet.js】ブラウザからGPS(位置情報)を取得し、マーカーを配置させる</title>
      <link>https://noauto-nolife.com/post/leaflet-marker-gps-position/</link>
      <pubDate>Fri, 01 Apr 2022 19:24:47 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/leaflet-marker-gps-position/</guid>
      <description>ブラウザから位置情報を取得し、leaflet.jsでマーカーを配置させる。 index.html 今回は、leaflet.jsを外部のファイルにまとめた。こうすることでleaflet.jsの追加機能を組みやすくなると思う。 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;コメント付きマップ&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.css&amp;quot; integrity=&amp;quot;sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==&amp;quot; crossorigin=&amp;quot;&amp;quot;/&amp;gt; &amp;lt;script src=&amp;quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.js&amp;quot; integrity=&amp;quot;sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==&amp;quot; crossorigin=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; #map { height:90vh; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1 class=&amp;quot;bg-success text-white text-center&amp;quot;&amp;gt;コメント</description>
    </item>
    
    <item>
      <title>素のJavaScriptのXMLHttpRequest(Ajax)で通信する【jQuery不使用】</title>
      <link>https://noauto-nolife.com/post/django-xmlhttprequest-ajax-not-use-jquery/</link>
      <pubDate>Fri, 01 Apr 2022 09:17:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-xmlhttprequest-ajax-not-use-jquery/</guid>
      <description>CSRFトークンを取得する POSTメソッドを送信する時必要になるCSRFトークン。 前もって取得しておく。下記コードをページロードと同時に実行する。 function getCookie(name) { var cookieValue = null; if (document.cookie &amp;amp;&amp;amp; document.cookie !== &#39;&#39;) { var cookies = document.cookie.split(&#39;;&#39;); for (var i = 0; i &amp;lt; cookies.length; i++) { var cookie = cookies[i].trim(); // Does this cookie string begin with the name we want? if (cookie.substring(0, name.length + 1) === (name + &#39;=&#39;)) { cookieValue = decodeURIComponent(cookie.substring(name.length + 1)); break; } } } return cookieValue; } const csrftoken = getCookie(&#39;csrftoken&#39;); ちなみに、このコードはDjango公式からの受け売りである。 https://docs.djangoproject.com/en/4.0/ref/csrf/ POSTメソッドを送信する 前項で取得したCSRFトーク</description>
    </item>
    
    <item>
      <title>Linuxでコマンドラインからクリップボードにコピーする【UbuntuもOK】</title>
      <link>https://noauto-nolife.com/post/linux-commandline-clipboard/</link>
      <pubDate>Wed, 30 Mar 2022 09:13:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/linux-commandline-clipboard/</guid>
      <description>とてつもなく長いコードをクリップボードにコピーして、誰かと共有したい時、エディタのカーソルを上に持っていって下まで下げてコピーするのはとても面倒。 だから、コマンド一発でファイルの内容全てをコピーする。xselを使って。 sudo apt install xsel これでOK。後はコピペしたいファイルを用意して、下記コマンドを実行する。 cat ./index.html | xsel --clipboard --input これでindex.htmlの中身が全部コピーできた。bashrcにエイリアスで登録しておく</description>
    </item>
    
    <item>
      <title>UbuntuにDjangoをデプロイする【PostgreSQL&#43;Nginx、Virtualenv使用】</title>
      <link>https://noauto-nolife.com/post/django-deploy-ubuntu-venv/</link>
      <pubDate>Wed, 30 Mar 2022 08:03:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-ubuntu-venv/</guid>
      <description>Ubuntuのデプロイ時にVirtualenvを使う。 以前の方法はOSに直接Djangoなどのライブラリをインストールしているため、OSの更新と同時にライブラリも更新されてしまう。 Virtualenvを使えば、OSを更新してもライブラリのバージョンは常に一定。手動で更新する仕様になる。 Djangoプロジェクトの配置 下記になるよう配置する。 /home/[ユーザー名]/Documents/[プロジェク</description>
    </item>
    
    <item>
      <title>【Django】管理サイト(admin)のログを削除する【DBの使用量削減に】</title>
      <link>https://noauto-nolife.com/post/django-admin-log-delete/</link>
      <pubDate>Fri, 25 Mar 2022 10:42:13 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-admin-log-delete/</guid>
      <description>Djangoの管理サイトは自動的に操作のログを取るようになっている。 そのログはDBに記録されているため、Herokuの無料プランなどの1万行しかないDBであれば、死活問題になる。 そこで、管理サイトのログをDBから消す。下記のようにすればよい。 from django.shortcuts import render from django.views import View from django.contrib.admin.models import LogEntry class IndexView(View) LogEntry.objects.all().delete() ## 以下略 ##</description>
    </item>
    
    <item>
      <title>【HUGO】最新版をインストールして、サイトを作り、テーマを当ててビルドするまで</title>
      <link>https://noauto-nolife.com/post/hugo-install-latest/</link>
      <pubDate>Tue, 22 Mar 2022 08:39:10 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/hugo-install-latest/</guid>
      <description>手順 GitHubから最新版のインストーラを入手 サイトを作る 記事を作る テーマをインストールする HUGOサーバー(開発用サーバー)を起動する ビルドする GitHubから最新版のインストーラを入手 https://github.com/gohugoio/hugo/releases 上記サイトから、Latestと書かれてあるバージョンのインストーラーをDLする。Ubuntu 20.04の場合はhugo_0.95.0_Linux-64bit.debをDLすると良いだろう。 Windowsであれば</description>
    </item>
    
    <item>
      <title>【Django】Ajaxで複数枚の画像を一回のリクエストでアップロードする。</title>
      <link>https://noauto-nolife.com/post/django-ajax-multi-img-upload/</link>
      <pubDate>Mon, 21 Mar 2022 18:25:17 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-ajax-multi-img-upload/</guid>
      <description>経緯 例えば、1つのデータに対して、複数枚の画像を記録したい場合がある。 ECサイトの商品がその例で、1つの商品に対して、複数枚の画像を記録する必要がある。 しかも、商品に対して記録する画像の枚数が10枚以上になる可能性もあり、これを1つのモデルに画像フィールド10個などとしているようではDBの構造上の問題に発展する。 だからこのような場合は、商品モデルと商品画像モデルの1対多のリレーションを組むべきであ</description>
    </item>
    
    <item>
      <title>【Python】GoogleのISBNのAPIを使い、書籍の情報を手に入れる</title>
      <link>https://noauto-nolife.com/post/python-google-isbn-api/</link>
      <pubDate>Sat, 19 Mar 2022 11:42:50 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/python-google-isbn-api/</guid>
      <description>GoogleのISBN検索ができるAPIを使うことで、書籍の情報を簡単に手に入れることができる。 もちろん、書籍のサムネイルも取得可能。スクレイピングではないので、サイトの変化に合わせて手直しが必要になることもない。 アカウントの登録も不要 #! /usr/bin/env python3 # -*- coding: utf-8 -*- import requests try: result = requests.get(&amp;quot;https://www.googleapis.com/books/v1/volumes?q=isbn:9784873117782&amp;quot;) except: print(&amp;quot;通信エラー&amp;quot;) else: #返却されたJSONを辞書型に変換する。 data = result.json() print(data) print(data[&amp;quot;items&amp;quot;][0][&amp;quot;volumeInfo&amp;quot;]) #書籍情報を手に入れる。 print(data[&amp;quot;items&amp;quot;][0][&amp;quot;volumeInfo&amp;quot;][&amp;quot;title&amp;quot;]) print(data[&amp;quot;items&amp;quot;][0][&amp;quot;volumeInfo&amp;quot;][&amp;quot;publishedDate&amp;quot;]) print(data[&amp;quot;items&amp;quot;][0][&amp;quot;volumeInfo&amp;quot;][&amp;quot;authors&amp;quot;]) print(data[&amp;quot;items&amp;quot;][0][&amp;quot;volumeInfo&amp;quot;][&amp;quot;description&amp;quot;]) print(data[&amp;quot;items&amp;quot;][0][&amp;quot;volumeInfo&amp;quot;][&amp;quot;imageLinks&amp;quot;][&amp;quot;thumbnail&amp;quot;])</description>
    </item>
    
    <item>
      <title>【Django】星の平均をアイコンで表示させる【3.5の時、三星と半星で表示】</title>
      <link>https://noauto-nolife.com/post/django-star-average/</link>
      <pubDate>Mon, 14 Mar 2022 09:17:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-star-average/</guid>
      <description>通販サイトなどでよくある、星の平均をアイコンで表示する。 モデル 2つのメソッドを追加する。平均スコアを出力するメソッド。少数だけ取り出し、それを元に1星、半星、無星を判定するメソッド。 from django.db import models from django.core.validators import MinValueValidator,MaxValueValidator from django.db.models import Avg class Topic(models.Model): comment = models.CharField(verbose_name=&amp;quot;コメント&amp;quot;,max_length=2000) def avg_star_score(self): reviews = Review.objects.filter(topic=self.id).aggregate(Avg(&amp;quot;star&amp;quot;)) if reviews[&amp;quot;star__avg&amp;quot;]: return reviews[&amp;quot;star__avg&amp;quot;] else: return 0 def avg_star_icon_few(self): reviews = Review.objects.filter(topic=self.id).aggregate(Avg(&amp;quot;star&amp;quot;)) avg = reviews[&amp;quot;star__avg&amp;quot;] #平均スコアなしの場</description>
    </item>
    
    <item>
      <title>【Django】FilefieldやImageFieldでファイル名だけを表示させる方法【モデルにメソッドを追加】</title>
      <link>https://noauto-nolife.com/post/django-filefield-only-filename/</link>
      <pubDate>Thu, 10 Mar 2022 22:20:05 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-filefield-only-filename/</guid>
      <description>FilefieldやImageFieldにはフィールドオプションとしてupload_toが指定されている。 そのため、そのままではファイル名だけを取り出すことはできない。 例えば、モデルが下記でファイル名がtest.pdfだった場合。 class Document(models.Model): file = models.FileField(verbose_name=&amp;quot;ファイル&amp;quot;,upload_to=&amp;quot;app/document/file/</description>
    </item>
    
    <item>
      <title>【HTML】ダウンロードのダイアログを表示させたい場合、aタグにはdownload属性を付与する</title>
      <link>https://noauto-nolife.com/post/html-atag-download-attribute/</link>
      <pubDate>Thu, 10 Mar 2022 21:53:58 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/html-atag-download-attribute/</guid>
      <description>小ネタ。 例えば、ファイルを共有するウェブアプリを作る時、ファイルをリンクタグでダウンロードする仕様に仕立てる。 しかし、それが画像やPDF等のブラウザで表示できるファイルの場合、ダウンロードのダイアログが表示されず、ファイルそのものが表示されてしまう。 &amp;lt;a href=&amp;quot;sample.pdf&amp;quot;&amp;gt;ダウンロードする&amp;lt;/a&amp;gt; そこで、aタグにdownload属性を付与する。 &amp;lt;a</description>
    </item>
    
    <item>
      <title>【jQuery】数値入力フォームをボタンで入力する仕様に仕立てる</title>
      <link>https://noauto-nolife.com/post/jquery-number-form/</link>
      <pubDate>Wed, 02 Mar 2022 11:45:18 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/jquery-number-form/</guid>
      <description>数値入力フォーム。キーボードを使わず、ボタン入力で行いたい場合、JavaScriptを使う必要がある。 今回は更に短くかけるよう、jQueryで表現した。なお、再利用を想定して、装飾は全く行っていない。 ソースコード HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World test!!&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;quot;&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;number&amp;quot; name=&amp;quot;amount&amp;quot; value=&amp;quot;0&amp;quot; readonly&amp;gt; &amp;lt;input type=&amp;quot;button&amp;quot; name=&amp;quot;minus&amp;quot; value=&amp;quot;減らす&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;button&amp;quot; name=&amp;quot;plus&amp;quot; value=&amp;quot;増やす&amp;quot;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; JavaScript window.addEventListener(&amp;quot;load&amp;quot; , function (){ $(&amp;quot;[name=&#39;plus&#39;]&amp;quot;).on(&amp;quot;click&amp;quot;, function(){ amount_add(this,true);</description>
    </item>
    
    <item>
      <title>【Restful化】DjangoRestframeworkの導入・移行作業【ビュークラス継承元の書き換え、Serializerの運用】</title>
      <link>https://noauto-nolife.com/post/django-rest-framework-changing/</link>
      <pubDate>Sun, 27 Feb 2022 15:05:00 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-rest-framework-changing/</guid>
      <description>Restful化のためには、DjangoRestframeworkをインストールする必要がある。(素のDjangoでもAjaxでDELETE,PUT,PATCHメソッドの送信は可能だが、リクエストボディの読み込みに難があるため。) だが、素のDjangoで開発している状態であれば、コードの一部をDRF仕様に書き換えを行う必要がある。 本記事では、40分Djangoを元にDRF移行手続きを解説する。 予め</description>
    </item>
    
    <item>
      <title>DjangoRestFrameworkは本当に必要なのか？【Restful化とAjaxでデータを送信するときの問題】</title>
      <link>https://noauto-nolife.com/post/django-rest-framework-need-ajax/</link>
      <pubDate>Sat, 26 Feb 2022 08:40:27 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-rest-framework-need-ajax/</guid>
      <description>結論 DjangoはデフォルトでRestfulに対応している(Ajaxを使ってPUT,DELETE,PATCHメソッドの送信ができる)。 ただし、PUT,DELETE,PATCHのリクエストボディを参照するのはやや複雑。 そのため、それらのメソッドを使ってリクエストを送信する場合、DRFを使ったほうが良い。 素のDjangoはRestfulに対応している AjaxでPUT,DELETE,PATCHメソッドを</description>
    </item>
    
    <item>
      <title>Herokuの無料プランで独自ドメインを設定し、HTTPS通信を行う方法【ムームードメイン&#43;Cloudflare】</title>
      <link>https://noauto-nolife.com/post/heroku-origin-domain/</link>
      <pubDate>Tue, 22 Feb 2022 08:13:11 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/heroku-origin-domain/</guid>
      <description>無料プランでは独自ドメインのセットは出来てもHTTPS通信を行うことは出来ない。 そのため、Cloudflareをリバースプロキシとして機能させ、クライアントからCloudflare間まで暗号化させる。 一見安全性に欠けるような形だが、AWSにデプロイした際も、クライアントからリバースプロキシ間までしか暗号化はされないので、それほど問題ではない。 気になるなら、有料プランを使用してHTTPS通信を行うと</description>
    </item>
    
    <item>
      <title>【jQuery】Ajaxで郵便番号検索を行う【通販サイトなどの住所登録に有効】</title>
      <link>https://noauto-nolife.com/post/jquery-ajax-postcode/</link>
      <pubDate>Fri, 18 Feb 2022 17:40:50 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/jquery-ajax-postcode/</guid>
      <description>通販サイトなどでは、郵便番号を入力すると、住所の入力を自動で行ってくれる。 本記事では郵便番号検索の実装を解説する。 HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World test!!&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;input id=&amp;quot;postcode&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;postcode&amp;quot; placeholder=&amp;quot;ここに郵便番号を入力する(ハイフン不要)&amp;quot;&amp;gt; &amp;lt;input id=&amp;quot;postcode_search&amp;quot; type=&amp;quot;button&amp;quot; value=&amp;quot;郵便番号検索&amp;quot;&amp;gt; &amp;lt;input id=&amp;quot;prefecture&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;prefecture&amp;quot; placeholder=&amp;quot;都道府県&amp;quot;&amp;gt</description>
    </item>
    
    <item>
      <title>【jQuery】selectタグで年月日検索をする【うるう年対応】</title>
      <link>https://noauto-nolife.com/post/jquery-ymd-search/</link>
      <pubDate>Tue, 15 Feb 2022 16:14:29 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/jquery-ymd-search/</guid>
      <description>年月日検索をする時、年だけ、月だけ指定して検索する場合がある。この場合、年月日全てを指定するflatpickrでは対応できない。 この場合はselectタグを使用して検索をする。だが、月ごとに日数は異なる。うるう年では2月は29日になる。それに対応させるためには、JavaScriptを書く必要がある。 本記事ではjQueryを使用して、なるべく短く年月日検索を行うselectタグを作る。 HTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta</description>
    </item>
    
    <item>
      <title>dockerのイメージファイルを出力し(docker save)、出力されたファイルを読み込む(docker load)</title>
      <link>https://noauto-nolife.com/post/docker-image-file-share/</link>
      <pubDate>Sun, 13 Feb 2022 16:54:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/docker-image-file-share/</guid>
      <description>dockerコンテナをイメージ化した後、配布する場合、dockerHubを使う方法の他に直接ファイルをやり取りする方法もある。 下記コマンドでOK sudo docker save [イメージファイルのリポジトリ名] -o [出力したいファイル名].tar この出力されたファイルを別PCから読み込む sudo docker load -i [さっき出力したファイル名].tar 読み込みした後のイメージファイルのリポジトリ名は、もともとのリポジトリ名を引き継ぐ。 結論 ちなみに</description>
    </item>
    
    <item>
      <title>HTML5とCSS3だけでAmazon風の星レビューのフォームを再現する【ホバーした時、ラジオボタンのチェックされた時に星を表示】【flex-direction:row-reverseで逆順対応可】</title>
      <link>https://noauto-nolife.com/post/css3-star-review-radio/</link>
      <pubDate>Fri, 11 Feb 2022 14:51:05 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-star-review-radio/</guid>
      <description>以前、サーバーサイドで1から5のいずれかの数値を受付、DBに保存する方法を実践したが、フロント系ではそれをもう少しおしゃれに実装させたい。 そういう時は、なるべくJavaScriptを使用せず、HTMLとCSSだけで表現するのがベターなやり方だと個人的には思う。 だからこそ、今回も同様にHTMLとCSSだけでレビューの星を入力するフォームを再現した。 マウスをホバーした時、星が塗りつぶされ、外れると星が</description>
    </item>
    
    <item>
      <title>Djangoのモデルにて指定された選択肢をセットし、それだけ入力を許可する【choicesフィールドオプションで都道府県の指定をする】</title>
      <link>https://noauto-nolife.com/post/django-models-choices/</link>
      <pubDate>Fri, 11 Feb 2022 08:18:35 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-choices/</guid>
      <description>例えば、都道府県の指定、どうやってモデルに格納するか。都道府県は47個。これ以外の物を選ぶことはできない。 故に、CharFieldを使用して、都道府県の格納先のフィールドを作るのは、間違っているわけではないが、あまりスマートではない。 そこで、フィールドオプションのchoicesを使用して、特定の選択肢のみ入力を許可する。 【前提】settings.py settings.pyにて、都道府県の名前を定義</description>
    </item>
    
    <item>
      <title>Djangoで現在時刻以降の日時入力を促すのであれば、MinValueValidatorを使用する【DateTimeField】</title>
      <link>https://noauto-nolife.com/post/django-thereafter-timezone-now/</link>
      <pubDate>Mon, 07 Feb 2022 07:28:47 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-thereafter-timezone-now/</guid>
      <description>予約システムなどでは、指定した日時以降の日時を入れてもらう必要がある。 入力できる日時にフロント側で制限をかけることができれば良いが、それだけでは限界がある。 そこで、Djangoではmodelsのフィールドオプションであるvalidatorsを使用することで、指定した日時以降の日時だけを入力できるようになる。 MinValueValidatorsで現在時刻以降の日時入力をさせる モデルはこうかけばよい。</description>
    </item>
    
    <item>
      <title>docker上のCentOS(NginxとPostgreSQL)にDjangoをデプロイさせる</title>
      <link>https://noauto-nolife.com/post/django-deploy-docker-centos/</link>
      <pubDate>Thu, 03 Feb 2022 15:11:00 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-docker-centos/</guid>
      <description>docker上のCentOSにDjangoをデプロイする方法をここに記す。 前提知識 dockerの基本的な使い方に関しては、下記を参照。 UbuntuでUbuntuのdockerイメージを作るまで Djangoのデプロイに関しては下記を参照。 DjangoをAWSのEC2(Ubuntu)にデプロイする DjangoをLinux(Ubuntu)サーバーにデプロイする方法【Nginx+PostgreSQL】 Ce</description>
    </item>
    
    <item>
      <title>UbuntuでUbuntuのdockerイメージを作るまで</title>
      <link>https://noauto-nolife.com/post/startup-ubuntu-docker/</link>
      <pubDate>Thu, 03 Feb 2022 11:22:31 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-ubuntu-docker/</guid>
      <description>インストール sudo apt install docker.io これでインストールできる。 用語解説 イメージ イメージとは、OSのとある状態をセーブした物。実機にOSをインストールする時、必要になるイメージディスクと思えば話が早い。 例えば、Ubuntuをインストールした直後の状態を再現したい場合、UbuntuのイメージをdockerHubのUbuntuリポジトリからDLしてコンテナを作る。 コンテナ コンテナとは、イメージを元に作った仮想環境。複数</description>
    </item>
    
    <item>
      <title>【Stripe】Djangoにクレジットカード決済機能を実装させる</title>
      <link>https://noauto-nolife.com/post/startup-django-stripe/</link>
      <pubDate>Thu, 03 Feb 2022 08:08:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-django-stripe/</guid>
      <description>DjangoでECサイトや課金ゲームサイト等を展開しようと考えているのであれば、避けて通ることができないのがカード決済。 Stripeというカード決済代行会社を利用することで、決済処理を手軽に実装させることができる。 本記事ではその一例を紹介する。 共通設定 まず、stripeライブラリをインストールする pip install stripe settings.pyにて下記をセットしておく。Stripeの秘密鍵は.gitignoreに指定</description>
    </item>
    
    <item>
      <title>Django Rest Frameworkにて、APIを提供する</title>
      <link>https://noauto-nolife.com/post/django-drf-api/</link>
      <pubDate>Fri, 28 Jan 2022 15:12:00 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-drf-api/</guid>
      <description>Serializerクラスのオブジェクトを返却することで、簡単にAPIを提供することができる。 また、投稿されたデータのバリデーションもSerializerを使えば良いのでとても楽。Ajaxも処理してくれるので、HTMLのフォームを提供するフォームクラスが不要であれば、Serializerに変換しても問題はない。 DRFのシリアライザを使用してAPIを作る 40分簡易掲示板にDELETE、PUTメソッド</description>
    </item>
    
    <item>
      <title>【Django】管理サイトで保存した時、何か処理(メール送信など)を実行して欲しい時【saveメソッドオーバーライドは通用しない】</title>
      <link>https://noauto-nolife.com/post/django-admin-save-method/</link>
      <pubDate>Fri, 28 Jan 2022 13:30:10 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-admin-save-method/</guid>
      <description>Djangoの管理サイトでモデルの保存をした時、何か実行して欲しいものがあれば、saveメソッドのオーバーライドでは通用しない。 Adminクラスにsave_modelメソッドがあるので、それをオーバーライドして使う。 class MyAdminView(admin.ModelAdmin): def save_model(self, request, obj, form, change): super(MyAdminView, self).save_model(request, obj, form, change) 用途 管理サイトから作成・編集をして、保存した時に発動するので、以下の用途が考えられる。 通販サイトにて配送処理完了のブーリアン値を変更、それを判定して配送処理完</description>
    </item>
    
    <item>
      <title>【Django】PUT、PATCH、DELETEメソッドのリクエストを送信する【Django REST Framework】</title>
      <link>https://noauto-nolife.com/post/django-method-put-delete-patch/</link>
      <pubDate>Mon, 24 Jan 2022 13:18:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-method-put-delete-patch/</guid>
      <description>前提 まず前提として、PUT、PATCH、DELETEのメソッドはHTMLのformタグから送信することはできない。 例外として、Laravelでは下記のようにしてformタグでDELETEメソッドを送信するが、Djangoではそれは通用しない。これから解説するDjango Rest Frameworkを使用しても。 &amp;lt;form action=&amp;quot;{{ route(&#39;topics.destroy&#39;,$topic-&amp;gt;id) }}/&amp;quot; method=&amp;quot;POST&amp;quot; style=&amp;quot;display:inline-block;&amp;quot;&amp;gt; {{ csrf_field() }} {{ method_field(&amp;quot;delete&amp;quot;) }} &amp;lt;button class=&amp;quot;btn btn-outline-danger&amp;quot; type=&amp;quot;submit&amp;quot;&amp;gt;削除&amp;lt;</description>
    </item>
    
    <item>
      <title>【Django】ビュー関数とビュークラスの違い、一覧と使い方</title>
      <link>https://noauto-nolife.com/post/django-view-def-and-class/</link>
      <pubDate>Sat, 22 Jan 2022 17:39:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-view-def-and-class/</guid>
      <description>ビュー関数とビュークラスの違い。 前提 (bbs/urls.py) config/urls.pyからアプリ(bbs)のurls.pyを読み込み、その中身は下記とする。 from django.urls import path from . import views app_name = &amp;quot;bbs&amp;quot; urlpatterns = [ path(&#39;&#39;, views.index, name=&amp;quot;index&amp;quot;), ] 構文 関数ベースのビュー from django.shortcuts import render,redirect from .models import Topic from .forms import TopicForm def index(request): if request.method == &amp;quot;GET&amp;quot;: topics = Topic.objects.all() context = { &amp;quot;topics&amp;quot;:topics } return render(request,&amp;quot;bbs/index.html&amp;quot;,context) elif request.method == &amp;quot;POST&amp;quot;: form = TopicForm(request.POST) if form.is_valid(): form.save() return redirect(&amp;quot;bbs:index&amp;quot;) メソッドをif文で分岐させる形式になっている。 クラスベースのビュー(View) from django.shortcuts import render,redirect from django.views import View from .models import Topic from .forms import TopicForm class IndexView(View): def get(self, request, *args, **kwargs): topics</description>
    </item>
    
    <item>
      <title>【Django】任意のエラーメッセージを表示させる【forms.pyでerror_messagesを指定】</title>
      <link>https://noauto-nolife.com/post/django-error-messages-origin/</link>
      <pubDate>Sun, 16 Jan 2022 17:57:29 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-error-messages-origin/</guid>
      <description>forms.pyに書いたフォームクラスを使ってバリデーションを行った時、エラーメッセージの表示ができる。 print(forms.errors) 例えば、これで入力しなければならない場所を未入力で投稿した場合、 このフィールドは入力必須です とエラーが出てくる。やや堅めの文章であり、『フィールド』という単語はエンジニアであればまだしも、一般人はそれが何を意味しているのかわからないだろう。 そこでこの時に表示されるエラーメッセージを別のものに書</description>
    </item>
    
    <item>
      <title>【Django】allauthを使用し、カスタムユーザーモデルを搭載させ、SendgridのAPIでメール認証をする簡易掲示板【保存版】</title>
      <link>https://noauto-nolife.com/post/django-allauth-custom-user-model-sendgrid/</link>
      <pubDate>Thu, 13 Jan 2022 16:40:39 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-allauth-custom-user-model-sendgrid/</guid>
      <description>config まず、カスタムユーザーモデルと、DjangoallauthでSendgridを使用したメール認証の設定を施す。 config/settings.py &amp;quot;&amp;quot;&amp;quot; Django settings for config project. Generated by &#39;django-admin startproject&#39; using Django 3.1.2. For more information on this file, see https://docs.djangoproject.com/en/3.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/3.1/ref/settings/ &amp;quot;&amp;quot;&amp;quot; from pathlib import Path # Build paths inside the project like this: BASE_DIR / &#39;subdir&#39;. BASE_DIR = Path(__file__).resolve().parent.parent # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/ # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = &#39;al#f(6(($8m%g#l4t2-0tvv1(&amp;amp;hbcd+(e8dt$!-m+ospxzv0gu&#39; # SECURITY WARNING: don&#39;t run with debug turned on in production! DEBUG = True ALLOWED_HOSTS = [] SITE_ID = 1 #django-allauthログイン時とログアウト時のリダイレクトURL LOGIN_REDIRECT_URL = &#39;/&#39; ACCOUNT_LOGOUT_REDIRECT_URL = &#39;/&#39; ####</description>
    </item>
    
    <item>
      <title>mogrifyコマンドを使って画像を一括クロップ(トリミング)する</title>
      <link>https://noauto-nolife.com/post/startup-mogrify/</link>
      <pubDate>Fri, 07 Jan 2022 09:57:31 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-mogrify/</guid>
      <description>下記コマンドで一括画像処理できる mogrify [出力先] -crop [幅]x[高さ]+[切り取り始めるx座標]+[切り取り始めるy座標] [入力元] 参照元:https://qiita.com/yoya/items/62879e6e03d5a70eed09</description>
    </item>
    
    <item>
      <title>Djangoでpython3のsubprocessモジュールを使い、任意のコマンドをなるべく安全に配慮して実行させる</title>
      <link>https://noauto-nolife.com/post/django-secure-subprocess/</link>
      <pubDate>Tue, 04 Jan 2022 10:16:48 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-secure-subprocess/</guid>
      <description>ふと思った。 毎度毎度、SSHクライアントがインストールされている端末を起動させ、サーバーにログイン、コマンドで操作するめんどくささ、どうにかできないだろうかと。 ウェブアプリから任意のコマンドを実行することができれば、わざわざSSHを使わなくても、ブラウザだけで簡単にコマンドが実行できる。ただ、問題になってくるのがセキュリティ。 不適切なコマンドを実行されてしまうと、当然システムは壊れる。そこで、なる</description>
    </item>
    
    <item>
      <title>【Django】allauth未使用でユーザー認証機能を実装した簡易掲示板【ログインとログアウトのみ】</title>
      <link>https://noauto-nolife.com/post/django-auth-not-allauth/</link>
      <pubDate>Sat, 01 Jan 2022 07:00:48 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-auth-not-allauth/</guid>
      <description>Djangoでは、サードパーティー製ライブラリとしてdjango-allauthを使用することで、誰でも簡単にユーザー認証機能を実装させることができる。 とはいえ、事情によってライブラリの使用が制限されていたり、単なるユーザーIDとパスワードによるログインを行いたいだけであれば、デフォルトのLoginView及び、LogoutViewを使えば簡単に実装できる。 本記事ではallauthよりも手っ取り早</description>
    </item>
    
    <item>
      <title>【Django】ビュークラスの継承を使い、予めcontextを追加させる</title>
      <link>https://noauto-nolife.com/post/django-add-context/</link>
      <pubDate>Fri, 31 Dec 2021 08:29:13 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-add-context/</guid>
      <description>クラスベースのビューであれば、継承をするだけで、継承関係にある全てのビューに同じ機能を追加できる。 どのページでも表示させるデータ(例えば、サイトのトップバーに表示するニュースなど)にも継承を使えば、予めの追加が実現できる。 以下は、40分Djangoにビュークラスの継承を行い、contextを追加するメソッドを呼び出せるようにしている。 from django.shortcuts import render,redirect from django.views import View from .models import Topic class ContextView(View): def context(self): context = {} context[&amp;quot;news&amp;quot;] = Topic.objects.order_by(&amp;quot;-id&amp;quot;)[:10] return context class BbsView(ContextView): def get(self, request, *args, **kwargs): context</description>
    </item>
    
    <item>
      <title>【PR】ElementTube 一般公開</title>
      <link>https://noauto-nolife.com/post/element-tube/</link>
      <pubDate>Thu, 30 Dec 2021 20:47:09 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/element-tube/</guid>
      <description>動画共有サイトの雛形ウェブアプリ、『ElementTube』 一般公開します。 2021年12月時点でまだまだ未完成ではあるものの、動画共有サイトとしての体裁は十分保たれており、コードを少し編集するだけで運営は可能です。 概要 『ElementTube』は2021年1月、誰でも気軽に動画共有サイトを運営するコンセプトの元、開発を始めた。 現在の動画共有サイトは、概ね投稿されるコンテンツの一般大衆化が進んでお</description>
    </item>
    
    <item>
      <title>【Django】年月検索と、年別、月別アーカイブを表示させる【最新と最古のデータから年月リストを作成(Trunc不使用)】</title>
      <link>https://noauto-nolife.com/post/django-year-month-search-and-list/</link>
      <pubDate>Sat, 25 Dec 2021 20:57:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-year-month-search-and-list/</guid>
      <description>Djangoで月別アーカイブと年月計算を実装させる 元となったコードは40分Djangoにモデルへ投稿日を記録するフィールド(dt)を追加している。 forms.py from django import forms from django.core.validators import MinValueValidator,MaxValueValidator from .models import Topic class TopicForm(forms.ModelForm): class Meta: model = Topic fields = [&amp;quot;comment&amp;quot;] #モデルを使用しないフォームクラス class YearMonthForm(forms.Form): year = forms.IntegerField() month = forms.IntegerField(validators=[MinValueValidator(1),MaxValueValidator(12)]) モデルを使用しないフォームクラスで年と月を数値型で受け取る。月は1から12までの数値なので、validatorsで追加の制約を付与する。 views.py 年月別アーカイブのリ</description>
    </item>
    
    <item>
      <title>Django-allauthにてフォームを中央寄せにさせる【ログインページのテンプレートのカスタマイズ】</title>
      <link>https://noauto-nolife.com/post/django-allauth-center-loginpage/</link>
      <pubDate>Fri, 24 Dec 2021 10:01:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-allauth-center-loginpage/</guid>
      <description>以前の方法であれば、単純なCSSの割り当てだけだったので、ログインフォームを中央寄せに仕立てることはできなかった。 今回は、HTMLも大幅に変更を行い、ログイン画面のフォームを中央寄せに仕立てる。 account/base.html 全てのログインフォームのテンプレートから継承されるbase.htmlを下記のように編集する。 {% load static %} &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;{% block head_title %}{% endblock %}&amp;lt;/title&amp;gt; &amp;lt;!--中央寄せ、フォーム系のタグは全てBootstrapから拝借--&amp;gt;</description>
    </item>
    
    <item>
      <title>chart.jsでグラフ表示幅と高さを指定する。</title>
      <link>https://noauto-nolife.com/post/chartjs-responsive-chart/</link>
      <pubDate>Thu, 23 Dec 2021 09:46:30 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/chartjs-responsive-chart/</guid>
      <description>まず、公式によると下記の方法ではchart.jsの横幅と高さ指定は通用しない。 &amp;lt;canvas id=&amp;quot;graph&amp;quot; height=&amp;quot;40vh&amp;quot; width=&amp;quot;80vw&amp;quot;&amp;gt; 他にもクラス名を指定して、そのクラス名に幅などの装飾を施す方法も通用しない。 対策 対策1:親要素でstyle属性にposition:relativeとwidth及びheightを合わせて指定する。 クラス名にCSSで装飾を施すのではなく、親要素のstyle属性に指定しなければうまく行かないので注意。 &amp;lt;div style=&amp;quot;position:relative;width:250px;height:250px;&amp;quot;&amp;gt; &amp;lt;canvas id=&amp;quot;graph&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt; &amp;lt;/div&amp;gt; 対策2:</description>
    </item>
    
    <item>
      <title>【Django】テンプレートで数値を使用したforループを実行する方法【レビューの星のアイコン表示などに有効】</title>
      <link>https://noauto-nolife.com/post/django-template-integer-for-loop/</link>
      <pubDate>Tue, 21 Dec 2021 16:28:13 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-template-integer-for-loop/</guid>
      <description>通常、DjangoTemplateLanguageのforループは数値型のループは許さない。ループが許されているのは、文字列型かリスト型、イテラブルなオブジェクトに限定される。 これを普通のPythonで表現するのであれば、こんな状態。 for content in contents: print(content) このcontentsに数値を入れることはできないのはPythonをやっていればわかる。しかし、とある方法を使えば数値のループは実現できる。 テンプレートタグw</description>
    </item>
    
    <item>
      <title>Laravelで.env(環境変数)に指定した値をチェックする方法【コントローラ・ビュー】</title>
      <link>https://noauto-nolife.com/post/laravel-env-check/</link>
      <pubDate>Tue, 21 Dec 2021 08:06:32 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-env-check/</guid>
      <description>例えば、コントローラなどで開発段階とデプロイ後で処理を切り分けたい事がある。そういう時は、.env(環境変数)に指定した値を参照してif文で分岐させれば良い。 コントローラで環境変数に指定した値を確認する。 if ( env(&amp;quot;APP_DEBUG&amp;quot;) ){ \Log::debug(&amp;quot;APP_DEBUGはTrueです&amp;quot;); } else{ \Log::debug(&amp;quot;APP_DEBUGはFalseです&amp;quot;); } これで解決す</description>
    </item>
    
    <item>
      <title>Laravel 8.x系のroute/web.phpはこう書く【Target class [Controller Name] does not exist.】</title>
      <link>https://noauto-nolife.com/post/laravel8-route-error/</link>
      <pubDate>Mon, 20 Dec 2021 16:28:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel8-route-error/</guid>
      <description>Laravel7.x系はサポートが切れているので早めにLaravel8.x系にしたいところ。 ルーティングの記法が変わっているので確認しましょう。 &amp;ndash;resourceの場合 こうする。 #7.x系以前の書き方。 #Route::resource(&#39;/topics&#39;, &#39;TopicsController&#39;); #8.x系以降の書き方。 use App\Http\Controllers\TopicsController; Route::resource(&#39;/topics&#39;, TopicsController::class); 冒頭で予めコントローラをuseしておく。 コントローラのアクションと逆引き用の名前を指定する場合。 こうする。 #7.x系以前の書き方。 #Route::get(&#39;/topics&#39;, &#39;TopicsController@index&#39;)-&amp;gt;name(&#39;topics.index&#39;); #8.x系以降の</description>
    </item>
    
    <item>
      <title>HTMLのformタグで送信(submit)をする際に、確認をとった上で送信を行う【onsubmit属性】</title>
      <link>https://noauto-nolife.com/post/form-tags-onsubmit/</link>
      <pubDate>Mon, 20 Dec 2021 15:21:08 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/form-tags-onsubmit/</guid>
      <description>例えば、下記のような削除ボタンであれば、削除ボタンが押されると同時に削除が実行される。 &amp;lt;form action=&amp;quot;&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt; &amp;lt;!--CSRF_token--&amp;gt; &amp;lt;input class=&amp;quot;btn btn-outline-danger&amp;quot; type=&amp;quot;submit&amp;quot; value=&amp;quot;削除&amp;quot;&amp;gt; &amp;lt;/form&amp;gt; これでは間違えて押してしまった時に取り返しが付かない。 そこで下記のようにformタグにonsubmit属性を付与する。これで削除の送信前に確認をとった上で送信を行う事ができる。 &amp;lt;form action=&amp;quot;&amp;quot; method=&amp;quot;POST&amp;quot; onsubmit=&amp;quot;if(confirm(&#39;本当に削除し</description>
    </item>
    
    <item>
      <title>Laravel8.xでページネーターのSVGの矢印がおかしいので修正する。</title>
      <link>https://noauto-nolife.com/post/laravel8-paginator-svg/</link>
      <pubDate>Mon, 20 Dec 2021 15:05:27 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel8-paginator-svg/</guid>
      <description>問題だらけのLaravel8.xでまた問題が出てきた。ページネーションを普通に使うと、このようにSVGが狂っており、巨大化する。 修正 app/Providers/AppServiceProvider.phpにて下記のようにする。 &amp;lt;?php namespace App\Providers; use Illuminate\Support\ServiceProvider; use Illuminate\Pagination\Paginator; class AppServiceProvider extends ServiceProvider { /** * Register any application services. * * @return void */ public function register() { // } /** * Bootstrap any application services. * * @return void */ public function boot() { Paginator::useBootstrap(); } } これでLaravel7.x以前のBootstrapを使った普通のページネーション</description>
    </item>
    
    <item>
      <title>Djangoをやる前に知っておきたいPython構文【オブジェクト指向(class文)と別ファイル読み込み(import文)は特に重要】</title>
      <link>https://noauto-nolife.com/post/django-essential-python/</link>
      <pubDate>Sun, 19 Dec 2021 17:12:22 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-essential-python/</guid>
      <description>Djangoを始める前に知っておきたいPython構文をまとめる。 型 #数値型 score = 100 #文字列型 name = &amp;quot;Taro&amp;quot; #リスト型 numbers = [ 46,77,22 ] #辞書型 topic = { &amp;quot;id&amp;quot;:1, &amp;quot;comment&amp;quot;:&amp;quot;Hello&amp;quot; } #辞書型のリスト topics = [ { &amp;quot;id&amp;quot;:1, &amp;quot;comment&amp;quot;:&amp;quot;Hello&amp;quot; }, { &amp;quot;id&amp;quot;:2, &amp;quot;comment&amp;quot;:&amp;quot;Hi&amp;quot; }, { &amp;quot;id&amp;quot;:3, &amp;quot;comment&amp;quot;:&amp;quot;こんにちは&amp;quot; }, { &amp;quot;id&amp;quot;:4, &amp;quot;comment&amp;quot;:&amp;quot;どうも&amp;quot; }, ] 数値型は演算子(+ - * /)のいずれかを使用して計算を行うことができ</description>
    </item>
    
    <item>
      <title>LaravelのHerokuデプロイがPHPバージョン問題で必ず失敗する問題は、バージョンアップで対処する【ERROR: Dependency installation failed!】</title>
      <link>https://noauto-nolife.com/post/laravel-heroku-deploy-php-version-error/</link>
      <pubDate>Fri, 17 Dec 2021 11:24:38 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-heroku-deploy-php-version-error/</guid>
      <description>経緯 2021年12月某日、今日もLaravelのプロジェクトの開発を終え、『さあデプロイだ』とHerokuへデプロイをすると、下記のようなエラーメッセージが出た。 原因 これまで、普通にデプロイできていて、今日になってなぜデプロイに失敗するのか。どこかで設定ファイルの編集ミスったかと思いあれこれ確認してみたが、原因はわからない。 そこでStackOverflowにて、検索してみると、同様のエラー報告がみ</description>
    </item>
    
    <item>
      <title>【openpyxl】PythonからExcelファイルを読み書きする</title>
      <link>https://noauto-nolife.com/post/startup-openpyxl/</link>
      <pubDate>Thu, 16 Dec 2021 16:31:27 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-openpyxl/</guid>
      <description>Pythonを使えばExcelファイルの新規作成や編集、読み込みなどもできる。 ソースコード import openpyxl as px #新規作成(オブジェクト生成)から一旦保存。 wb = px.Workbook() wb.save(&#39;test.xlsx&#39;) #既存のファイルを読み込み wb = px.load_workbook(&#39;test.xlsx&#39;) #アクティブシートを選択(新規作成時に最初からあるシート) ws = wb.active #シート名を変更 ws.title = &amp;quot;領収書&amp;quot; #セルに値を入力していく import datetime ws[&amp;quot;A1&amp;quot;].value = &amp;quot;決済日&amp;quot; #このように入れると、エクセル上、文字列と</description>
    </item>
    
    <item>
      <title>【GitHub】gitコマンドでリモートリポジトリへプッシュするためのトークンをジェネレートする</title>
      <link>https://noauto-nolife.com/post/github-token-generate/</link>
      <pubDate>Thu, 16 Dec 2021 15:07:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/github-token-generate/</guid>
      <description>gitコマンドでGitHubにプッシュする時、アカウントのパスワードではプッシュすることはできない。前もってアカウント内に作っておいたトークンを入力する必要がある。 本記事ではその作り方を解説する。 トークン生成手順 下記リンク、もしくはSettingsからDeveloper settingsをクリック、Personal access tokensをクリックする。 https://github.com/settings/tokens Generate new tokenをクリック。パスワードの入力を要求される</description>
    </item>
    
    <item>
      <title>VBAでHelloWorld、セルの色変え、計算などの基本操作をやってみる【LibreOffice】</title>
      <link>https://noauto-nolife.com/post/startup-vba/</link>
      <pubDate>Thu, 16 Dec 2021 09:52:21 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-vba/</guid>
      <description>VBAで基本操作(セルの装飾、計算処理、ダイアログ表示など)を行う。今回はLibreOfficeで行っているが、MicroSoftOfficeなどでも再現はできる。 ハローワールド Sub hello_vba_world MsgBox(&amp;quot;Hello VBA World&amp;quot;) End Sub このマクロを任意のボタンなどに割り当てることで、『Hello VBA World』と書かれたダイアログが表示される。 セルの取得と計算処理 計算処理をするには、特定のセルの値を手に入れ変数に格納する必要がある。 変数の定義</description>
    </item>
    
    <item>
      <title>【DRF】Django Rest Frameworkでリスト型のバリデーションも行う【UUIDや文字列を格納したリスト型のバリデーションに】</title>
      <link>https://noauto-nolife.com/post/django-rest-framework-listfield/</link>
      <pubDate>Tue, 14 Dec 2021 15:04:59 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-rest-framework-listfield/</guid>
      <description>例えば、Ajaxを使用して複数選択削除を行いたい場合、idもしくはuuidのリスト型をサーバーサイドに送信することになるだろう。 そういう時、DjangoRESTFramework(以下DRF)のシリアライザを使用すると良いだろう。 UUIDを含むリスト型をバリデーションする #複数選択削除で利用 class UUIDListSerializer(serializers.Serializer): id_list = serializers.ListField( child=serializers.UUIDField() ) これで実現できる。 DjangoのFormクラスで実現させる場合。 リスト型で送られてくるデータの</description>
    </item>
    
    <item>
      <title>【Django】Modelクラス、Formクラス、もしくはSerializerクラスのsaveメソッドで保存した後、保存したモデルオブジェクトのIDを手に入れる方法【データ保存した後、関連するデータも追加したい場合】</title>
      <link>https://noauto-nolife.com/post/django-forms-save-model-object-id/</link>
      <pubDate>Sat, 11 Dec 2021 07:30:48 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-forms-save-model-object-id/</guid>
      <description>例えば、グループとそれに所属するメンバーのデータを一気に新規作成するタイプのフォームを作った場合。 グループとメンバーは1対多の関係になっており、それぞれの新規作成を1回のリクエストで済ませる場合は、まずグループを新規作成、その後そのグループに紐付いたメンバーを新規作成する必要がある。 ここで問題になるのが、メンバーのフィールドの一部にグループのIDを記録しなければならないこと。こういう時、保存したグ</description>
    </item>
    
    <item>
      <title>【Django】requestオブジェクトからクライアントのUAやIPアドレス、CSRFCookieなどをチェック、テンプレート上に表示する。</title>
      <link>https://noauto-nolife.com/post/django-request-meta/</link>
      <pubDate>Sat, 11 Dec 2021 07:26:40 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-request-meta/</guid>
      <description>すぐ忘れるので備忘録として。 テンプレートにユーザーのIPアドレス等を表示させたい場合、下記DTLを任意のテンプレートに書き込む。 {{ request.META }} これでリクエストに関連するデータが全て表示される。必要なデータを選び、例えばREMOTE_ADDRであれば {{ request.META.REMOTE_ADDR }} とすれば良い。</description>
    </item>
    
    <item>
      <title>WindowsのタスクスケジューラーでPythonスクリプトを実行させる【スクレイピングの予約実行などに】</title>
      <link>https://noauto-nolife.com/post/windows-taskscheduler/</link>
      <pubDate>Thu, 09 Dec 2021 15:46:22 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/windows-taskscheduler/</guid>
      <description>例えば、毎日定時に実行しなければならないスクリプトがある場合、手動でその時間に実行しているようではめんどくさい。 そんな時、Windowsの場合は、指定した時間になったら実行してくれるタスクスケジューラーを使うと良いだろう。 タスクスケジューラーを起動する Windowsキーを押して、『tasks』と入力すると出てくる これを起動する。 新しいタスクを作成する 『タスクスケジューラライブラリ』にて右クリック。</description>
    </item>
    
    <item>
      <title>【JavaScript】Chart.jsでグラフを描画する【棒グラフ、円グラフ、折れ線グラフ】</title>
      <link>https://noauto-nolife.com/post/startup-chartjs/</link>
      <pubDate>Thu, 09 Dec 2021 14:20:07 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-chartjs/</guid>
      <description>インストールとチュートリアル 下記CDNをインストールする。 &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/chart.js@3.6.2/dist/chart.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 続いて、グラフを表示させたい場所に下記、canvasタグを配置。 &amp;lt;canvas id=&amp;quot;graph&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt; これで準備完了。後は、次項以降のJavaScriptを発動させ、任意のグラフを描画させる。 棒グラフ 公式から拝借。 実行させるJavaScriptが下記。 const ctx = document.getElementById(&#39;graph&#39;).getContext(&#39;2d&#39;); const myChart = new Chart(ctx, { type: &#39;bar&#39;, data: { labels: [&#39;Red&#39;, &#39;Blue&#39;, &#39;Yellow&#39;, &#39;Green&#39;, &#39;Purple&#39;, &#39;Orange&#39;], datasets: [{ label: &#39;# of Votes&#39;, data: [12, 19, 3, 5, 2, 3], backgroundColor: [ &#39;rgba(255, 99, 132, 0.2)&#39;, &#39;rgba(54, 162, 235, 0.2)&#39;, &#39;rgba(255, 206, 86, 0.2)&#39;, &#39;rgba(75, 192, 192, 0.2)&#39;, &#39;rgba(153, 102, 255, 0.2)&#39;, &#39;rgba(255, 159, 64, 0.2)&#39;</description>
    </item>
    
    <item>
      <title>サイトのアイコンを指定して、Favicon 404 NotFound問題を解決する【フリー素材使用】</title>
      <link>https://noauto-nolife.com/post/favicon-404/</link>
      <pubDate>Thu, 09 Dec 2021 11:53:51 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/favicon-404/</guid>
      <description>F12キーを押してコンソールを開き、JavaScriptの挙動を確かめる時。目につくのが、favicon.ico NotFoundという赤字の警告。 この警告はサイトのアイコンを設定していないことによって発生する。つまり、このブログのようにアイコンを設定すれば、警告は出ないということだ。 アイコンを設定する。 HTMLのheadタグ内に下記を記入する。 &amp;lt;link href=&amp;quot;img/favicon.ico&amp;quot; rel=&amp;quot;icon&amp;quot;&amp;gt; まず、アイコンのファイル名は必ずfavicon.</description>
    </item>
    
    <item>
      <title>LaravelでSendgridを使ってメール送信【認証・通知に、ライブラリのインストールは不要】</title>
      <link>https://noauto-nolife.com/post/laravel-sendgrid/</link>
      <pubDate>Wed, 08 Dec 2021 16:42:22 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-sendgrid/</guid>
      <description>特別なライブラリなどは必要ない。 流れ .envにてAPIキーなどを設定 make:mailコマンドでメールの雛形一式を作る メールのモデルを作る メールのテンプレートを作る 送信処理を実行する .envにてAPIキーなどを設定 まず、.envにてSendgridで手に入れたAPIキー等の情報を格納 MAIL_MAILER=smtp MAIL_HOST=smtp.sendgrid.net MAIL_PORT=587 MAIL_USERNAME=apikey MAIL_PASSWORD=[ここにSendgridで手に入れたAPIキーを記録する] MAIL_ENCRYPTION=tls MAIL_FROM_</description>
    </item>
    
    <item>
      <title>【Django】DTLのextendsとblockを使って、テンプレートを継承をする</title>
      <link>https://noauto-nolife.com/post/django-templates-extends-and-block/</link>
      <pubDate>Mon, 06 Dec 2021 07:48:38 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-templates-extends-and-block/</guid>
      <description>DjangoTemplateLanguage(以下、DTL)のextendsとblockを使用することで、複数のページの共通部分を一箇所にまとめることができる。 例えば、BootstrapやjQueryの読み込み、サイトのヘッダーやサイドバー等の共通箇所を一箇所にまとめることで、編集時に一箇所だけ編集すればOK。 本記事ではextendsとblockを使用して、簡単なテンプレートの継承を行う。コードは</description>
    </item>
    
    <item>
      <title>【Leaflet.js】オリジナルのアイコン画像を使用して、地図上に表示させる【飲食店のマッピングであれば食べ物の画像を使って視認性UP】</title>
      <link>https://noauto-nolife.com/post/leaflet-marker-original-icon/</link>
      <pubDate>Mon, 06 Dec 2021 06:51:00 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/leaflet-marker-original-icon/</guid>
      <description>Leaflet.jsをそのまま使うと、配置されるマーカーはどこにでもあるような普通のマーカーになる。 これでは、どれも同じマーカーなので、パッと見でなにを意味しているのかはわからない。 例えば、飲食店のレビューサイトを投稿するウェブアプリとして、寿司屋でも、ラーメン屋でも、カレー屋でも、皆同じ青色の普通のマーカーになってしまう。寿司屋であれば寿司っぽいアイコンを、ラーメン屋であればラーメンっぽいアイコ</description>
    </item>
    
    <item>
      <title>【Django】ユーザーモデルと1対多のリレーションを組む方法【カスタムユーザーモデル不使用】</title>
      <link>https://noauto-nolife.com/post/django-foreignkey-user/</link>
      <pubDate>Sun, 05 Dec 2021 11:48:32 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-foreignkey-user/</guid>
      <description>認証にはallauthを使用する。 コードは40分Djangoの簡易掲示板を元に作成する。forms.pyを実装させている。 Userモデルと1対多のリレーションを組み、誰が投稿したのかわかるようにする。 models.py from django.db import models from django.contrib.auth.models import User class Topic(models.Model): comment = models.CharField(verbose_name=&amp;quot;コメント&amp;quot;,max_length=2000) user = models.ForeignKey(User, verbose_name=&amp;quot;投稿</description>
    </item>
    
    <item>
      <title>【Django】簡易掲示板に折りたたみ式サイドバーを実装させる【extends】</title>
      <link>https://noauto-nolife.com/post/django-templates-extends/</link>
      <pubDate>Sat, 04 Dec 2021 10:29:01 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-templates-extends/</guid>
      <description>テンプレートの継承を使うことで、複数のページに共通するHTMLをひとまとめにすることができる。 コードは40分Djangoで作った簡易掲示板を元に、折りたたみ式のサイドバーを使ってテンプレートを継承し、実現させる。 折りたたみサイドバーのHTMLとCSS 折りたたみ式のサイドバーは左側に設置させるようにした。templates/common/l_sidebar.htmlを作る。内容は下記 {% load static %} &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;</description>
    </item>
    
    <item>
      <title>【Laravel】Herokuにデプロイした後、URLをhttpsにする【デフォルトではhttpから始まるため、クライアントのブラウザが静的ファイルの読み込みに失敗する問題の対策】</title>
      <link>https://noauto-nolife.com/post/laravel-deploy-after-https-force/</link>
      <pubDate>Fri, 03 Dec 2021 16:36:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-deploy-after-https-force/</guid>
      <description>HerokuにLaravelをデプロイした後の話。デフォルトではHTTPSではなく、HTTP通信であるため、静的ファイルのアクセスは暗号化されない。 それが原因で、クライアントのブラウザのセキュリティが発動して、静的ファイルの読み込みを拒否する。結果、CSSやJavaScript、画像などの読み込みに失敗し、サイトレイアウトが乱れる。 ビューでassetやroute等を使用している場合、それら全てがh</description>
    </item>
    
    <item>
      <title>【Leaflet.js】地図をクリックしてマーカーを配置した時、古いマーカーを削除する</title>
      <link>https://noauto-nolife.com/post/leaflet-marker-delete/</link>
      <pubDate>Thu, 02 Dec 2021 14:43:40 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/leaflet-marker-delete/</guid>
      <description>以前紹介したLeaflet.js+OSMでマッピングアプリを作る記事 DjangoでOpenStreetMap(OSM)とleaflet.jsを使ってマッピングアプリを作る では、2度以上地図をクリックすると、前にクリックして配置されたマーカーが残ってしまう問題があった。そこで、今回はこの古いマーカーを削除して、新しくクリックされた位置にマーカーを配置させる。 ソースコード 要するに、マーカーを配置したと</description>
    </item>
    
    <item>
      <title>LaravelをCloudinaryを使用したHerokuにデプロイ、画像やファイルをアップロードする</title>
      <link>https://noauto-nolife.com/post/laravel-heroku-cloudinary-deploy/</link>
      <pubDate>Thu, 02 Dec 2021 06:59:02 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-heroku-cloudinary-deploy/</guid>
      <description>画像やファイルをアップロードするLaravelウェブアプリをオンプレミスではなく、クラウド(とりわけHeroku)にデプロイしたい場合、ストレージ問題を解決する必要がある。普通のLaravelアプリのHerokuデプロイはそれほど難しくはないが、Cloudinaryを使うとなると情報が限られ、難易度も高い。 そこで本記事では限られている情報に少しでも貢献するため、画像やファイルアップロード機能のある</description>
    </item>
    
    <item>
      <title>【Laravel】CSSやJS等の静的ファイルを読み込む【public/static/】</title>
      <link>https://noauto-nolife.com/post/laravel-static-files/</link>
      <pubDate>Tue, 30 Nov 2021 10:26:12 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-static-files/</guid>
      <description>静的ファイルの読み込みができれば、JSやCSSだけでなくサイトの画像を前もって用意することができる。 本記事では予めプロジェクトに配置したCSSやJSを読み込み、表示させる方法を解説する。 publicディレクトリ内にstaticディレクトリを作る まず、静的ファイル関係を記録するディレクトリを作成する。 Laravelにはpublicというディレクトリが用意されており、通常はそこにCSSやJS等を保管す</description>
    </item>
    
    <item>
      <title>VimでLaravelのビューを書いているとき、オートインデントが発動しない問題を対処する【.vimrc】</title>
      <link>https://noauto-nolife.com/post/vim-laravel-autoindent/</link>
      <pubDate>Sun, 28 Nov 2021 08:06:40 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/vim-laravel-autoindent/</guid>
      <description>VimでLaravelのビューを書いている時、オートインデントが発動してくれない。 毎度毎度Tabキーを押してインデントをするのは時間の無駄なので、ここは.vimrcに設定を施したい。 そんな時に見つかったのが下記StackOverflow。 https://stackoverflow.com/questions/32637518/vim-auto-indentation-not-working .vimrcに下記2行を追加するだけで良いらしい。 autocmd BufNewFile,BufRead *.blade.php set syntax=html autocmd BufNewFile,BufRead *.blade.php set filetype=html 確かにこれだけでオートインデントが発動してくれた。これでvimを使用したLaravelの開</description>
    </item>
    
    <item>
      <title>【Python】requestsライブラリを使用して、DjangoにPOSTメソッドのHTTPリクエストを送信する(管理サイトへのログイン)【セッションを維持してCSRF問題の対策】</title>
      <link>https://noauto-nolife.com/post/python-requests-post-method/</link>
      <pubDate>Fri, 26 Nov 2021 17:03:01 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/python-requests-post-method/</guid>
      <description>Pythonのrequestsライブラリはスクレイピング(GETメソッド)で使用されているが、それだけでなくテストとしてPOSTメソッドでデータを投稿する事ができる。 ただ、ここで問題になるのが、CSRFトークンの存在。CSRFトークンをセットしなければCSRF検証に失敗してしまい、データの投稿ができなくなる。 そこで、セッションを維持した状態でCSRFトークンをリクエストボディにセットし、データを送</description>
    </item>
    
    <item>
      <title>【Laravel】マイグレーション時の『Cannot add a NOT NULL column with default value NULL』問題を対処する【エラー】</title>
      <link>https://noauto-nolife.com/post/laravel-notnull-exception/</link>
      <pubDate>Wed, 24 Nov 2021 16:49:32 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-notnull-exception/</guid>
      <description>なぜ、このエラーが発生するのか。まず原因から解説する。 原因 要するにこういうこと。 追加しようとしているフィールド(カラム)がNull禁止でデフォルトが無い。しかし、フィールド(カラム)を追加する以上、どうしてもNullになってしまう。この矛盾をどうするかと言うのがこの問題。 この状況が発生する条件は下記。下記を全て満たすと発生する。 条件1:既存のテーブルにカラムを追加する 条件2:追加するカラムにカラム</description>
    </item>
    
    <item>
      <title>【Laravel】IPアドレスを取得して、DBへ記録する【犯罪・不正利用の抑止、荒らし対策などに】</title>
      <link>https://noauto-nolife.com/post/laravel-ipaddress/</link>
      <pubDate>Wed, 24 Nov 2021 07:08:50 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-ipaddress/</guid>
      <description>クライアントのIPアドレスを記録できれば、認証が無くても犯罪行為の抑止につながるし、事案が発生してもすぐに対応できるだろう。 本記事ではLaravelにクライアントのIPアドレスを記録する方法を解説する。 コードは『初心者でもlaravelを使い、45分でCRUD簡易掲示板を作る【Restful対応】』から流用している。 IPアドレスのカラムを追加(モデル編集とマイグレーションファイル作成) まずマイグレ</description>
    </item>
    
    <item>
      <title>VisualStudioCode(VScode)を使う前にやっておきたい設定と覚えておくと良い操作方法</title>
      <link>https://noauto-nolife.com/post/vscode-config/</link>
      <pubDate>Tue, 23 Nov 2021 12:17:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/vscode-config/</guid>
      <description>比較的メジャーなVisualStudioCode(以下VScode)も、やはり初期状態のままでは使いづらい。 本記事では本格的にコードを書く前にやっておきたい設定を列挙する。 文字サイズを変更する まず文字サイズの変更。一番手っ取り早く文字を大きく表示させる方法として、VScode全体を拡大縮小することが有効。 VScodeのメニューバーから『表示』→『外観』→『拡大』もしくは『縮小』を選ぶ。もしくは、シ</description>
    </item>
    
    <item>
      <title>【Django】Ajaxを使ってOSMとLeaflet.jsでマーカーを配置させる</title>
      <link>https://noauto-nolife.com/post/django-osm-leaflet-mapping-ajax/</link>
      <pubDate>Tue, 23 Nov 2021 08:12:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-osm-leaflet-mapping-ajax/</guid>
      <description>Ajaxを使うことで、ページ全体を再レンダリングしなくてもデータの投稿ができるようになる。これをOSMとLeaflet.jsを使ったマッピングに使うことで、データの投稿がとてもスムーズになる。 Ajaxに関してはDjangoでAjax(jQuery)を実装、送信と同時に投稿内容を確認する【Django Rest Framework不使用版】を、OSMとLeaflet.jsはDjangoでOpenStreetM</description>
    </item>
    
    <item>
      <title>Djangoで1対多のリレーションを構築する【カテゴリ指定、コメントの返信などに】【ForeignKey】</title>
      <link>https://noauto-nolife.com/post/django-models-foreignkey/</link>
      <pubDate>Sun, 21 Nov 2021 16:34:32 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-foreignkey/</guid>
      <description>1対多のリレーションを構築することができれば、トピックにカテゴリを指定したり、トピックに対してコメントを投稿することができる。 本記事はその方法を1対多の原理からDjangoのmodels.pyでの書き方まで記す。コードは『Djangoビギナーが40分で掲示板アプリを作る方法』から流用する。 1対多の仕組み 1対多とは、一言で言ってしまうと、プロ野球チームとチームに所属する選手の関係である。下記図をご覧</description>
    </item>
    
    <item>
      <title>DjangoでOpenStreetMap(OSM)とleaflet.jsを使ってマッピングアプリを作る</title>
      <link>https://noauto-nolife.com/post/django-osm-leaflet-mapping/</link>
      <pubDate>Mon, 15 Nov 2021 17:57:22 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-osm-leaflet-mapping/</guid>
      <description>※この方法はDjangoでなくても実現できる。 Djangoでマッピングを実現する方法としてGeoDjangoがある。だが、GeoDjangoは実装が容易ではなく、以前紹介した方法では実現できない事がわかった。 そこで、GeoDjangoよりも容易にマッピングを実現するため、オープンストリートマップ(以下、OSM)とleaflet.jsを使って対処する。 ソースコードは40分Djangoをベースとしてい</description>
    </item>
    
    <item>
      <title>Vimのコメントの自動補完を無効化させる【JavaScriptやCSS、シェルスクリプトでコメントアウトした後、Enter押すと自動で出てくるアレ】</title>
      <link>https://noauto-nolife.com/post/vim-comment-settings/</link>
      <pubDate>Mon, 15 Nov 2021 07:39:25 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/vim-comment-settings/</guid>
      <description>例えばJavaScriptでコメントを書く時、 // と書く。だが、その後Enterキーを押すと // // こうなる。これがすごい鬱陶しい。 頼んでもいないのにコメント行が勝手に増えて行くのは、消す手間も同時に増えるということ。だから無効化させる。 環境 Ubuntu 18.04 VIM version 8.0.1453 下記プラグインを使っている状態 emmet.vim surround.vim コメントの自動補完を無効化する 通常、このようなコメントの自動補完を無効化させるには、下記コマンドを実行して無効化させる。</description>
    </item>
    
    <item>
      <title>DjangoのMessageFrameworkで投稿とエラーをフロント側に表示する</title>
      <link>https://noauto-nolife.com/post/django-message-framework/</link>
      <pubDate>Sun, 14 Nov 2021 18:53:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-message-framework/</guid>
      <description>MessageFrameworkを使ってHelloWorldを表示させる。 元になるコードは40分Djangoにforms.pyを追加した状態から流用している。 まず、views.pyにて、公式からコードを拝借して追加した。 from django.shortcuts import render,redirect from django.views import View from .models import Topic from .forms import TopicForm #↓追加 from django.contrib import messages class IndexView(View): def get(self, request, *args, **kwargs): #↓追加 messages.add_message(request, messages.INFO, &#39;Hello world.&#39;) topics = Topic.objects.all() context = { &amp;quot;topics&amp;quot;:topics } return render(request,&amp;quot;bbs/index.html&amp;quot;,context) def post(self, request, *args, **kwargs): form = TopicForm(request.POST) if form.is_valid(): form.save() return redirect(&amp;quot;bbs:index&amp;quot;) index = IndexView.as_view() HTML側でメッセージを表示させるにはこうする。 &amp;lt;!DOCTYPE</description>
    </item>
    
    <item>
      <title>Laravelに必要なPHP構文【if,for,function,class,型変換、配列操作など】</title>
      <link>https://noauto-nolife.com/post/laravel-essential-php/</link>
      <pubDate>Sat, 13 Nov 2021 17:46:27 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-essential-php/</guid>
      <description>Laravelはフレームワークである。すでにコードが書かれており、それを読みながら追記していく必要がある。 そのため、Laravelによく出るPHP構文を知っておくと開発がスムーズに進む。本記事ではLaravelに必要なPHP構文をまとめて解説する。 if 基本のif文。ブーリアン型の判定が主である。 &amp;lt;?php $flag = True; if ($flag){ echo &amp;quot;True!!&amp;quot;; } else{ echo &amp;quot;False!!&amp;quot;; } Laravel実践では、コントローラがクライアントから受け取った値が存在するかチ</description>
    </item>
    
    <item>
      <title>DjangoでAjax(jQuery)を実装、送信と同時に投稿内容を確認する【Django Rest Framework不使用版】</title>
      <link>https://noauto-nolife.com/post/django-ajax/</link>
      <pubDate>Sat, 13 Nov 2021 07:05:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-ajax/</guid>
      <description>ウェブアプリケーションでAjaxが使えるようになれば、ページ内の一部の要素のみを更新させることができる。 それすなわち、 通信量の大幅な削減 ページのちらつき低減 SPA(シングルページアプリケーション)の開発可能 ロングポーリングを使用した永続的な接続が可能(→オンラインチャットなどに転用可能) など、様々な恩恵が得られる。 Ajaxの実装は実質テンプレートとビュー、静的ファイルの編集のみと非常にシンプル。 今</description>
    </item>
    
    <item>
      <title>【Django】formタグを使ってHTTPリクエストのGETメソッド、POSTメソッドを送信する</title>
      <link>https://noauto-nolife.com/post/django-request-get-and-post/</link>
      <pubDate>Fri, 12 Nov 2021 07:12:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-request-get-and-post/</guid>
      <description>前提 DjangoでHelloWorld【HttpResponse及びレンダリング】ができた状態を前提として話を進める。 HTTPリクエストのGETメソッドの送信方法 用途は主に、検索がある。 まずindex.html &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;main class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;form action=&amp;quot;&amp;quot; method=&amp;quot;GET&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;search&amp;quot; value=&amp;quot;{{ request.GET.search }}&amp;quot; placeholder=&amp;quot;キーワード&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;検索&amp;quot;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; form</description>
    </item>
    
    <item>
      <title>【Django】複数のアプリを作る場合、models.pyのモデルクラスにテーブル名を指定するべきではない【重複問題】</title>
      <link>https://noauto-nolife.com/post/django-models-do-not-set-table-name/</link>
      <pubDate>Thu, 11 Nov 2021 14:14:40 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-do-not-set-table-name/</guid>
      <description>背景 最近、models.pyを書く時、db_tableを指定している現状に違和感が出てきた。 from django.db import models class Topic(models.Model): #↓これは必要なのか？ class Meta: db_table = &amp;quot;topic&amp;quot; #↑これは必要なのか？ comment = models.CharField(verbose_name=&amp;quot;コメント&amp;quot;,max_length=2000) def __str__(self): return self.comment もしやと思い、db.sqlite3を確認する。すると、上記のモデルをマイグレーションしたときのテーブル名</description>
    </item>
    
    <item>
      <title>Djangoのインタラクティブシェルを使う【python3 manage.py shell】</title>
      <link>https://noauto-nolife.com/post/django-shell/</link>
      <pubDate>Sat, 06 Nov 2021 09:30:02 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-shell/</guid>
      <description>Djangoに含まれているライブラリを普通のPythonのインタラクティブシェルで動かそうとしても、manage.pyの環境変数やsettings.pyが無ければ動かない。 だから、Django関係のライブラリを試しに動かしたい時は、 python3 manage.py shell とする。 用途 Djangoに含まれるライブラリの動作検証 例えば、django.utils.timezoneなどはPythonのインタラクティブシェルでは動作しない。</description>
    </item>
    
    <item>
      <title>【Django】開発を始める上で最初に覚えておいたほうがよい Django Templates Language(DTL)</title>
      <link>https://noauto-nolife.com/post/django-templates-language/</link>
      <pubDate>Thu, 04 Nov 2021 08:25:53 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-templates-language/</guid>
      <description>DjangoでHelloWorldを表示させた後、次にやることはDjango Templates Language(DTL)の習得。 DTLを使うことで、ビューから受け取った変数を表示させたり、条件分岐させたり、繰り返して同じ内容のHTMLを表示させたりすることができる。 Django Templates Language (DTL)とは 例えば、ログイン機能のあるサイトで、未ログインのユーザーにはログインページのリンクを表示、ログイン済みのユーザーにはマイページのリ</description>
    </item>
    
    <item>
      <title>HUGOでSNS等のシェアリンク(シェアボタン)をブログ内に配置して、PVを増やす【Twitter、Facebook、はてなブログ、LINE】</title>
      <link>https://noauto-nolife.com/post/share-link/</link>
      <pubDate>Tue, 02 Nov 2021 16:16:21 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/share-link/</guid>
      <description>HUGOでもシェアリンク(シェアボタン)を設置できる。HUGOのパラメータ変数を用意する必要があるので、慣れていないと難易度が高いが。 ソースコード 記事単一表示ページにて下記のHTMLを書く &amp;lt;div class=&amp;quot;article_share_area&amp;quot;&amp;gt; &amp;lt;h2&amp;gt;シェアボタン&amp;lt;/h2&amp;gt; &amp;lt;a class=&amp;quot;article_share_link link_twitter&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;nofollow noopener noreferrer&amp;quot; href=&amp;quot;https://twitter.com/share?url={{ .URL | absURL }}&amp;amp;text={{ .Title }}&amp;quot;&amp;gt;Twitter&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;quot;article_share_link link_line&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;nofollow noopener noreferrer&amp;quot; href=&amp;quot;https://social-plugins.line.me/lineit/share?url={{ .URL | absURL }}&amp;quot;&amp;gt;LINEで送る&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;quot;article_share_link link_facebook&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;nofollow noopener noreferrer&amp;quot; href=&amp;quot;https://www.facebook.com/sharer/sharer.php?u={{ .URL | absURL }}&amp;quot;&amp;gt;Facebook&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;quot;article_share_link link_hatena&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;nofollow noopener noreferrer&amp;quot; href=&amp;quot;https://b.hatena.ne.jp/add?mode=confirm&amp;amp;url={{ .URL | absURL</description>
    </item>
    
    <item>
      <title>Laravelビギナーが30分で掲示板アプリを作る方法</title>
      <link>https://noauto-nolife.com/post/startup-laravel/</link>
      <pubDate>Tue, 26 Oct 2021 15:13:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-laravel/</guid>
      <description>laravelはDjangoと違って初っ端から大量のファイルやディレクトリが表示され、気後れしそうになるが、編集する部分さえ分かれば大したことはない見掛け倒し。 PHPを中心に扱う現場ではlaravelのスキルが求められるのでウェブ屋になるのであれば、是非とも習得しておきたい。 対象読者はlaravelを既にPCにインストール済み、Linux系コマンド習得済み、PHP及びHTML/CSS/JSの基本構</description>
    </item>
    
    <item>
      <title>ウェブアプリケーションフレームワークを使う前に知っておきたい知識【Django/Laravel/Rails】</title>
      <link>https://noauto-nolife.com/post/startup-web-application-framework/</link>
      <pubDate>Thu, 21 Oct 2021 14:44:50 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-web-application-framework/</guid>
      <description>DjangoやLaravel、Ruby on Rails等のウェブアプリケーションフレームワーク(以下、フレームワーク)を使うことで、効率的にウェブアプリの開発ができる。 しかし、前提となる知識をおろそかにしているようでは大したものは作れないし、問題だらけのウェブアプリを知らぬ間に世に出してしまうことになるだろう。 本記事ではフレームワークを扱う際に知っておきたい知識を記す。 ネットワーク ウェブが動く仕組み ま</description>
    </item>
    
    <item>
      <title>【Django】canvasで描画した画像をAjax(jQuery)で送信【お絵かきBBS、イラストチャット、ゲームのスクショ共有などに】</title>
      <link>https://noauto-nolife.com/post/django-canvas-send-img-by-ajax/</link>
      <pubDate>Thu, 21 Oct 2021 07:25:39 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-canvas-send-img-by-ajax/</guid>
      <description>例えば、チャットサイト、掲示板サイトでユーザーが描画したイラストを投稿できる形式にしたい時。 ユーザーが手元の端末でペイントツールを起動して画像を保存して、サイトに添付して貼り付けるのはやや面倒。それだけでなく、サイト独自のレギュレーション(お題に沿ってイラストを付け加える形式、指定された色しか使ってはいけないなど)がある場合、ユーザーのペイントツールでそれを強いるのは不可能に近い。 そこで、サイト上</description>
    </item>
    
    <item>
      <title>Djangoで投稿したデータに対して編集・削除を行う【urls.pyを使用してビューに数値型の引数を与える】</title>
      <link>https://noauto-nolife.com/post/django-models-delete-and-edit/</link>
      <pubDate>Sun, 17 Oct 2021 10:44:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-delete-and-edit/</guid>
      <description>40分簡易掲示板を元に、forms.pyにてモデルを継承したフォームクラスを作り、その上で削除と編集を実装させる。 前提(forms.pyにてモデルを継承したフォームクラスを作る) モデルを継承したフォームクラスの作り方は『【Django】forms.pyでバリデーションをする【モデルを継承したFormクラス】』を参照。 bbs/forms.pyを作る。内容は下記。 from django import forms from .models import Topic class TopicForm(forms.ModelForm): class Meta: model = Topic fields = [ &amp;quot;comment&amp;quot;</description>
    </item>
    
    <item>
      <title>【データ分析】pandasの基本的な使い方、グラフ描画、ファイル読み書き、計算等【バックエンドにopenpyxlとmatplotlibを使う】</title>
      <link>https://noauto-nolife.com/post/startup-pandas-openpyxl-matplotlib/</link>
      <pubDate>Thu, 14 Oct 2021 12:47:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-pandas-openpyxl-matplotlib/</guid>
      <description>pandasでファイルの読み込み、演算、グラフ描画、ファイル書き込みの基本操作関係を記す。 前提 data.xlsx及びdata.csvの内容を下記とする。これをPythonのファイルと同じディレクトリに格納する。 ライブラリインストールのコマンドは下記。 pip install openpyxl pandas matplotlib pandasの使い方 CSVやエクセルのファイルをそのまま読み込んで分析できる。 ファイルの読み込み .read_csv()メソッドでCSVを読み</description>
    </item>
    
    <item>
      <title>CSS3とHTML5だけでモーダルダイアログを作る【JS不要】</title>
      <link>https://noauto-nolife.com/post/css3-modal-dialog/</link>
      <pubDate>Thu, 14 Oct 2021 07:15:41 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-modal-dialog/</guid>
      <description>モーダルダイアログもとどのつまり、単なる表示非表示なので、HTMLとCSSだけで再現できる。 checkboxとlabelタグを使えば良いだけの話である。 ソースコード まずHTML &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World test!!&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;label class=&amp;quot;modal_label&amp;quot; for=&amp;quot;modal_chk&amp;quot;&amp;gt;新規作成&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;modal_chk&amp;quot; class=&amp;quot;modal_chk&amp;quot; type=&amp;quot;checkbox&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;modal_body&amp;quot;&amp;gt; &amp;lt;label class=&amp;quot;modal_bg&amp;quot; for=&amp;quot;modal_chk&amp;quot;&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;quot;modal_content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 2つのlabelタグのfor属性はいずれもcheckboxのI</description>
    </item>
    
    <item>
      <title>【Django】要素数が同じモデルオブジェクトをDTLで一緒にループして表示させる【.annotate()やモデルクラスにメソッドを追加などが通用しない場合の対策】</title>
      <link>https://noauto-nolife.com/post/django-model-objects-for-in-zip/</link>
      <pubDate>Wed, 13 Oct 2021 15:22:14 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-model-objects-for-in-zip/</guid>
      <description>例えば、マイリストフォルダに保存されている、マイリスト動画。マイリストフォルダの一覧を表示している時に、フォルダ内の動画のサムネイル1つを表示させたい時、どうやって再現させましょうかと言うのが今回の課題。 こういう時は、zipとlistを使用して対処する他に、生成されたモデルオブジェクトを加工することで対処する。 この方法を使えば、複雑なORMを考えたり、モデルクラスにメソッドを追加したりするなどを考</description>
    </item>
    
    <item>
      <title>【Django】テンプレートからstaticディレクトリに格納したCSSやJSを読み込む【静的ファイル】</title>
      <link>https://noauto-nolife.com/post/django-static-file-settings/</link>
      <pubDate>Mon, 11 Oct 2021 15:03:30 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-static-file-settings/</guid>
      <description>Djangoビギナーが40分で掲示板アプリを作る方法では、Bootstrapのみ使用している。オリジナルの装飾を施したい場合、Djangoの静的ファイルの読み込みを使用するしか方法はない。 本記事では予め作っておいたCSSやJS等のファイルを読み込みする方法を記す。 settings.pyにて読み込みのパスを設定 settings.pyの末端にて、STATICFILES_DIRSを追加する。 # Static files (CSS, JavaScript, Images)</description>
    </item>
    
    <item>
      <title>Djangoで管理サイトを作り、投稿されたデータの読み・書き・編集・削除を行う【admin.py】</title>
      <link>https://noauto-nolife.com/post/django-admin/</link>
      <pubDate>Tue, 05 Oct 2021 07:34:27 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-admin/</guid>
      <description>Djangoではデフォルトで管理サイトというものが用意されている。 admin.pyに少し書き足して、管理ユーザーを作成するコマンドを打つだけで、簡単にデータの読み書きが実現できる。 ソースコードは40分Djangoから流用する。 admin.pyの編集 bbs/admin.pyを開いて下記のように編集する。 from django.contrib import admin from .models import Topic admin.site.register(Topic) モデルクラス、Topicをインポートして、adminに登録(register)す</description>
    </item>
    
    <item>
      <title>【Django】models.pyにフィールドを追加・削除する【マイグレーションできないときの原因と対策も】</title>
      <link>https://noauto-nolife.com/post/django-models-add-field/</link>
      <pubDate>Tue, 05 Oct 2021 06:45:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-add-field/</guid>
      <description>models.pyを操作していく上で難しいのが、フィールドの追加とマイグレーション。 特に、追加するフィールドによってはマイグレーションファイル作成時に警告が出ることがある。 本記事では警告が出る理由も含め、フィールドの追加方法も含めて解説する。ソースコードはDjangoビギナーが40分で掲示板アプリを作る方法を元にする。 デフォルト値ありのフィールドを追加する【警告なし】 まず、安全なデフォルト値ありの</description>
    </item>
    
    <item>
      <title>DjangoでHTTPリクエストのPOSTメソッドを送信する</title>
      <link>https://noauto-nolife.com/post/django-post-request/</link>
      <pubDate>Mon, 04 Oct 2021 07:54:13 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-post-request/</guid>
      <description>DjangoでHelloWorld【HttpResponse及びレンダリング】にて、HelloWorldをやった人向け。本記事はビュークラスとテンプレートを使用した場合を想定して解説する。 DjangoでHTTPリクエストのPOSTメソッドを送信する。これにより、データをリクエストボディに含ませることが可能になり、HTTPSを実装すれば投稿内容の暗号化も可能になる。 手順 views.pyのビュークラス</description>
    </item>
    
    <item>
      <title>Djangoでスクレイピング対策をする【MIDDLEWAREでUA除外、ランダムでHTML構造変化等】</title>
      <link>https://noauto-nolife.com/post/django-anti-scraping/</link>
      <pubDate>Sat, 02 Oct 2021 19:05:06 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-anti-scraping/</guid>
      <description>最近ではPythonのスクレイピング関係の書籍が増えてきて、誰でも簡単にスクレイピングできるようになってきている。 その影響か、私が管理しているサイトもしょっちゅうスクレイピングかと思われるアクセスがログから確認できる。 放置しているとさらにエスカレートし、ただの負荷にしかならないので、スクレイピングには対策が必要。本記事では、とりわけ私の得意なDjangoでその方法を記す。 MIDDLEWAREにPy</description>
    </item>
    
    <item>
      <title>Djangoで任意のHTTPレスポンス(ForbiddenやNotFoundなど)を返却する【HttpResponse subclasses】</title>
      <link>https://noauto-nolife.com/post/django-http-response/</link>
      <pubDate>Sat, 02 Oct 2021 18:56:03 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-http-response/</guid>
      <description>あまり需要が無いかも知れないが、状況によっては手動でHTTPResponseを指定して返却したい場合もあるだろう。 本記事ではよく使用すると思われるレスポンスをまとめる。 HttpResponseBadRequest from django.http import HttpResponseBadRequest from django.views import View class BbsView(View): def get(self, request, *args, **kwargs): return HttpResponseBadRequest(&amp;quot;bad&amp;quot;) index = BbsView.as_view() リクエストの一部が欠落している場合など、クライアント側のエラーに表示させる。 HttpResponseNotFound from django.http import HttpResponseNotFound from django.views import View class BbsView(View): def get(self, request, *args, **kwargs): return HttpResponseNotFound(&amp;quot;not found&amp;quot;) index = BbsView.as_view() 引数内に入れた内容をクライアントのブラウザにHTMLとして表示させる コ</description>
    </item>
    
    <item>
      <title>CloudinaryでPDF等の画像や動画以外のファイルをアップロードし、共有する方法【blocked for delivery】</title>
      <link>https://noauto-nolife.com/post/cloudinary-blocked-for-delivery/</link>
      <pubDate>Thu, 30 Sep 2021 09:11:38 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/cloudinary-blocked-for-delivery/</guid>
      <description>どうやらPDF等の画像や動画以外の一部のファイルは配信拒否されてしまうらしい。セキュリティ対策の一貫として行われているそうな。 しかし、PDFを共有する前提のウェブアプリであればただの足かせでしか無いし、ユーザー認証や管理者が管理をきちんとしていればセキュリティ的な事案はある程度は低減できる。 本記事ではCloudinaryを使用してPDFを配信する方法を記す。 対策 対策は至ってシンプル。Cloudin</description>
    </item>
    
    <item>
      <title>【Django】Heroku&#43;Cloudinaryの環境にアップロードしたファイルを参照する方法【MIMEとサイズ】</title>
      <link>https://noauto-nolife.com/post/django-deploy-heroku-cloudinary-file-reference/</link>
      <pubDate>Wed, 29 Sep 2021 15:45:48 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-heroku-cloudinary-file-reference/</guid>
      <description>クライアントがアップロードしたファイルをビュー側で参照するときがある。例えば、許可されていないMIMEのアップロード、ファイルサイズの確認など。 通常であれば、下記のようにすれば良い。 request.FILES[&amp;quot;document&amp;quot;] しかし、こんな参照をすると、Cloudinaryにはアップロードできてもファイルが壊れてしまう。PDF等の普通のファイルであれば問題はないが、mp4等の動画ファイルで発生している模様。 コード POSTメソッドだけ掲載。</description>
    </item>
    
    <item>
      <title>【Django】forms.pyでバリデーションをする【モデルを利用したFormクラス】</title>
      <link>https://noauto-nolife.com/post/django-forms-validate/</link>
      <pubDate>Wed, 29 Sep 2021 09:16:49 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-forms-validate/</guid>
      <description>『Djangoビギナーが40分で掲示板アプリを作る方法』で作った簡易掲示板はクライアントから受け取った値のチェックを行っていない。 モデルでは投稿できるコメントは2000文字以内であり。入力必須となっているが、開発用のSQLiteはそこまで判定できない。故にこういうことが起こる。 MySQLやPostgreSQL等の本番用のDBではDBが直接エラーを出す仕組みになるが、それでは使用しているDBが何かク</description>
    </item>
    
    <item>
      <title>Nginxで特定IPアドレスのリクエストを拒否する</title>
      <link>https://noauto-nolife.com/post/nginx-deny-ip-address/</link>
      <pubDate>Tue, 28 Sep 2021 11:20:12 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/nginx-deny-ip-address/</guid>
      <description>特定IPアドレスのリクエストを拒否したいのであれば、ロードバランサーやリバースプロキシなどのセキュリティ設定を書き換えれば済む話だが、環境によっては他のサービスなどに影響を及ぼす可能性もある。 そこで、Nginxの設定を書き換え、特定のサービスだけで特定のIPアドレスを使用したリクエストを拒否する方法をここに記す。 設定ファイルに追加する Nginxの設定ファイル( /etc/nginx/nginx.conf )に下記を追加する。 deny 192.168.XXX.XXX; /etc/n</description>
    </item>
    
    <item>
      <title>Raspberry Pi Zeroに搭載したNginxの限界を試す【curlコマンド】</title>
      <link>https://noauto-nolife.com/post/raspberypi-zero-limit-access/</link>
      <pubDate>Tue, 28 Sep 2021 10:20:02 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/raspberypi-zero-limit-access/</guid>
      <description>Raspberry Pi Zeroの性能は無料プランのEC2やHerokuとほぼ同じ。Raspberry Pi Zeroの限界を知れば、ある程度EC2やHerokuの限界が予測できる。今回はウェブサーバーとして仕立てたRaspberry Pi Zeroにcurlコマンドでリクエストを大量送信し、サーバーダウンするまでのデータをここに記す。 なお、この行為は自分が管理していないサーバーで行うと、普通にDos攻撃になってしまうので、宛先</description>
    </item>
    
    <item>
      <title>【jQuery】ボタン式の横スライダーを自作する【通販サイト・コンテンツ共有サイトなどに】</title>
      <link>https://noauto-nolife.com/post/javascript-carousel-origin-slider/</link>
      <pubDate>Sun, 26 Sep 2021 03:09:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-carousel-origin-slider/</guid>
      <description>通販サイトなどでよくある。横スクロール型のスライダーを作る。slick.jsなどを使えば簡単に実現できるが、かえって複雑なので、自作した。 ソースコード HTML。jQueryを読み込み、別途JavaScriptとCSSを読み込む。 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Hello World test!!&amp;lt;/title&amp;gt; &amp;lt;!--jquery読み込み--&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;preview_control_area&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;data_preview_area&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;data_preview_frame&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;data_preview_content&amp;qu</description>
    </item>
    
    <item>
      <title>DjangoをHeroku&#43;Cloudinary(基本無料ストレージ)の環境にデプロイする【ウェブアプリのデモを一般公開したい場合などに】</title>
      <link>https://noauto-nolife.com/post/django-deploy-heroku-cloudinary/</link>
      <pubDate>Sat, 25 Sep 2021 10:34:37 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-heroku-cloudinary/</guid>
      <description>Herokuにはクレジットカードを登録することで、Cloudinaryというアドオンを利用することができる。これがHerokuのストレージとして運用可能。 一部はDjangoをDEBUG=FalseでHerokuにデプロイする方法と内容が重複しているため、そちらを読んだ人向けに書く。 アップロードするコードはDjangoで画像及びファイルをアップロードする方法より流用。テンプレートのsrc属性、hre</description>
    </item>
    
    <item>
      <title>Nginxのログをawkコマンドを使用して調べる【crontabで特定の条件下のログを管理者へ報告】</title>
      <link>https://noauto-nolife.com/post/nginx-log-check-by-awk/</link>
      <pubDate>Thu, 23 Sep 2021 13:51:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/nginx-log-check-by-awk/</guid>
      <description>Nginxのログはスペース区切りで送信元IPアドレス、アクセス対象のURLなどが書かれてある。これはスペース区切りで文字を扱うことができるawkコマンドと相性が良い。 本記事では、awkコマンドを使用して、特定の条件下のログを報告したり、ログの情報を見やすくさせる方法を記す。 awkコマンドを使用して、表示する情報を絞る 基本。 cat access.log | awk &#39;{print $1}&#39; これで送信元IPアドレス(スペース区切りで1番目のデータ)が表示</description>
    </item>
    
    <item>
      <title>【Django】デプロイ後に管理サイトを管理者以外がアクセスできないようにする【UUID&#43;MIDDLEWAREによるURL複雑化とIPアドレス制限】</title>
      <link>https://noauto-nolife.com/post/django-admin-protect/</link>
      <pubDate>Wed, 22 Sep 2021 21:55:24 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-admin-protect/</guid>
      <description>Djangoの管理サイトのURLはデフォルトでは、admin/となっている。そのため、誰でも簡単に管理サイトにアクセスできる。しかもIDとパスワードのフォームしか表示されていないので、総当りすればいずれ突破されてしまう。 だからこそ、アクセス制限と推測されないURLというものが重要になってくる。本記事ではなるべくシステムに依存せず、Djangoのみで管理サイトの保護が完結する方法を記す。 方法論 以下の</description>
    </item>
    
    <item>
      <title>Nginxのログをチェックする、ログの出力設定を変更する</title>
      <link>https://noauto-nolife.com/post/nginx-log-check/</link>
      <pubDate>Tue, 21 Sep 2021 07:19:18 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/nginx-log-check/</guid>
      <description>事案が発生した時、まっさきに確認するべきがサーバーのログ。とりわけウェブサーバーのNginxのログ確認方法、設定方法をここに記す。 Nginxのログの見方 Nginxの設定ファイル(/etc/nginx/nginx.conf)にログのパスが書かれてある ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ログは/var/log/nginx/access.logに保管されてある事がわかる。中身はこんな感じ。 左から順にこうなっている。 送信元</description>
    </item>
    
    <item>
      <title>独自ドメインのサイトにreCAPTCHAを実装させる方法と仕組み【ボット対策】</title>
      <link>https://noauto-nolife.com/post/recaptcha-setting/</link>
      <pubDate>Sun, 19 Sep 2021 18:21:31 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/recaptcha-setting/</guid>
      <description>CAPTCHAとして特に名高いGoogleのreCAPTCHAを使用する。これで不正なアカウントの大量作成や、Selenium等のスクレイピングツールの使用をある程度制限させることができる。 reCAPTCHA実装までの流れ カードの登録を済ませたグーグルアカウントを用意 独自ドメインを取得してサイトに設定 グーグルアカウントからreCAPTCHAを使用する サイトにreCAPTCHAのscriptタグ、フ</description>
    </item>
    
    <item>
      <title>UUIDを生成するコマンドuuidgen【予測されたくないページのURL割り当て等】</title>
      <link>https://noauto-nolife.com/post/uuid-generate/</link>
      <pubDate>Sun, 19 Sep 2021 18:14:00 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/uuid-generate/</guid>
      <description>Ubuntuであれば、下記コマンドを実行するだけで自動的にUUIDが生成される。 uuidgen 用途 秘匿する必要のあるページ(管理サイト等)にURLとして割り当てることで、総当たりでヒットされにくくなる。 UUIDが重複する確立は途方もなく低いので、他のセキュリティ対策ができない場合の代替案として有効であると思われる。 例えば、sedコマンドなどを使用して、Djangoのurls.pyから管理サイトを割り当てている</description>
    </item>
    
    <item>
      <title>リモートサーバーのデータを自動的にバックアップする方法論【scp&#43;crontab】</title>
      <link>https://noauto-nolife.com/post/shellscript-auto-backup/</link>
      <pubDate>Sun, 19 Sep 2021 18:12:35 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/shellscript-auto-backup/</guid>
      <description>手順 crontabを使って、一定時間おきにリモートサーバーがバックアップを取る crontabを使って、一定時間おきに任意の端末がscpでリモートサーバーのバックアップファイルをDL crontabを使って、一定時間おきにリモートサーバーがバックアップしたデータを削除 方法 例えば、Djangoであればこうなる。 リモートサーバーの/etc/crontabに以下の設定を施す。 00 * * * * ubuntu cd ~/Document/django/ &amp;amp;&amp;amp; python3 manage.py dumpdata [任意の</description>
    </item>
    
    <item>
      <title>シェルスクリプトでウェブサーバーの応答不能・ステータスコードをチェックして記録・通知する【pingとcurl、即メール送信にも有効】</title>
      <link>https://noauto-nolife.com/post/shellscript-server-checker/</link>
      <pubDate>Sun, 19 Sep 2021 08:51:18 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/shellscript-server-checker/</guid>
      <description>サーバーが応答不能になった時、すぐに対処できるよう、通知機能が欲しい。そういうときのシェルスクリプト。 pingで応答不能をチェックする #! /bin/bash while true ; do ping -c 1 192.168.11.99 rc=$? if [[ $rc -eq 0 ]] ; then echo &amp;quot;正常です&amp;quot; else echo &amp;quot;失敗しました&amp;quot; fi sleep 1 done 後は『正常です』『失敗しました』のいずれかに任意の処理を書き込む。 curlで応答不能をチェックする curlはHTTPのステータスコードも手に入るの</description>
    </item>
    
    <item>
      <title>【Laravel】GitHubにプッシュする時.gitignoreに追加する必要のあるファイル、ディレクトリ</title>
      <link>https://noauto-nolife.com/post/laravel-gitignore-add/</link>
      <pubDate>Sat, 18 Sep 2021 11:11:14 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-gitignore-add/</guid>
      <description>GitHubにプッシュする時、.gitignoreに追加する必要のあるファイル、ディレクトリをここにまとめる。 そんなものはどうでも良いから、もともとあったものと、追加したものを含めた完全版を見せてくれと思う人は、ページ末尾の結論へ。 対象に追加するべき、ファイル *.log *.sqlite .htaccess .logには開発用サーバーで動かしたログが残る。.sqliteは言わずもがなデータが残っている。 対象に追加するべき、ディレクトリ /storage /config /</description>
    </item>
    
    <item>
      <title>【Laravel】Sqliteのデータベースファイルをワンライナーで再生成する【findコマンド&#43;-exec評価式&#43;alias】【migrate:fresh】</title>
      <link>https://noauto-nolife.com/post/laravel-database-regenerate/</link>
      <pubDate>Sat, 18 Sep 2021 08:42:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-database-regenerate/</guid>
      <description>前々から思っていた。マイグレーションミスってDBごと消してマイグレーションファイルを修正したい場合、DBのファイルを探して削除するのは面倒だと。 プロジェクトのディレクトリで下記コマンドを実行する。 find ./database/ -name &amp;quot;database.sqlite&amp;quot; -exec rm &amp;quot;{}&amp;quot; \; -exec touch &amp;quot;{}&amp;quot; \; bashのaliasに登録すれば上記コマンドをさらに短くできる。 alias laravel-dbrefresh=&#39;find ./database/ -name &amp;quot;database.sqlite&amp;quot; -exec rm &amp;quot;{}&amp;quot; \; -exec touch &amp;quot;{}&amp;quot; \;&#39; このコマンドの注意点は2つある。 1つ目はLaravelプロジェクト直下に移動して実行するこ</description>
    </item>
    
    <item>
      <title>【Django】settings.pyのSECRET_KEYを再発行(リジェネレート)する【alias登録で即生成・即実装からの再起動】</title>
      <link>https://noauto-nolife.com/post/django-secret-key-regenerate/</link>
      <pubDate>Fri, 17 Sep 2021 11:19:11 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-secret-key-regenerate/</guid>
      <description>うっかり、SECRET_KEYをバージョン管理対象に含ませてしまった。このままではクラウドサーバーにデプロイしたSECRET_KEYが予測され、CSRFトークン等が機能不全になってしまう。 そんな時に備えておきたい、SECRET_KEYの再発行の方法を解説する。 ソースコード Qiitaより拝借。 from django.core.management.utils import get_random_secret_key secret_key = get_random_secret_key() text = &#39;SECRET_KEY = \&#39;{0}\&#39;&#39;.format(secret_key) print(text) 実行すると、 SECRET_KEY = &#39;07y^y0#_7b74jy)d6z0lu5*r$#azfyt1*1f+g1-3w+l@&amp;amp;hs^2!&#39; 等の文言が出てくる。 aliasに登録して、どこでも再発行できるよ</description>
    </item>
    
    <item>
      <title>【Laravel】コマンドからマイグレーションファイルを立ち上げる時、こうすればうまく行く【ワイルドカードとTabキー】</title>
      <link>https://noauto-nolife.com/post/laravel-migrations-files-detect/</link>
      <pubDate>Thu, 16 Sep 2021 14:55:01 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-migrations-files-detect/</guid>
      <description>コマンドからマイグレーションファイルを立ち上げる時、わざわざ日付を手入力しながらやっていると、時間がかかりすぎる。 そこで、ワイルドカードとTabキーの補正を使うことで特定する。例えば、2014_10_12_000000_create_users_table.phpであれば vi ./database/migrations/*create_users* と打って、この状態でTabキーを押す。これで vi ./database/migrations/2014_10_12_000000_create_users_table.php こんなふうになる。もっとも、統合開発環境を使えば、マウスダブルクリックでこん</description>
    </item>
    
    <item>
      <title>【Django&#43;Sendgrid】サーバー処理中(ビュー、独自コマンド)に通知メール(To,CC,BCC)を送信する</title>
      <link>https://noauto-nolife.com/post/django-sendgrid-processing/</link>
      <pubDate>Wed, 15 Sep 2021 07:48:47 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-sendgrid-processing/</guid>
      <description>DjangoでSendgridを実装させる方法【APIキーと2段階認証を利用する】で解説したとおり、SendgridのAPIキーをsettings.pyに書けばallauthでメール送信ができる。 だが、サーバーの処理中(ビューやmanage.py系の独自コマンド)でメールを送信するにはsettings.pyのメール設定を読み込む必要がある。 ソースコード まず、前回と同様にsettings.pyにてA</description>
    </item>
    
    <item>
      <title>サーバーを本格的に運用するようになったらやること・守ること</title>
      <link>https://noauto-nolife.com/post/startup-server-manage/</link>
      <pubDate>Tue, 14 Sep 2021 06:54:42 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-server-manage/</guid>
      <description>圧倒的に人手不足な組織でありがちなのが、『開発とデプロイができるならサーバー管理もできるだろう』と言わんばかりに経験も無いのにサーバー管理まで任されること。 そんな時に一通りチェックしておくと良いものを列挙する。 事前対策編【予防・抑止】 OSにインストールされているパッケージのアップデート(更新) OSにインストールされているパッケージは問題がなければ定期的にアップデートしておく。 sudo apt update &amp;amp;&amp;amp; sudo apt -y upgrade &amp;amp;&amp;amp; sudo apt</description>
    </item>
    
    <item>
      <title>【形態素解析】DjangoとJUMAN&#43;&#43;を使ってトレンドワード(名詞のみ)を表示する【定期実行で1時間以内に投稿された内容を学習などに】</title>
      <link>https://noauto-nolife.com/post/django-jumanpp-trend/</link>
      <pubDate>Mon, 13 Sep 2021 19:42:36 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-jumanpp-trend/</guid>
      <description>Djangoの独自コマンドの作成とAIを組み合わせることで、ウェブアプリ上でAIの恩恵を受けることができる。 とりわけ自然言語処理関係であれば、日本語の知識さえあれば簡単に試すことができるだろう。 本記事では形態素解析ツールとして名高い京都大学のJUMANをDjango上で動かし、その結果をウェブページとして表示させる。 作り方 モデルを作る トピックモデルとトレンドモデルの2つを作る。 from django.db import models from django.utils import timezone class Topic(models.Model):</description>
    </item>
    
    <item>
      <title>【Django&#43;AWS】独自ドメインを割り当てHTTPS通信を実現した状態で、EC2(Ubuntu&#43;Nginx)へデプロイする</title>
      <link>https://noauto-nolife.com/post/django-deploy-ec2-origin-domain/</link>
      <pubDate>Mon, 13 Sep 2021 08:19:27 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-ec2-origin-domain/</guid>
      <description>既に、【AWS】EC2にムームドメインで取得した独自ドメインを割り当て、HTTPS通信を行う【Route 53 + Certificate Manager + ロードバランサ(ELB)】の内容を終え、独自ドメインでHTTPS通信が可能な状態である前提で解説する。 一部、DjangoをAWSのEC2(Ubuntu)にデプロイすると内容が重複しているが、AWS側の設定は一切行わない。書き換えが必要なのは、settings.pyのALLOWED_HO</description>
    </item>
    
    <item>
      <title>DjangoでサイトにアクセスしたクライアントのIPアドレス、ユーザーエージェント(UA)、プロバイダ名(ゲートウェイ名)を表示する【犯罪・不正行為の抑止とセキュリティ】</title>
      <link>https://noauto-nolife.com/post/django-show-ip-ua-gateway/</link>
      <pubDate>Mon, 13 Sep 2021 07:21:22 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-show-ip-ua-gateway/</guid>
      <description>不正行為や犯罪などの抑止力として効果を発揮する、クライアントのUA、IPアドレス及びプロバイダ名の表示。その方法をここに記す。 グローバルIPアドレスを表示 ビュー側で以下のように取得する。 ip_list = request.META.get(&#39;HTTP_X_FORWARDED_FOR&#39;) if ip_list: ip = ip_list.split(&#39;,&#39;)[0] else: ip = request.META.get(&#39;REMOTE_ADDR&#39;) もし、ip_listに記録されたIPアドレスが複数ある場合は、ネットワーク構成などを考慮して添字を指定する。 ユーザーエージェント(UA)を表示 ビュー側で以下のように取得する。 user_agent = request.META.get(&#39;HTTP_USER_AGENT&#39;) リクエスト</description>
    </item>
    
    <item>
      <title>【Django】SQLiteでも特定フィールドに対してのdistinctっぽい事(重複除去)を行う【通常はPostgreSQLのみ有効】</title>
      <link>https://noauto-nolife.com/post/django-distinct-on-sqlite/</link>
      <pubDate>Fri, 10 Sep 2021 11:21:51 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-distinct-on-sqlite/</guid>
      <description>以下のクエリはPostgreSQLのみ有効。 Topic.objects.all().distinct(&amp;quot;comment&amp;quot;) このように.disitinct()に引数としてフィールド名を指定できるのは、PostgreSQLだけ。.values()を使う方法もあるが、モデルオブジェクトでなくなる時点で汎用性に乏しい。 そこで、重複するフィールドを除外したいのであれば、こうする。 topics = Topic.objects.all().order_by(&amp;quot;-dt&amp;quot;) d_list = [] n_list = [] for t in topics: if t.comment in d_list: continue d_list.append(t.comment) n_list.append(t) context[&amp;quot;topics&amp;quot;] = n_list これで重複するコメントを除外して新しいモデルオブジェクトの</description>
    </item>
    
    <item>
      <title>【Django】カスタムテンプレートタグ(フィルタ)でリンク付きのハッシュタグを実現する。【#から始まる正規表現】</title>
      <link>https://noauto-nolife.com/post/django-custom-template-tags-hashtags/</link>
      <pubDate>Sun, 05 Sep 2021 17:30:49 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-custom-template-tags-hashtags/</guid>
      <description>Djangoのカスタムテンプレートタグ(フィルタ)を使うことでTwitterやyoutube等のハッシュタグを実現できる。 だが、ちょっとでも間違えると、簡単にXSS脆弱性を生み出してしまう可能性があるため、十分注意して実装する。 方法論 まず、普通のDTLはXSS対策のため、&amp;lt;や&amp;gt;等の特殊記号をエスケープしている。ハッシュタグを実現させるのであれば、まずはこれを除外する。そのため、mark</description>
    </item>
    
    <item>
      <title>【AWS】EC2にムームドメインで取得した独自ドメインを割り当て、HTTPS通信を行う【Route 53 &#43; Certificate Manager &#43; ロードバランサ(ELB)】</title>
      <link>https://noauto-nolife.com/post/ec2-origin-domain-https/</link>
      <pubDate>Sun, 05 Sep 2021 15:32:11 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ec2-origin-domain-https/</guid>
      <description>タイトルの通り。 手順 EC2のインスタンスを作る セキュリティグループを書き換える ElasticIPを割り当てる Route53に独自ドメインを割り当てる SSHで独自ドメインでログインしてみる Certificate Managerとロードバランサを使ってHTTPS通信を実現させる EC2のインスタンスを作る まず、EC2のインスタンスを作る。インスタンスの作り方はDjangoをAWSのEC2(Ubuntu)にデプロイするに倣う。</description>
    </item>
    
    <item>
      <title>AWSでなるべくお金がかからないようにウェブアプリを運用する方法</title>
      <link>https://noauto-nolife.com/post/aws-do-not-spend-money/</link>
      <pubDate>Sun, 05 Sep 2021 11:45:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/aws-do-not-spend-money/</guid>
      <description>気づいたらAWSの請求額が数百ドルを超えてた。ということはよくある。 そこで、なるべくお金がかからないように運用する方法を即効性がある運用編、開発編、セキュリティ編、その他編に分けて解説する。 運用編 基本的に運用編に書いてある内容を実践すれば、ほぼ課金されることはない。マウスクリックだけで簡単に実践できるので、ぜひともやっておきたい。 インスタンスを多重起動しない まず、前提としてEC2やRDS等のインス</description>
    </item>
    
    <item>
      <title>【Django】kwargsを使ってビューを使いまわす【urls.py&#43;views.py】</title>
      <link>https://noauto-nolife.com/post/django-args-kwargs-view-recycle/</link>
      <pubDate>Thu, 02 Sep 2021 19:20:58 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-args-kwargs-view-recycle/</guid>
      <description>kwargsを使うことで似たような処理のビューを使いまわしできる。これによりビューのコード行数を大幅に削減可能。 状況 例えば、私のブログのように、記事一覧や記事本文を表示する左側のメインエリア、カテゴリやタグなどを表示するサイドエリア、2つのエリアがあったとする。 つまり、カテゴリやタグなどの情報は常に表示し、URLによってメインエリアの情報を切り替えたい場合、urls.pyはどうなるだろうか？ すぐに</description>
    </item>
    
    <item>
      <title>【Django】実行されるクエリ(SQL)を確認する【.query】</title>
      <link>https://noauto-nolife.com/post/django-models-query/</link>
      <pubDate>Thu, 02 Sep 2021 13:20:50 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-query/</guid>
      <description>備忘録として。複雑なORMになった時、クエリを確認する時は、末尾に.query属性を使う。print文で出力できる。 print(Topic.objects.all().query) #出力結果 SELECT &amp;quot;topic&amp;quot;.&amp;quot;id&amp;quot;, &amp;quot;topic&amp;quot;.&amp;quot;comment&amp;quot; FROM &amp;quot;topic&amp;quot; 表示はされるものの、SQLが最適化されているわけではない点に注意。あくまでも挙動がおかしいときの確認用として。 【補足】生のSQLを実行する 出力した生のSQLを少しいじって実行させることもできる。SQLの末尾を示す;は不要。 Topic.objects.raw(&amp;quot;SELECT * FROM topic&amp;quot;) SQLインジェクションには十分注</description>
    </item>
    
    <item>
      <title>【Django】Windowを使ってレコードの累計値を計算して出力【売上の累計表示、小計(累積)表示などに有効】</title>
      <link>https://noauto-nolife.com/post/django-models-window/</link>
      <pubDate>Wed, 01 Sep 2021 18:23:58 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-window/</guid>
      <description>日付でソートして売上を表示するとして、その日付になるまでの累計(累積)売上金額を表示したいとする。 そういう時はWindowを使えば、累計(累積)値を表示させることができる。 ソースコード 前回の月ごとに売上を表示するコードから流用。ビューとテンプレートの処理だけ書き換える。 from django.db.models import Sum,Window,F menus = Menu.objects.annotate(accumulate=Window(Sum(&amp;quot;amount&amp;quot;), order_by=[ F(&amp;quot;date&amp;quot;).desc(),F(&amp;quot;id&amp;quot;).asc() ] ) ).values(&amp;quot;id&amp;quot;,&amp;quot;name&amp;quot;,&amp;quot;date&amp;quot;,&amp;quot;amount&amp;quot;,&amp;quot;accumulate&amp;quot;).order_by(&amp;quot;-date&amp;quot;,&amp;quot;id&amp;quot;) 累積計算時(Windowの中)のorder_byとvaluesを実行した後のorder_byは揃えなければ</description>
    </item>
    
    <item>
      <title>【Django】年、月、日単位でデータをファイリングする時はTruncを使用する【月ごとの売上、個数などの出力に有効】</title>
      <link>https://noauto-nolife.com/post/django-models-trunc/</link>
      <pubDate>Wed, 01 Sep 2021 17:39:04 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-trunc/</guid>
      <description>ブログなどでよくある、月別アーカイブ。経理でよくある、月ごとの売上記録、年ごとの収支。そういった計算をする時、annotateとTruncを使えば1行で出力できる。 ソースコード モデルがこんな感じ。 from django.db import models class Menu(models.Model): class Meta: db_table = &amp;quot;menu&amp;quot; name = models.CharField(verbose_name=&amp;quot;メニュー名&amp;quot;,max_length=2000) date = models.DateField(verbos</description>
    </item>
    
    <item>
      <title>【jQuery】HTML、CSS、JS合わせて100行以内でカルーセルを自作する【自動スライド】</title>
      <link>https://noauto-nolife.com/post/javascript-carousel-origin/</link>
      <pubDate>Tue, 31 Aug 2021 14:22:18 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-carousel-origin/</guid>
      <description>カルーセルと言えば、slick.js等のライブラリがあるが、たかだか自動的にスライドするだけのシンプルなカルーセルをサイトの一部分に実装させるためだけにライブラリをインストールさせるのはやや大げさだ。 そこで、今回はカルーセルをjQueryを使用した上で自作する。書く必要のあるコードはHTMLが約30行、CSSが約20行、JSが約40行の合計100行足らずで実現できる。 ソースコードと解説 HTML。C</description>
    </item>
    
    <item>
      <title>【Django】MIDDLEWAREを作って、常にデータを表示する【requestにモデルオブジェクトを属性として追加する】</title>
      <link>https://noauto-nolife.com/post/django-create-middleware-add-request-attribute/</link>
      <pubDate>Sun, 29 Aug 2021 20:56:46 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-create-middleware-add-request-attribute/</guid>
      <description>例えば、サイトのどのページにアクセスしても表示させたいデータがあるとしよう。サイトのトップバーあたりにサイトの更新履歴(ニュース)のようなものをスライドして表示させたい時などがそうだ。サイトのニュースだから当然、誰でも見れる仕組みにする。 こういうどのページでも常時表示しなければならないデータがある時、いかにして手を打つか。当然、更新履歴は管理サイトから追加していくものだから、モデルを参照しなければ</description>
    </item>
    
    <item>
      <title>【Django】MIDDLEWAREを自作、未ログインユーザーにメディアファイルへのアクセスを拒否する【settings.py】</title>
      <link>https://noauto-nolife.com/post/django-create-middleware/</link>
      <pubDate>Sat, 28 Aug 2021 17:17:41 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-create-middleware/</guid>
      <description>未ログインユーザーに対して動画や画像等のメディアファイルは公開したくない。しかし、何も対策をしていないとメディアファイルは誰でも見放題の状態になってしまう。 たとえそれが有料コンテンツであったとしても、mp4やpngのリンクを直接アクセスするだけで誰でも見れる。これではユーザーは離反する。 そこで、どんなリクエストでも必ず通るDjangoのMIDDLEWAREを利用する。本記事ではMIDDLEWARE</description>
    </item>
    
    <item>
      <title>【Django】同一人物による工作(再生数の水増しなど)をいかにして防ぐか、方法と対策【unique_together,Recaptcha,UA,IPアドレス等】</title>
      <link>https://noauto-nolife.com/post/django-same-user-operate-prevent/</link>
      <pubDate>Thu, 26 Aug 2021 12:24:05 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-same-user-operate-prevent/</guid>
      <description>例えば、動画サイトを運営していて、動画の再生回数を記録する機能を実装したとする。 動画の検索で、再生数の多い順に並び替えて表示する機能が既にある場合、再生回数の水増しによって、全く面白くない動画が検索の上位に表示されるなどの問題が発生する。 それだけでなく、再生回数の水増しを放置してしまうと、ランキングも荒れ果て、結果的にユーザーが離反してしまう恐れもある。(※ただし、ランキングの集計方法によってある</description>
    </item>
    
    <item>
      <title>Djangoで中間テーブルありの多対多フィールドを使用したモデルに良いね・悪いねする【related_nameとカスタムユーザーモデル】</title>
      <link>https://noauto-nolife.com/post/django-m2m-through-good-bad/</link>
      <pubDate>Tue, 24 Aug 2021 13:03:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-m2m-through-good-bad/</guid>
      <description>状況 以前作った、【Django】Reverse accessor for &amp;lsquo;Topic.good&amp;rsquo; clashes with reverse accessor for &amp;lsquo;Topic.user&amp;rsquo;.というエラーの対処【Topicに対する良いね、多対多中間フィールドあり】では、モデルはできあがっているものの、肝心のトピックに良いね悪いねするビューの処理、テンプレートの描画までは解説していない。 そこで、今回はトピックに良いね悪いねをする方法を解説する。 bbs/models.pyとuse</description>
    </item>
    
    <item>
      <title>サーバー版Ubuntu 20.04のインストールから設定、SSHログインまで【固定IPアドレス、タイムゾーン、bashrcなど】</title>
      <link>https://noauto-nolife.com/post/startup-ubuntu2004-server/</link>
      <pubDate>Sat, 21 Aug 2021 17:39:30 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-ubuntu2004-server/</guid>
      <description>デスクトップ版のUbuntuとサーバー版のUbuntuは完全に別物である。 デスクトップ版はGUIでラクラク固定IPアドレス設定できたり、作業しながらブラウザで検索できる一方で、サーバー版のUbuntuはただ無機質なターミナルが全画面を覆っているだけである。 本記事ではインストールからIPアドレスの固定化、bashの設定やタイムゾーン設定、別端末からSSHでログインするまでを解説する。 対象読者は、既に</description>
    </item>
    
    <item>
      <title>【Django】Reverse accessor for &#39;Topic.good&#39; clashes with reverse accessor for &#39;Topic.user&#39;.というエラーの対処【Topicに対する良いね、多対多中間フィールドあり】</title>
      <link>https://noauto-nolife.com/post/django-m2m-through-reverse-accessor-error/</link>
      <pubDate>Thu, 19 Aug 2021 10:41:05 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-m2m-through-reverse-accessor-error/</guid>
      <description>このエラーが発生する状況がやや複雑なので、状況から解説。 このエラーが起こる状況 まず、カスタムユーザーモデルを実装している。 モデルの中身は【Django】allauthとカスタムユーザーモデルを実装した簡易掲示板を作る【AbstrastBaseUser】から丸ごと流用。 そして、アプリのモデル。簡易掲示板に良いねと悪いね機能を実装している。 多対多の中間テーブルを手動で定義している。詳細は【django</description>
    </item>
    
    <item>
      <title>CSS3とHTML5のタブシステムをtransitionでアニメーション表示に仕立てる</title>
      <link>https://noauto-nolife.com/post/css3-tab-system-transition/</link>
      <pubDate>Sat, 14 Aug 2021 12:05:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-tab-system-transition/</guid>
      <description>CSS3とHTML5だけでタブを作り、複数のページを表示させる【JS不要】で作ったタブシステムは瞬間的に切り替わるので、少し野暮ったい。 他にアニメーションを多用したサイトであれば、タブシステムも同様にアニメーションを実装するべきかと思われる。そこで本記事ではその解説を行う。 タブシステムの基本形(改修) 従来型は、スマホ表示になると、折り返して表示していたので、横スクロールに仕立てる。 まずHTML。 &amp;lt;!DOCTYPE</description>
    </item>
    
    <item>
      <title>FormDataをformタグではなく、オブジェクトにキーと値をセットした上でAjax送信</title>
      <link>https://noauto-nolife.com/post/javascript-formdata-obj-set/</link>
      <pubDate>Sat, 14 Aug 2021 11:48:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-formdata-obj-set/</guid>
      <description>タイトルの説明。 通常、Ajaxでサーバーにリクエストを送信する時、下記のようにFormDataクラスを使用して送信する。 let form_elem = &amp;quot;#form_area&amp;quot;; let data = new FormData( $(form_elem).get(0) ); let url = $(form_elem).prop(&amp;quot;action&amp;quot;); let method = $(form_elem).prop(&amp;quot;method&amp;quot;); $.ajax({ url: url, type: method, data: data, processData: false, contentType: false, dataType: &#39;json&#39; }).done( function(data, status, xhr ) { //Done }).fail( function(xhr, status, error) { //Fail }); しかし、送信したいデータがいつもこのようにformタグで囲まれているとも限らない。 そこで、FormDataクラスに引数を入れずにオブジェクトを作り、オブジェクトにキーと値をセットしてAja</description>
    </item>
    
    <item>
      <title>Djangoのモデルに独自メソッドを追加、テンプレートに表示【フィールド間の計算、他モデルの値の表示などに有効】</title>
      <link>https://noauto-nolife.com/post/django-models-add-method-template-attribute/</link>
      <pubDate>Sat, 07 Aug 2021 16:28:40 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-add-method-template-attribute/</guid>
      <description>モデルにメソッドを追加することで、テンプレート側から属性値として参照することができる。 from django.db import models class Topic(models.Model): comment = models.CharField(verbose_name=&amp;quot;コメント&amp;quot;,max_length=2000) time = models.IntegerField(verbose_name=&amp;quot;活動時間(分)&amp;quot;,default=0) level = models.IntegerField</description>
    </item>
    
    <item>
      <title>DjangoでDBへデータ格納時(save)、削除時(delete)に処理を追加する【models.py、forms.py、serializer.pyのメソッドオーバーライド】</title>
      <link>https://noauto-nolife.com/post/django-models-save-delete-override/</link>
      <pubDate>Sat, 07 Aug 2021 16:20:24 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-save-delete-override/</guid>
      <description>例えば、クライアントがお問い合わせフォームに入力して送信した時、DBに内容を保存すると同時に管理者に内容をメールで送信したい。そんなことは無いだろうか？ しかも、その保存のビューの処理が各所に分散していて、一つ一つ書いていくのが面倒な時。こういう時はモデルクラスのsaveメソッドを書き換える(オーバーライドする)ことで対処できる。 オーバーライドの方法 公式からコードを拝借。 models.pyにて、下記</description>
    </item>
    
    <item>
      <title>Djangoで数値型もしくはUUID型等のフィールドに、クライアント側から未入力を許可するにはnull=Trueとblank=Trueのオプションを</title>
      <link>https://noauto-nolife.com/post/django-models-uuid-int-null/</link>
      <pubDate>Sat, 07 Aug 2021 10:53:38 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-uuid-int-null/</guid>
      <description>タイトルの通り。 基本的な話として、blankとは空文字列のこと。だから文字列型扱いになる。一方でnullはPythonで言うとNoneであり、型は無い。 よってblank=Trueのフィールドオプションが許されるのは、CharField等の文字列型系のフィールドのみで、IntegerFieldやUUIDFieldには許されない。 と思われがちだが、それは半分誤解である。実は下記の指定は正しい。 dt = mo</description>
    </item>
    
    <item>
      <title>Javascriptを使ってCSVを生成してダウンロードする</title>
      <link>https://noauto-nolife.com/post/javascript-download-csv/</link>
      <pubDate>Sat, 31 Jul 2021 20:43:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-download-csv/</guid>
      <description>CSVの生成とダウンロードであれば、あえてサーバーサイドでやらなくても、JavaScriptだけでことは足りる。 ソースコード 下記関数を実行すれば良い。 //現在スタックされているデータをCSVに変換してダウンロードする function create_csv(){ //文字列型で二次元配列のデータ data = [ [&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;], [&amp;quot;A1&amp;quot;,&amp;quot;B1&amp;quot;,&amp;quot;C1&amp;quot;], [&amp;quot;A2&amp;quot;,&amp;quot;B2&amp;quot;,&amp;quot;C2&amp;quot;], [&amp;quot;A3&amp;quot;,&amp;quot;B3&amp;quot;,&amp;quot;C3&amp;quot;], [&amp;quot;A4&amp;quot;,&amp;quot;B4&amp;quot;,&amp;quot;C4&amp;quot;], ] console.log(data); //作った二次元配列をCSV文字列に直す。 let csv_string = &amp;quot;&amp;quot;; for (let d of data) { csv_string += d.join(&amp;quot;,&amp;quot;); csv_string += &#39;\r\n&#39;; } //ファイル名の指定 let file_name = &amp;quot;test.csv&amp;quot;; //CSVのバイナリデー</description>
    </item>
    
    <item>
      <title>Djangoでマイグレーションした時、『Auto-created primary key used when not defining a primary key type』と警告される場合の対策</title>
      <link>https://noauto-nolife.com/post/django-models-autofield-warnings/</link>
      <pubDate>Sat, 31 Jul 2021 20:15:18 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-autofield-warnings/</guid>
      <description>マイグレーションした時、下記のようなエラーが出る。 これは主キーを定義せず、自動的に作っているからである。 対策は下記をsettings.pyに追加するだけ。 DEFAULT_AUTO_FIELD=&#39;django.db.models.AutoField&#39; 結論 主キーをUUIDにしている場合、発生しない警告文である。 Django-allauth等のDjango用のライブラリを使っている場合も、ライブラリの中にモデルが埋まっており、対策をしない限り、このような警告文が出る。 参照元 https://stackoverflow.com/questions/66971594/auto-create-primary-key-used-when-not-defining-a-primary-key-type-warning-in-dja</description>
    </item>
    
    <item>
      <title>Djangoで主キーのリスト型を作り、合致するレコードを検索する【values_list &#43; filter】</title>
      <link>https://noauto-nolife.com/post/django-id-list-filter/</link>
      <pubDate>Sat, 31 Jul 2021 16:36:00 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-id-list-filter/</guid>
      <description>例えば、複数のレコードのIDを検索して削除したい場合、下記のように記述する。 result = Topic.objects.filter(id__in=[1,2,3]) print(result) #idが1,2,3のデータが表示される。 これがリスト型のIDを使用したIN句である。 ちなみに、検索結果からIDのリストを作るには、下記のようにする。 result = list(Topic.objects.all().values_list(&amp;quot;id&amp;quot;,flat=True)) print(result) #[1, 2, 3, 4, 5, 6, 7, 8] idだけカラムを指定し、flat=Trueとすることで数値型のリストを作ることができる。 参照元 https://docs.djangoproject.com/en/3.2/ref/models/querysets/#in https://docs.djangoproject.com/en/3.2/ref/models/querysets/#values-list</description>
    </item>
    
    <item>
      <title>Djangoで複数の外部キーに対応したフィールドの個数をカウントする【annotate(Count)&#43;DISTINCT】</title>
      <link>https://noauto-nolife.com/post/django-foreign-count-distinct/</link>
      <pubDate>Sat, 31 Jul 2021 16:30:47 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-foreign-count-distinct/</guid>
      <description>【Django】外部キーに対応したデータの個数をカウントして表示【リプライ・コメント数の表示に有効】【annotate+Count】から annotateで外部キーで繋がっているコメント数をカウントしてフィールドを追加するには下記のようにすれば良い。 from django.db.models import Count Video.objects.annotate( num_comments=Count(&amp;quot;videocomment&amp;quot;) ).all().order_by(&amp;quot;-dt&amp;quot;) Countの第一引数に外部キーで繋がっているモデルクラスの小文字を文字列型で指定する。 しかし、マイリスト数、良いねの数など複数の外部キーで</description>
    </item>
    
    <item>
      <title>DjangoをS3(AWS)ストレージ付きのHerokuにデプロイする</title>
      <link>https://noauto-nolife.com/post/django-deploy-heroku-s3/</link>
      <pubDate>Sat, 31 Jul 2021 15:59:46 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-heroku-s3/</guid>
      <description>Herokuで画像などのファイルをアップロードしたい時、別途ストレージを用意する必要がある。 特に代表的なのがAWSのS3をストレージとする方法。 既に解説記事があるので、S3の設定関係はDjangoをEC2(Ubuntu)、RDS(PostgreSQL)、S3の環境にデプロイをするを参照。 コードはDjangoで画像及びファイルをアップロードする方法から流用する。 Herokuデプロイの詳しい流れは、D</description>
    </item>
    
    <item>
      <title>Djangoの管理サイト(admin)のフォームをforms.pyを使用してカスタムする【文字列入力フォームをtextareaタグで表現】</title>
      <link>https://noauto-nolife.com/post/django-admin-custom-form/</link>
      <pubDate>Sat, 31 Jul 2021 15:57:27 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-admin-custom-form/</guid>
      <description>管理サイトのフォームはとりわけ何もしなければ、registerするモデルフィールドに依存する。 つまり、CharFieldの場合、inputタグtype=&amp;quot;text&amp;quot;が自動的に管理画面のフォームに挿入される。 そのため、何もしなければフィールドオプションがmax_length=2000でも1行のテキストボックスでしか入力できない。 改行もできなければ全体を確認することも困難な管理画面</description>
    </item>
    
    <item>
      <title>DjangoをEC2(Ubuntu)、RDS(PostgreSQL)、S3の環境にデプロイをする</title>
      <link>https://noauto-nolife.com/post/django-deploy-ec2-rds-s3/</link>
      <pubDate>Mon, 26 Jul 2021 17:59:20 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-ec2-rds-s3/</guid>
      <description>DjangoをAWSのEC2(Ubuntu)にデプロイするの続編。EC2にデプロイした後、RDS、S3を使って、さらに大型のウェブアプリを動作させる。 本記事ではRDS(PostgreSQL)、S3のセットアップを中心に解説をする。基本的なEC2へのデプロイの流れは上記記事を確認するべし。 RDS(PostgreSQL)の設定 流れ ダッシュボードからRDSのインスタンス生成 セキュリティグループの設定(E</description>
    </item>
    
    <item>
      <title>DjangoをAWSのEC2(Ubuntu)にデプロイする</title>
      <link>https://noauto-nolife.com/post/django-deploy-ec2/</link>
      <pubDate>Sun, 18 Jul 2021 09:45:32 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-ec2/</guid>
      <description>Herokuとは違ってサーバーが日本にもあり、なおかつ課金すれば大型のウェブアプリでもインターネット上に公開できる、それがAWS。 本記事ではAWSのEC2を使用し、デプロイ工程を解説する。 必要な知識 手順通りこなせばデプロイはできるが、作業の意味を理解するには、以下の知識を要する。 ネットワーク、データベース、セキュリティの知識 Linuxのコマンド(cp,mkdir,mv,cdなど) vimやnanoな</description>
    </item>
    
    <item>
      <title>Pythonの角括弧と丸括弧の違い、丸括弧を使う場合の注意点【()と[]、タプル型とリスト型】</title>
      <link>https://noauto-nolife.com/post/python-brackets/</link>
      <pubDate>Tue, 22 Jun 2021 15:12:04 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/python-brackets/</guid>
      <description>Djangoの公式コードを流用したりしていると、よく見かける()を使ったコード。 これはタプルである。タプルはリスト型の[]と同じであるが、書き換えが不可能であるという点でリスト型とは異なる。 タプルを定義する時、下記のような書き方をしてしまうと、文字列型として判定されてしまう。 (&amp;quot;username&amp;quot;) タプルとして扱ってもらいたいのであれば、下記のように記述する。カンマを忘れずに。 (&amp;quot;username&amp;quot;,) タプルはリストと同様に扱えるので、後から</description>
    </item>
    
    <item>
      <title>【Django】カスタムユーザーモデルでユーザーブロック機能を実装させる【ManyToManyFieldでユーザーモデル自身を指定】</title>
      <link>https://noauto-nolife.com/post/django-m2m-usermodel/</link>
      <pubDate>Mon, 21 Jun 2021 21:36:59 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-m2m-usermodel/</guid>
      <description>本格的にSNS等のサービスを運用する時、必要になるのがユーザーフォロー(友達)やユーザーブロックの機能。理論上、いずれもユーザーとユーザーを多対多でつなぐことで実現できる。 今回はユーザーブロックの機能をカスタムユーザーモデルを使って再現する。 コードは【Django】allauthとカスタムユーザーモデルを実装した簡易掲示板を作る【AbstrastBaseUser】から流用している。 ユーザーモデル u</description>
    </item>
    
    <item>
      <title>【django】ManyToManyFieldでフィールドオプションthroughを指定、中間テーブルを詳細に定義する【登録日時など】</title>
      <link>https://noauto-nolife.com/post/django-m2m-through/</link>
      <pubDate>Mon, 21 Jun 2021 16:57:08 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-m2m-through/</guid>
      <description>多対多のフィールドは、複数から1つを選ぶ1対多よりも使う機会が多いだろう。 飲食店が提供するメニューの食品アレルギー指定、複数のユーザーに対する通知、ユーザーに対するフォローやブロックの機能など。 DjangoではManyToManyFieldを定義した時、中間テーブルは自動的に作られる。そのため、そのままでは中間テーブルにレコードが挿入された時間などが記録できない。 自分で中間テーブルの中身を作りたい</description>
    </item>
    
    <item>
      <title>VirtualBoxにUbuntuをインストールする</title>
      <link>https://noauto-nolife.com/post/virtualbox-ubuntu-install/</link>
      <pubDate>Sat, 19 Jun 2021 16:49:00 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/virtualbox-ubuntu-install/</guid>
      <description>作ったウェブアプリをデプロイする時、実機のLinuxサーバーでも良いが、VirtualBox上のLinux系OSのいずれかにデプロイして試験運用するのも良いだろう。 そこでその前段階としてVirtualBoxにUbuntuをインストールさせる。 用意する物 Ubuntuのisoファイル VirtualBoxのインストーラー(パッケージファイル) メモリ4GB以上の空きがあり、なおかつ20GB以上のストレージ</description>
    </item>
    
    <item>
      <title>【Django】views.pyの事前処理 VS (埋め込み型)カスタムテンプレートタグ・フィルタ</title>
      <link>https://noauto-nolife.com/post/django-custom-template-tags-vs-before-view-calc/</link>
      <pubDate>Tue, 15 Jun 2021 03:08:14 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-custom-template-tags-vs-before-view-calc/</guid>
      <description>思考停止状態でカスタムテンプレートタグを作っているとき、ふと気づいた。 『これ、views.pyで事前に処理をしたほうが良いのではないか』と。 考察に至った背景 カスタムテンプレートタグは基本的にviews.pyがレンダリングをする段階で動作する。 つまりそれは、クライアントにレスポンスが届く直前であり、サーバーサイドが介入できる最後の処理である。 故に、『カスタムテンプレートタグを実行した後に、任意の処理</description>
    </item>
    
    <item>
      <title>【Django】admin.pyからカスタムアクションを追加し、管理サイトから実行【crontab、BaseCommandが使えない場合の対処法】</title>
      <link>https://noauto-nolife.com/post/django-admin-custom-action/</link>
      <pubDate>Mon, 14 Jun 2021 17:33:41 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-admin-custom-action/</guid>
      <description>【Django】manage.pyコマンドを追加させる【バッチ処理、常駐プログラムなどに】から、manage.pyのコマンドを追加することができる。 だが、誰もがmanage.pyのコマンドを実行できるとも限らない。crontabが使えない場合もある。 特にコマンドを打ったことのない人向けにシステムの管理を行ってもらう場合、GUIで操作できる管理サイトからアクションを追加する方法が妥当と言えよう。 そこ</description>
    </item>
    
    <item>
      <title>Djangoの管理サイト(admin)をカスタムする【全件表示、全フィールド表示、並び替え、画像表示、検索など】</title>
      <link>https://noauto-nolife.com/post/django-admin-custom/</link>
      <pubDate>Thu, 10 Jun 2021 12:30:46 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-admin-custom/</guid>
      <description>admin.pyはとても便利ではあるが、ただのadmin.site.register([モデルクラス])ではとても使いづらい。 特にそのままでは管理サイト内で画像を取り扱ったり、複数のデータを参照したり、検索や絞り込みしたりすることはできない。 そこで、管理サイトをカスタマイズして使いやすくさせる。 コード 元コードは、Djangoで画像及びファイルをアップロードする方法から流用した。以下のようにmode</description>
    </item>
    
    <item>
      <title>video.jsを実装させ、コントローラをカスタムする【Brightcove Player】</title>
      <link>https://noauto-nolife.com/post/js-video-controller/</link>
      <pubDate>Wed, 09 Jun 2021 11:48:19 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/js-video-controller/</guid>
      <description>通常、videoタグを使用する場合、controls属性を付与することで、動画の操作(再生、音量調整等)が可能なコントローラを表示できる。 しかし、再生速度の操作やコントローラの装飾関係を一から作っていくには時間がかかりすぎる。 そこで、videoタグの拡張が可能なvideo.jsというライブラリを実装させる。すでにAmazon等の大手サイトでも採用実績のある完成度の高いvideoタグ専用のjsライブ</description>
    </item>
    
    <item>
      <title>【Django】allauthのurls.pyをカスタムする【新規アカウント作成、パスワード変更処理の無効化など】</title>
      <link>https://noauto-nolife.com/post/django-allauth-custom-urls/</link>
      <pubDate>Tue, 25 May 2021 09:49:51 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-allauth-custom-urls/</guid>
      <description>Django-allauth。とても便利ではあるが、運用する場所によっては必要のない処理も含まれている。 例えば、新規アカウント作成の処理。これは限られた人間しかアクセスを許されないサイト(例:社員用のウェブアプリ等)の場合、部外者が勝手にアカウントを作り、内部へのアクセスを許してしまう。 そこで、新規アカウント作成処理やパスワード変更処理などを無効化させる。そのためには、allauthのurls.p</description>
    </item>
    
    <item>
      <title>【Django】バッチ処理でPS、AI(PDF)ファイルのサムネイルを自動生成させる【BaseCommand】</title>
      <link>https://noauto-nolife.com/post/django-batch-thumbnail-create/</link>
      <pubDate>Sun, 23 May 2021 12:02:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-batch-thumbnail-create/</guid>
      <description>PS、AIファイルのサムネイルを作る処理をmanage.pyコマンドに追加することで、ビューの負担を軽減する。 これにより、負荷のかかる処理をビューから分離できる。投稿処理が集中しても、高負荷の処理が原因でサーバーダウンすることは無いのだ。 全体像 こんなふうに、通常のリクエストで行われる処理系とは分離して、サムネイルの自動生成が行われる。 ループにより逐次処理を行うため、リクエストとは違って並列ではない</description>
    </item>
    
    <item>
      <title>【Django】16進カラーコードから色名に書き換えるフィルタを自作する【カスタムテンプレートフィルタ】</title>
      <link>https://noauto-nolife.com/post/django-custom-template-tags-color/</link>
      <pubDate>Wed, 12 May 2021 17:35:56 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-custom-template-tags-color/</guid>
      <description>models.pyにて、色の指定を16進数のカラーコードで受け入れる。その16進数カラーコードを、色名(orangeとかforestgreenとか)に書き換える。 そういうカスタムテンプレートフィルタを自作する方法を解説する。 models.pyのカラーコード受け入れ from django.db import models from django.core.validators import RegexValidator &amp;quot;&amp;quot;&amp;quot; 省略 &amp;quot;&amp;quot;&amp;quot; color_regex = RegexValidator(regex=r&#39;^#(?:[0-9a-fA-F]{3}){1,2}$&#39;) color = models.CharField(verbose_name=&amp;quot;リボン色&amp;quot;,max_</description>
    </item>
    
    <item>
      <title>Djangoでアップロードされた.aiと.psファイルのサムネイルを自動生成させる【PhotoShop,Illustrator】</title>
      <link>https://noauto-nolife.com/post/django-aips-thumbnail-autocreate/</link>
      <pubDate>Mon, 10 May 2021 10:01:41 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-aips-thumbnail-autocreate/</guid>
      <description>ファイルをアップロードした後、ファイル名だけ表示されている状態では、それが何なのかパット見でよくわからない。 だからこそ、事前にサムネイルを用意させる。こんなふうに だが、サムネイル画像のアップロードまでユーザーに押し付けるのは、気軽なファイル共有を前提としたウェブアプリのコンセプトが台無しになる。そこで、アップロードしたファイルのサムネイルをサーバーサイドに自動生成してもらう。 本記事ではファイルアッ</description>
    </item>
    
    <item>
      <title>【django.core.paginator】一度に2ページ以上ジャンプできるように改良する【inclusion_tag()】</title>
      <link>https://noauto-nolife.com/post/django-paginator-custom/</link>
      <pubDate>Fri, 07 May 2021 09:50:13 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-paginator-custom/</guid>
      <description>以前のページネーション実装記事では、検索とページのパラメーターの両立を行った。 しかし、このページネーションは1ページずつしか移動できない。つまり、1ページ目の状態から2ページ目に行くことはできても、3ページ目にジャンプすることはできないのだ。 そこでページネーションを改良させ、一度に2ページ以上ジャンプできるように改良する。 やりたいことと方法論の解説 やりたいこと 要するに、本記事でやりたいのはこういう</description>
    </item>
    
    <item>
      <title>Djangoでviews.pyからmodels.pyのフィールドオプションを参照する【verbose_name,upload_to】</title>
      <link>https://noauto-nolife.com/post/django-reference-models-option/</link>
      <pubDate>Tue, 04 May 2021 20:30:19 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-reference-models-option/</guid>
      <description>需要ないかもだけど、備忘録として。 Video.thumbnail.field.upload_to つまり、 [モデルクラス].[フィールド名].field.[フィールドオプション] これで参照できる。 用途 FileFieldでアップロードした動画のサムネイル(ImageField)をviews.pyが自動生成する時、アップロード先のパスを指定する必要があるが、models.pyのフィールドオプションとして書いたupload_toと整合性を合わせるために、本記事で扱</description>
    </item>
    
    <item>
      <title>Djangoでmakemigrationsコマンドを実行しても、No changes detectedと言われる場合の対処法</title>
      <link>https://noauto-nolife.com/post/django-makemigrations-not-applied/</link>
      <pubDate>Wed, 28 Apr 2021 15:00:56 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-makemigrations-not-applied/</guid>
      <description>Djangoでマイグレーションファイルを作る python3 manage.py makemigrations このコマンドを実行しても返ってくるのが、 No changes detected とされ、マイグレーションファイルが作られないことがある。当然この状態でmigrateコマンドを打ってもDBには反映されない。 そこで、本記事ではこの対処法について列挙する。 対処法1:settings.pyのINSTALLED_APPSに対象のアプリを追加 python3 manage.py makemigrations python3 manage.py migrate この2つのコマンドを打って、models</description>
    </item>
    
    <item>
      <title>FontAwesomeや画像を選択できるプルダウンメニュー【JS不使用】</title>
      <link>https://noauto-nolife.com/post/fontawesome-image-select/</link>
      <pubDate>Sun, 25 Apr 2021 17:41:49 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/fontawesome-image-select/</guid>
      <description>普通のselectタグの場合、画像やアイコンを表示させようとしてもうまく行かない。他にも、複数選択しないといけないとき、selectタグにmultiple属性を指定するだけでは操作が難しい。 そこで、画像とFontAwesomeが表示できて、なおかつ複数選択可能なプルダウンメニューを作ってみた。 ソースコード html5、いつものinputタグに、checkboxとradioを使っている。 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;</description>
    </item>
    
    <item>
      <title>【Slack風】モーダルダイアログ無し、ページ遷移無しで編集フォームを作る【JS不使用】</title>
      <link>https://noauto-nolife.com/post/nomodal-edit-form/</link>
      <pubDate>Sun, 25 Apr 2021 13:42:24 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/nomodal-edit-form/</guid>
      <description>投稿されたコンテンツを編集する時、編集フォームを表示するページに遷移したり、編集フォームをJSなどを使用してモーダルダイアログとして表示させることがある。こんなふうに。 しかし、これでは他のコンテンツを見ながらの編集ができない。それだけでなく、ページ遷移やダイアログ表示を行うとJSやサーバーサイドに負担がかかる。そこで、投稿したコンテンツを表示する場所を、編集フォームに切り替えるように仕立てる。こん</description>
    </item>
    
    <item>
      <title>Laravelで--resourceで作ったコントローラのルーティングを解体する</title>
      <link>https://noauto-nolife.com/post/laravel-to-resource/</link>
      <pubDate>Tue, 20 Apr 2021 16:26:25 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-to-resource/</guid>
      <description>例えば、コントローラーを以下のように作るとする。 php artisan make:controller TopicsController --resource これで、Restfulに必要なcreateやstore等のアクションが自動的に作られるのだが、後からアクションを追加削除しようとした時、ルーディングに追加削除をする必要がある。 その時、このように書かれてあると(注意:下記はLaravel7.x系のルーティング記法)、ルーティングの書き換えは難しい。 Route::resource(&#39;/topics&#39;, &#39;TopicsController&#39;); そこで、本記事は--resourceで作</description>
    </item>
    
    <item>
      <title>Laravelのプロジェクト名を書き換える【設定に依存していないのであれば、普通にディレクトリ名を書き換えるだけでOK】</title>
      <link>https://noauto-nolife.com/post/laravel-project-rename/</link>
      <pubDate>Mon, 19 Apr 2021 08:37:27 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-project-rename/</guid>
      <description>既存のLaravelのプロジェクトを、プロジェクト名だけ書き換えて編集する。 環境 Ubuntu 18.04 Laravel Framework 7.30.4 結論 下記コマンドでプロジェクトを作ったとする。 composer create-project --prefer-dist laravel/laravel [プロジェクト名] 上記コマンドで生成された[プロジェクト名]のディレクトリ名を書き換えれば良いだけの話である。 理屈 まず、プロジェクトを作った後、プロジェクトのディレクトリに移動して、下記コマンドを実行してもらいたい。 grep -rl &amp;quot;[プロジェクト名]&amp;qu</description>
    </item>
    
    <item>
      <title>PostgreSQLインストールから、ユーザーとDBを作る</title>
      <link>https://noauto-nolife.com/post/startup-postgresql/</link>
      <pubDate>Fri, 16 Apr 2021 15:14:58 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-postgresql/</guid>
      <description>PostgreSQLのインストールからユーザー作成、そのユーザーが扱うDBの作成を行う。 インストール Ubuntuであれば、aptコマンドでインストール可能 sudo apt install postgresql 下記コマンドを打って、active(running)と表示されればOK。active (exited)でも可 sudo systemctl status postgresql.service ユーザー作成から、権限割り当て、DB作成まで sudo -u postgres -i これでpostgresユーザーのターミナルになる。dockerを使用して</description>
    </item>
    
    <item>
      <title>Djangoのforms.pyが提供するフォームテンプレートは使わない</title>
      <link>https://noauto-nolife.com/post/django-forms-temp-not-use/</link>
      <pubDate>Tue, 13 Apr 2021 21:32:41 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-forms-temp-not-use/</guid>
      <description>Djangoのforms.pyはユーザーから受け取った値のバリデーションだけでなく、フォームのテンプレートも提供してくれる。(widgetを使うなどしてクラス名やHTMLタグの指定ができる) しかし、私はこのforms.pyの提供するフォームのテンプレートは使わない。本記事ではその理由を列挙する 理由1:フロントサイドとサーバーサイドの分業問題 そもそも、テンプレートの開発はフロントサイド開発者のするこ</description>
    </item>
    
    <item>
      <title>LaravelをUbuntuにデプロイする【Nginx&#43;PostgreSQL】</title>
      <link>https://noauto-nolife.com/post/laravel-ubuntu-deploy/</link>
      <pubDate>Tue, 13 Apr 2021 19:09:40 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-ubuntu-deploy/</guid>
      <description>構成について タイトルの通り、下記構成にてデプロイを行う Laravel Framework 7.30.4 Ubuntu 18.04 nginx version: nginx/1.14.0 (Ubuntu) psql (PostgreSQL) 10.16 (Ubuntu 10.16-0ubuntu0.18.04.1) なぜPostgreSQLなのか？(MySQLではないのか？) MySQLは使わない。なぜなら、Laravelのtimestamp型とMySQLが組み合わさると2038年問題が発生するから。 コード側を合わせるという方法もあるが、今回はデプロイが主目的であるため、安全なPostgreSQLでデプロイする。 https://qiita.com/ucan-lab/items/99ee14ad6bb24614980c デプロイまでの流</description>
    </item>
    
    <item>
      <title>JavascriptからCookieを扱う【動画の設定音量の記録と読み込み】</title>
      <link>https://noauto-nolife.com/post/javascript-cookie/</link>
      <pubDate>Tue, 13 Apr 2021 18:59:38 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/javascript-cookie/</guid>
      <description>JavaScriptからCookieを扱う。これで、サイトのデータをユーザーのブラウザに保存できる。 Cookieにvideoタグで設定した音量情報を格納、読み込みするコード 実例を交えながら解説する。下記はvideoタグで指定した音量をCookieに記録する。 window.addEventListener(&amp;quot;load&amp;quot; , function (){ const video = document.querySelector(&amp;quot;video&amp;quot;); video.addEventListener(&amp;quot;volumechange&amp;quot;,(event) =&amp;gt; { document.cookie = &amp;quot;volume=&amp;quot; + decodeURIComponent(event.target.volume) + &amp;quot;;Path=/single;SameSite=strict&amp;quot;; }); set_video_volume(); }); function set_video_volume(){ let cookies = document.cookie; console.log(cookies); let cookiesArray = cookies.split(&#39;;&#39;); let volume = 0; for(let c of cookiesArray) { console.log(c); let cArray = c.split(&#39;=&#39;); if( cArray[0] === &amp;quot;volume&amp;quot;){ volume = Number(cArray[1]); console.log(volume); break; } } const video = document.querySelector(&amp;quot;video&amp;quot;); video.volume = volume; } Cookie</description>
    </item>
    
    <item>
      <title>jQueryのコードをJavascriptに書き換える【セレクタ、属性値の参照、イベントなど】</title>
      <link>https://noauto-nolife.com/post/jquery-to-javascript/</link>
      <pubDate>Tue, 13 Apr 2021 18:32:51 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/jquery-to-javascript/</guid>
      <description>jQueryに依存したコードをそのままにするのは再利用性に欠け、開発効率にも関わる。そこで、今回はjQueryのコードを適宜javascriptに書き換える。 セレクタ まずは基本のセレクタ以下のように書き換える。 var test = $(&amp;quot;.test&amp;quot;); //↓以下に書き換え var test = document.querySelectorAll(&amp;quot;.test&amp;quot;); //←全ての.textクラスの要素を抜き取る var test = document.querySelector(&amp;quot;.test&amp;quot;); //←.testクラスの1番最初の要素を抜き取る jQueryが提供するメソッドや属性などは使用できなく</description>
    </item>
    
    <item>
      <title>Laravelで1対多、多対多のリレーションを作る【トピックに対してコメントの投稿、トピックタグの指定】</title>
      <link>https://noauto-nolife.com/post/laravel-m2m-foreignkey/</link>
      <pubDate>Tue, 13 Apr 2021 18:14:38 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-m2m-foreignkey/</guid>
      <description>1対多、多対多のリレーションのウェブアプリのサンプルを作りつつ、方法を解説する。 状況 元にして作るアプリの状況を解説する 1対多のリレーションを作る Topicに対して、Commentを投稿できるようにする。そのために、1対多のリレーションを作る。 コメントのモデルの作成・トピックのモデルの編集 1対多のリレーションを作るため、まずは、Commentのモデルを作る。ついでに--migrationオプションを</description>
    </item>
    
    <item>
      <title>Laravelの全体像、ファイル・ディレクトリごとの役割と関係性を俯瞰する【各コンポーネントごとに解説】</title>
      <link>https://noauto-nolife.com/post/laravel-overview/</link>
      <pubDate>Tue, 13 Apr 2021 16:05:29 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-overview/</guid>
      <description>Laravelのプロジェクトを作ると、大量のファイルやディレクトリで溢れかえり、気後れしそうになる。 そこで本記事では開発をスムーズにするため、Laravelの全体像、とりわけよく使うファイル・ディレクトリの役割と関係を解説する。 Laravelの全体像 Laravelの全体像はこのようになっている。 流れ マイグレーションファイルに基づき、マイグレーション。DBのテーブルを作る クライアントがリクエストを送</description>
    </item>
    
    <item>
      <title>HUGOにシェルスクリプトとJavaScriptの記事検索機能を実装させる</title>
      <link>https://noauto-nolife.com/post/hugo-js-search-system/</link>
      <pubDate>Tue, 13 Apr 2021 08:18:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/hugo-js-search-system/</guid>
      <description>タイトルの通り。 静的サイトジェネレーターのHUGOはサーバーサイドのスクリプトが存在しない(全てフロント言語)。そのため、検索機能を実装させるとなると、検索対象と検索機能の全てをフロントに記述する必要がある。フロントで完結する検索機能に必要になるのが、JavaScript。 それから、検索対象である記事の文字列をJSが読み取れる形式でジェネレートしてあげる必要もある。その際にコマンド一発でジェネレー</description>
    </item>
    
    <item>
      <title>SeleniumでFirefoxブラウザのプロファイルを読み込む【Recaptcha突破、Cookie&#43;アドオン読み込み】</title>
      <link>https://noauto-nolife.com/post/selenium-read-profile/</link>
      <pubDate>Mon, 29 Mar 2021 08:37:13 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/selenium-read-profile/</guid>
      <description>めったに使うことのないSeleniumではあるが、いざ使おうとするとかなり手間取る。 特にログイン。Django等の管理サイトでログインする際にはパスとIDを控えておけば良いが、GoogleのRecaptchaとかボット対策をしていると当然突破できない。そこで予めブラウザでログインをしておいて、そのプロファイルを読み込めば良い。 プロファイルを読み込みするコード 下記コードをコピペすれば良いだけである。</description>
    </item>
    
    <item>
      <title>CSS3とHTML5だけでタブを作り、複数のページを表示させる【JS不要】</title>
      <link>https://noauto-nolife.com/post/css3-tab-system/</link>
      <pubDate>Wed, 17 Mar 2021 08:54:24 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-tab-system/</guid>
      <description>例えば、こんなふうにタブでページを切り替えて表示させるフロント。 かつてはJSじゃないと成立しなかったが、今となっては、JS不要でCSS3とHTML5だけで再現できる。 コード まず、HTML。 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;タブシステム&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;input id=&amp;quot;tab_radio_1&amp;quot; class=&amp;quot;tab_radio&amp;quot; type=&amp;quot;radio&amp;quot; name=&amp;quot;tab_system&amp;quot;&amp;gt;&amp;lt;label class=&amp;quot;tab_label&amp;quot; for=&amp;quot;tab_radio_1&amp;quot;&amp;gt;タブ1&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;quot;tab_radio_2&amp;quot; class=&amp;quot;tab_radio&amp;quot; type=&amp;quot;radio&amp;quot;</description>
    </item>
    
    <item>
      <title>【Django】バッチ処理のOpenCVが撮影した画像をDBに保存する</title>
      <link>https://noauto-nolife.com/post/django-batch-opencv/</link>
      <pubDate>Tue, 16 Mar 2021 16:15:03 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-batch-opencv/</guid>
      <description>Djangoのバッチ処理を実行し、DBにデータを格納させる。ただし、OpenCVで撮影した画像をDBに保存させる。本記事ではその手順を記す。 実行環境・やりたいこと 実行環境 Django 2.2以上 Ubuntu 18.04 やりたいこと 流れはだいたいこんな感じ OS起動時、バッチ処理がCrontabから実行される バッチ処理はOpenCVを使用し、撮影した画像を保存 保存した画像とコメントをDBに記録 1秒経ったら、2に戻る つまり、コマ撮りし</description>
    </item>
    
    <item>
      <title>Ubuntu18.04にnode.jsとnpm、vue-cliをインストールする</title>
      <link>https://noauto-nolife.com/post/startup-npm-install/</link>
      <pubDate>Thu, 11 Mar 2021 16:10:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-npm-install/</guid>
      <description>環境 Ubuntu 18.04 Bash インストール nodejsとnpmをインストールする。 sudo apt install -y nodejs npm npmからnパッケージをインストール sudo npm install n -g nパッケージを使ってnodeをインストール sudo n stable 旧バージョンのnodejs及びnpmをアンインストールする。 sudo apt purge -y nodejs npm exec $SHELL -l 下記コマンドを実行して、バージョンが表示されれば完了 node -v permission denied問題への対処 下記コマンドを実行する。 npm config get prefix 出力された文字列が/usr/localで</description>
    </item>
    
    <item>
      <title>Djangoで動画投稿時にサムネイルもセットでアップロードする【DRF&#43;Ajax(jQuery)&#43;canvas】</title>
      <link>https://noauto-nolife.com/post/django-ajax-thumbnail-upload/</link>
      <pubDate>Mon, 01 Mar 2021 15:03:31 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-ajax-thumbnail-upload/</guid>
      <description>Djangoで動画をアップロードする時、ffmpegなどを使ってサムネイルの自動生成を行うが、クライアントが自分で動画のサムネイルを指定したいときはこの限りではない。 サムネイルに指定したい画像は動画内にあり、クライアントがサムネイルの画像をまだ作っていない場合、アップロードフォームでサムネイルを作る必要がある。 本記事では動画を投稿する際、サムネイルをクライアントが指定した上でアップロードする手法を</description>
    </item>
    
    <item>
      <title>Djangoでカスタムユーザーモデルを外部キーとして指定する方法【1対多】</title>
      <link>https://noauto-nolife.com/post/django-custom-user-model-foreignkey/</link>
      <pubDate>Sat, 20 Feb 2021 11:13:37 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-custom-user-model-foreignkey/</guid>
      <description>例えば、簡易掲示板で投稿者のユーザーIDを外部キーとして指定したい場合がある。 作ったカスタムユーザーモデルを外部キーとして通常のアプリから指定する方法を解説する。 本記事では、下記記事で解説したカスタムユーザーモデルを実装したことを前提として話を進める。 【Django】allauthとカスタムユーザーモデルを実装した簡易掲示板を作る【AbstrastBaseUser】 カスタムユーザーモデルを外部キー</description>
    </item>
    
    <item>
      <title>【AWS】Cloud9使う時にすぐやる設定【bashrc、Django等】</title>
      <link>https://noauto-nolife.com/post/cloud9-first-config/</link>
      <pubDate>Tue, 16 Feb 2021 09:42:06 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/cloud9-first-config/</guid>
      <description>Cloud9を使う時にやっておく設定をまとめる。 注意事項としてAWS、Cloud9はいずれも頻繁にバージョンアップを行っている仕様上、ここに書かれている情報では再現できない可能性がある。もし、Cloud9のバージョンアップによる不具合や動作不良などを気にされる場合は、ローカル環境に開発環境を構築すると良い。 Bashの設定関係 コマンド履歴に日時を表示させる ~/.bashrcを下記のように編集する。 export</description>
    </item>
    
    <item>
      <title>DjangoでUUIDを主キーとし、first_nameとlast_nameを1つにまとめたカスタムユーザーモデルを作る【AbstractBaseUserとallauth】</title>
      <link>https://noauto-nolife.com/post/django-custom-user-model-uuid/</link>
      <pubDate>Mon, 15 Feb 2021 15:47:57 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-custom-user-model-uuid/</guid>
      <description>Djangoでユーザーを作ったとき、デフォルトでは数値型オートインクリメントの主キーになる。 身内だけで使う小さなウェブアプリであれば大した問題にはならないと思うが、基本主キーが数値型かつオートインクリメントであれば、簡単に予測されてしまう。セキュリティリスクは最小限に留めるためにも、なるべく主キーはUUID型にしたい。 そこで、本記事ではユーザーの主キーにUUIDを使用したカスタムユーザーモデルの作</description>
    </item>
    
    <item>
      <title>Ajax搭載したLaravelをHerokuにデプロイした時、405エラーが出る問題の解決【method not allowed】</title>
      <link>https://noauto-nolife.com/post/laravel-heroku-405-error/</link>
      <pubDate>Sat, 13 Feb 2021 14:07:52 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-heroku-405-error/</guid>
      <description>Herokuにデプロイ後、Ajaxを使ったPOST文をサーバーサイドに送信しようとすると、405、即ちMethod Not Allowedがコンソールに表示される。 ルーティングには問題なくPOST文のメソッドは記述されているし、コントローラにも処理はある。何より開発サーバー上で問題なく動いていたものが、Herokuデプロイ後に動作しなくなるのはHeroku上の問題だと思い、あれこれやってみたが、一向にうま</description>
    </item>
    
    <item>
      <title>LaravelをHerokuにデプロイする【Heroku-postgresql使用】</title>
      <link>https://noauto-nolife.com/post/laravel-heroku-deploy/</link>
      <pubDate>Sat, 13 Feb 2021 14:01:48 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-heroku-deploy/</guid>
      <description>LaravelをHerokuにデプロイする。DBにはHerokuPostgresを使用する。 本記事の対象読者はHerokuCLIはインストール済み、基本的なコマンドは習得済みとする。 流れ Herokuからアプリを作る HerokuPostgresを実装 起動用のProcfileを作る ローカルリポジトリとHerokuのリモートリポジトリの関連付け デプロイ 環境変数の設定を施す(多いのでシェルスクリプトを実装</description>
    </item>
    
    <item>
      <title>Laravelで主キーにUUIDを実装させる方法【laravel-eloquent-uuid】</title>
      <link>https://noauto-nolife.com/post/laravel-uuid/</link>
      <pubDate>Sat, 13 Feb 2021 13:45:59 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-uuid/</guid>
      <description>主キーにUUIDを使用することで、デフォルトの連番で数値型のIDと違って予測されることがない。これはセキュリティ上、重要なことなのでなるべく開発初期段階で実装したい。 実装方法 UUID実装用のライブラリをcomposerからインストール。 composer require goldspecdigital/laravel-eloquent-uuid:^7.0 ユーザーモデルを書き換える。database/migrations/2014_10_12_000000_create_users_table.phpにて、下記</description>
    </item>
    
    <item>
      <title>DjangoでSendgridを実装させる方法【APIキーと2段階認証を利用する】</title>
      <link>https://noauto-nolife.com/post/django-sendgrid/</link>
      <pubDate>Fri, 12 Feb 2021 17:48:49 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-sendgrid/</guid>
      <description>Sendgridのパスワードを使用したメール送信が廃止され、APIを使用した2段階認証が強制されるため、ここに対策を記す。本記事はDjango(Python)を対象とした対策について解説する。 django-sendgrid-v5のインストール APIを使用するために、pipにてdjango-sendgrid-v5をインストールさせる。 pip install django-sendgrid-v5 settings.pyにて設定を施す settings.pyの</description>
    </item>
    
    <item>
      <title>【Laravel】静的ファイルのディレクトリ作るときの注意点【publicのディレクトリ名で即404エラー】</title>
      <link>https://noauto-nolife.com/post/laravel-public-dirname-caution/</link>
      <pubDate>Mon, 08 Feb 2021 14:59:16 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-public-dirname-caution/</guid>
      <description>Laravelで静的ファイルを作る時、アプリごとにCSSとJSを仕分けしたい場合がある。しかし、作るディレクトリ名を間違えれば、たちまち404エラーが出てしまう。 本記事ではLaravelの404エラーの原因のひとつであるパスの衝突について解説する。 Laravelで404エラーが起こる原因 例えば、ルーティングがこんな状態で Route::get(&#39;/&#39;, function () { return view(&#39;welcome&#39;); }); Route::resource(&amp;quot;/memo&amp;quot;,&amp;quot;MemoController&amp;quot;); memoというアプリを作ったとしよう。当然、memoアプリ内で</description>
    </item>
    
    <item>
      <title>laravelでAjax(jQuery)を送信する【POST&#43;DELETE】</title>
      <link>https://noauto-nolife.com/post/laravel-ajax/</link>
      <pubDate>Thu, 04 Feb 2021 12:29:32 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-ajax/</guid>
      <description>タイトルの通り。laravelにAjax(jQuery)を送信する。コードはLaravelでリクエストのバリデーションを行うを元に作られている。 jQueryを読み込みCSRFトークンをAjax送信時に付せて送信させる まずAjax送信用にjQueryを読み込ませる。それからPOSTリクエストの場合、CSRF対策用のトークンもセットで送信しなければならない。故に、resources/views/bas</description>
    </item>
    
    <item>
      <title>【Request】Laravelでリクエストのバリデーションを行う【不適切なデータのチェックに】</title>
      <link>https://noauto-nolife.com/post/laravel-validate/</link>
      <pubDate>Wed, 03 Feb 2021 08:14:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-validate/</guid>
      <description>コードはLaravelで検索とページネーションを両立させる【ANDとOR検索も】から流用している。現状では不適切な値(文字数オーバー、未入力等)をサーバーに送信すると、そのまま例外処理が発生する。バリデーションを実装させ、例外ではなく前のページにリダイレクトさせる。 対象はlaravel 7.x。 方法は主に2種類ある。コントローラー上にバリデーション処理を設置する方法、フォームリクエストを生成してバリ</description>
    </item>
    
    <item>
      <title>Laravelで検索とページネーションを両立させる【ANDとOR検索も】</title>
      <link>https://noauto-nolife.com/post/laravel-search-paginate/</link>
      <pubDate>Tue, 02 Feb 2021 13:48:05 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-search-paginate/</guid>
      <description>タイトルの通り。laravelにてAND検索とOR検索を実装させつつ、ページネーションも両立させる。コードはlaravelでCRUD簡易掲示板を作る【Restful】から流用している。 まずはAND検索とOR検索を実装させる 流れ的には、スペース区切りのキーワードを送信させ、それをコントロール側で区切り、クエリをビルドする。クエリをビルドする時、AND検索指定であれば、where()の追加、OR検索指</description>
    </item>
    
    <item>
      <title>【Django】manage.pyコマンドを追加させる【バッチ処理、常駐プログラムなどに】</title>
      <link>https://noauto-nolife.com/post/django-command-add/</link>
      <pubDate>Mon, 01 Feb 2021 18:25:13 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-command-add/</guid>
      <description>Djangoのmanage.pyにはコマンドを追加することができる。これを利用すれば、アプリディレクトリで定義したモデルをそのまま流用してDBにアクセスしたり、コマンド一発で複雑な処理を終わらせたり、バッチ処理として運用させることも簡単にできる。 manage.pyにコマンドを追加させる まず、任意のアプリディレクトリにmanagement/commands/ディレクトリを作る。 mkdir -p [アプリディレクト</description>
    </item>
    
    <item>
      <title>Laravelで画像とファイルをアップロードする</title>
      <link>https://noauto-nolife.com/post/laravel-fileupload/</link>
      <pubDate>Mon, 01 Feb 2021 14:28:58 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-fileupload/</guid>
      <description>タイトルの通り。単にアップロードするだけでなく、MIME属性に基づいたファイルのバリデーションを行い、セキュリティにも配慮する。 なお、本記事はLaravelで検索とページネーションを両立させる【ANDとOR検索も】からコードを流用している。 流れ テーブルに画像パス格納用カラムを追加してマイグレーション モデルに画像パス格納用カラムの名前を追加する バリデーション用のフォームリクエストを定義する コントロー</description>
    </item>
    
    <item>
      <title>初心者でもlaravel 7.x を使い、45分でCRUD簡易掲示板を作る【Restful対応】</title>
      <link>https://noauto-nolife.com/post/laravel-crud-restful/</link>
      <pubDate>Mon, 01 Feb 2021 13:11:30 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-crud-restful/</guid>
      <description>リハビリがてらlaravelでCRUDに対応した簡易掲示板を作る。この記事の手順に沿ってやれば、45分もあれば作れる。 本記事ではlaravel 7.X系を使用している。 流れ プロジェクトを作る DBはSQliteを読み込むように設定する Restful対応コントローラーを作る ルーティングの設定 モデル定義とマイグレーション実行 リクエストを作る ビューを作る コントローラーの修正 タイムゾーンの修正 プロジェクトを作</description>
    </item>
    
    <item>
      <title>laravelで開発中、ログを表示させる【エラー箇所の確認・デバッグ作業に】</title>
      <link>https://noauto-nolife.com/post/laravel-log/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:55 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-log/</guid>
      <description>laravelではDjango(Python)のように処理の途中でprint()を実行してターミナルにログを表示させることはできない。代替として使用されるのがLogファサードを使用する方法である。 Logファサードを使用してログを表示させる 下記コードを任意の場所に書き込む。 \Log::debug(&amp;quot;ログ&amp;quot;); 内容は全てstorage/logs/laravel.log内に保存される</description>
    </item>
    
    <item>
      <title>Laravelのartisanコマンドのまとめ【開発用サーバー立ち上げ、コントローラやマイグレーションファイル等の作成、ルーティングの確認などに】</title>
      <link>https://noauto-nolife.com/post/laravel-artisan-command/</link>
      <pubDate>Mon, 01 Feb 2021 08:07:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-artisan-command/</guid>
      <description>laravelのartisanコマンドをよく使うと思われる順にまとめる。 開発用サーバーを立ち上げる php artisan serve ホスト名とポート番号の指定もできる。 php artisan serve --host=[ホスト名] --port=[ポート番号] コントローラーを作る php artisan make:controller [コントローラー名] &amp;ndash;resourceをつけると、Restful化もできる php artisan make:controller [コントローラー名] --resource モデルを作る php artisan make:model [モデル名] &amp;ndash;migratio</description>
    </item>
    
    <item>
      <title>laravelコマンドをUbuntuで実行可能にする方法</title>
      <link>https://noauto-nolife.com/post/laravel-command-ubuntu/</link>
      <pubDate>Thu, 28 Jan 2021 14:52:39 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/laravel-command-ubuntu/</guid>
      <description>laravelで新しいプロジェクトを生成するとき、 composer create-project --prefer-dist laravel/laravel [プロジェクト名] このように実行するのだが、とても長い。 laravel new [プロジェクト名] そこで上記コマンドを実行しようとしてもlaravelコマンドがインストールされていないと言う。laravelコマンドを使えるようにするにはまずはcomposerからのインストールが必要。 composer global require &amp;quot;laravel/installer&amp;quot; そしてその上で、~/.bashrcにてパスを通す。~/.bashrcの</description>
    </item>
    
    <item>
      <title>【Nginx】1MB以上のファイルアップロードが出来ない場合の対処法</title>
      <link>https://noauto-nolife.com/post/fileupload-error/</link>
      <pubDate>Tue, 26 Jan 2021 17:27:37 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/fileupload-error/</guid>
      <description>ファイルアップロード系のウェブアプリを作り、デプロイも無事成功し、さあファイルをアップロードしようとすると、うまくアップロードされない事がある。 これはなぜか。ウェブサーバーの設定に施されたデフォルトのファイルアップロード上限容量が原因である。 対策 /etc/nginx/sites-available/の中にあるサーバー起動用の設定ファイルを編集することで対処できる server { listen 80; server_name 192.168.11.XXX; location = /favicon.ico { access_log off; log_not_found off; } location /static/ {</description>
    </item>
    
    <item>
      <title>DjangoやPythonにおける*argsと**kwargsとは何か</title>
      <link>https://noauto-nolife.com/post/django-args-kwargs/</link>
      <pubDate>Tue, 26 Jan 2021 17:07:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-args-kwargs/</guid>
      <description>結論から言うと、*argsはキーワード未指定の引数のリスト、**kwargsはキーワードが指定された引数の辞書を手に入れるためのものである。 *argsはキーワード未指定の引数のリスト まずは、下記コードを参考にしたい。 #! /usr/bin/env python3 # -*- coding: utf-8 -*- import sys def main(name,*args): print(name) print(args) if __name__ == &amp;quot;__main__&amp;quot;: try: main(&amp;quot;Tom&amp;quot;,&amp;quot;Mike&amp;quot;,&amp;quot;Bob&amp;quot;) except KeyboardInterrupt: print(&amp;quot;\nprogram was ended.\n&amp;quot;) sys.exit() main()関数に3つの文字列の引数を与えている。&amp;quot;Tom&amp;quot;,&amp;quot;Mike&amp;quot;,&amp;quot;Bo</description>
    </item>
    
    <item>
      <title>【Django】外部キーに対応したデータの個数をカウントして表示【リプライ・コメント数の表示に有効】【annotate&#43;Count】</title>
      <link>https://noauto-nolife.com/post/django-foreign-count/</link>
      <pubDate>Tue, 26 Jan 2021 17:02:16 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-foreign-count/</guid>
      <description>例えば、Djangoで掲示板サイトを作り、投稿した内容に対してリプライできる機能を付けたとする。そのリプライ数を一覧表示時に合わせて表示させる時、どうする？ 本記事では、上記のように一対多のリレーションが構築されている環境下で、多に該当するデータ数を計算して表示させる方法を解説する。 多のデータ数を計算してそれぞれ表示させる 下記のような、Topicに対してReplyができるモデルになっていたとする。 from</description>
    </item>
    
    <item>
      <title>【Django】モデルフィールドに正規表現によるバリデーションを指定する【カラーコード・電話番号に有効】</title>
      <link>https://noauto-nolife.com/post/django-models-regex-validate/</link>
      <pubDate>Tue, 26 Jan 2021 16:40:18 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-models-regex-validate/</guid>
      <description>例えば、Djangoで電話番号や16進数カラーコード、郵便番号や金融機関コードなどの、桁数と使用文字の種類が決まったデータをモデルフィールドに挿入する時、どうしていますか？ CharFieldやIntegerFieldにそのまま入れる？フロント側で対策しているから大丈夫？そんなわけない。不適切なデータがDBに入った時点で、システムは破綻する。それは世の常。 そこで、本記事ではモデルに正規表現のバリデー</description>
    </item>
    
    <item>
      <title>【django-cleanup】画像等のファイルを自動的に削除する</title>
      <link>https://noauto-nolife.com/post/django-cleanup/</link>
      <pubDate>Tue, 26 Jan 2021 16:18:42 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-cleanup/</guid>
      <description>例えば、Djangoの画像掲示板で削除をする時、ビューでレコードを削除すると同時に、レコードに紐付いた画像も同時に削除すると思う。その時、パスを抜き取り、os.remove()などを使用して画像を削除しているようでは、ビューの処理がどんどん増えていく。 Djangoでは、レコードに紐付いたファイルの削除処理記述の手間を減らしてくれるdjango-cleanupなるものがある。本記事ではその使用方法を</description>
    </item>
    
    <item>
      <title>Djangoで埋め込みカスタムテンプレートタグを実装する方法</title>
      <link>https://noauto-nolife.com/post/django-custom-template-tags/</link>
      <pubDate>Tue, 26 Jan 2021 15:55:04 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-custom-template-tags/</guid>
      <description>Djangoでデータの値に応じて文字列を返したい場合は、カスタムテンプレートタグを使用すれば良い。下記記事は、ページ移動と検索を両立させるため、文字列を返す、カスタムテンプレートタグを実装している。 Djangoでページネーションを実装する方法【django.core.paginator】【パラメータ両立】 しかし、データの値に応じてHTMLタグを返却するには、上記の方法では成立しない。safeフィル</description>
    </item>
    
    <item>
      <title>Vue.jsでTODOを作る【CRUD】</title>
      <link>https://noauto-nolife.com/post/vuejs-todo-crud/</link>
      <pubDate>Tue, 26 Jan 2021 15:43:20 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/vuejs-todo-crud/</guid>
      <description>Codepenに掲載されていた偉い人のコードを元に、Todoを作ってみた。変数名がベストプラクティスとは異なる可能性があるため、あくまでもvue.jsの全体の機能確認用としている。 ソースコード まずはindex.html &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Vue.jsでTodo&amp;lt;/title&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.10/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.2.1/vue-router.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;header class=&amp;quot;text-center&amp;quot; style=&amp;quot;background:orange;color:white;&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;Vue.jsでTodo&amp;lt;/h1</description>
    </item>
    
    <item>
      <title>Vue.jsでモーダルダイアログを作る</title>
      <link>https://noauto-nolife.com/post/vuejs-modal/</link>
      <pubDate>Mon, 18 Jan 2021 14:36:28 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/vuejs-modal/</guid>
      <description>jQueryであれば、モーダルダイアログを実装する時、対象の要素(DOM)を指定して、.show()と.hide()を行えば良いのでそれほど難しくはないが、vue.jsの場合はそうは行かない。 本記事ではvue.jsを使用したモーダルダイアログの実装方法をまとめる。 ソースコード 今回はモーダルダイアログの範囲外をクリックしたら閉じるように仕立てた。 まず、HTML。開発版のvue.jsのCDNを指定して</description>
    </item>
    
    <item>
      <title>Django Templates Language(DTL)でincludeを実行する時に引数も与える</title>
      <link>https://noauto-nolife.com/post/django-templates-include/</link>
      <pubDate>Thu, 24 Dec 2020 16:51:03 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-templates-include/</guid>
      <description>Djangoでテンプレートファイルを分離させ、includeするときがある。複数の箇所で同じフォームを表示したりする時がそうだ。 ただ、フォームのIDをそれぞれの箇所で別々とする場合、引数を指定する必要がある。 結論 結論から言うと、こうなる。 {% include &amp;quot;[パス]&amp;quot; with [引数名]=[値] %} includeするhtmlのパスを指定した後、withを指定することで引数の指定が可能になる。指定した引</description>
    </item>
    
    <item>
      <title>Djangoでデフォルト数値型のid(主キー)からUUID型にする【データ移行】</title>
      <link>https://noauto-nolife.com/post/django-id-to-uuid/</link>
      <pubDate>Thu, 24 Dec 2020 16:42:59 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-id-to-uuid/</guid>
      <description>PostgreSQL等のDBサーバーで、1対多等のリレーションを組んだウェブアプリを作る時、Djangoのデフォルトの数値型のidではエラーが出てしまう。つまり、UUIDの使用は不可避。 しかし、既にデータがいくらか存在しているため、DB内のデータを全削除してUUIDにマイグレーションし直すのは不可能。困った。 こういう、数値型の主キーが割り当てられた既存データを保持したまま、UUID型の主キーに書き</description>
    </item>
    
    <item>
      <title>【日付入力】flatpickrの実装方法(ロケール日本語化、日時入力対応化)</title>
      <link>https://noauto-nolife.com/post/flatpickr-install/</link>
      <pubDate>Thu, 24 Dec 2020 16:37:31 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/flatpickr-install/</guid>
      <description>ウェブアプリを開発していると、避けて通ることができない日付もしくは日時入力。HTMLのSELECTタグを使用しても良いが、うるう年に対応させないといけないし、何よりユーザビリティに問題がある。 そんな時、flatpickrを実装すれば、日時入力が非常に簡単になる。しかもjQueryに依存していないので、流行のvue.jsなどを使いたい場合にも有効。 flatpickrの実装方法 まずHTML。flatp</description>
    </item>
    
    <item>
      <title>Djangoにカスタムユーザーモデルを実装させる【AbstractUserとallauth】</title>
      <link>https://noauto-nolife.com/post/django-allauth-custom-user-model/</link>
      <pubDate>Mon, 14 Dec 2020 16:28:15 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-allauth-custom-user-model/</guid>
      <description>Djangoでカスタムユーザーモデルを実装すれば、ユーザーが会員登録をする時、IDとパスワードだけでなく、ファーストネームや年齢、職業なども入力させた上で会員登録を行うことができる。 これにより、会員登録した後、データ投稿時にユーザー情報もセットで挿入できる。未指定でログイン可能な会員になってしまうという問題を防ぐことができる。 ただ、カスタムユーザーモデルの実装は容易ではない。カスタムユーザーモデル</description>
    </item>
    
    <item>
      <title>Djangoで多対多のリレーションを含むデータをAjax(jQuery)&#43;DRFで送信させる</title>
      <link>https://noauto-nolife.com/post/django-m2m-restful/</link>
      <pubDate>Tue, 01 Dec 2020 17:17:52 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-m2m-restful/</guid>
      <description>本記事では多対多のリレーションを含んだウェブアプリで、Django REST FrameworkとAjaxを使用した非同期データ送信を実現させる方法を書く。 ソースコードは『【Django】一対多、多対多のリレーションでforms.pyを使ったバリデーションとフォームを表示』の『【2】forms.pyを使用したフォームバリデーション+独自に作ったテンプレート』から流用した。 Ajax(jQuery)+Restf</description>
    </item>
    
    <item>
      <title>DRF(Django REST Framework)&#43;Ajax(jQuery)で画像とファイルをアップロードする方法</title>
      <link>https://noauto-nolife.com/post/drf-ajax-fileupload/</link>
      <pubDate>Tue, 01 Dec 2020 17:06:20 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/drf-ajax-fileupload/</guid>
      <description>本記事では、DRF(Django REST Framework)とAjaxを使用して画像とファイルを非同期でアップロードする方法をまとめる。 コードはDjangoで画像及びファイルをアップロードする方法から引用している。外見はほとんど変わっていない。 テンプレートとJSのコード まずテンプレート。下記はimage.html {% load static %} &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;画像アップロードのテスト&amp;lt;/ti</description>
    </item>
    
    <item>
      <title>【Django】一対多、多対多のリレーションでforms.pyを使ったバリデーションとフォームを表示</title>
      <link>https://noauto-nolife.com/post/django-m2m-form/</link>
      <pubDate>Tue, 01 Dec 2020 16:03:44 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-m2m-form/</guid>
      <description>本記事ではDjangoで一対多、多対多のリレーションを実装した上で、forms.pyを使用し、フォームをバリデーションする。 また、単にforms.pyからフォームのテンプレートを作るだけでなく、複数指定が要求されるフォームの作り方についても解説する。 コードはDjangoで多対多のリレーションをテンプレートで表示する方法【ManyToManyField】から流用。 【1】forms.pyを使用したフォ</description>
    </item>
    
    <item>
      <title>Djangoで多対多のリレーションの構造と作り方、テンプレートで表示する方法【ManyToManyField】</title>
      <link>https://noauto-nolife.com/post/django-many-to-many/</link>
      <pubDate>Fri, 27 Nov 2020 17:20:39 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-many-to-many/</guid>
      <description>多対多のリレーションの作り方 多対多のモデルは以下のように作る。 from django.db import models class Allergy(models.Model): name = models.CharField(verbose_name=&amp;quot;アレルギー名&amp;quot;,max_length=10) def __str__(self): return self.name class Menu(models.Model): name = models.CharField(verbose_name=&amp;quot;品名&amp;quot;,max_length=20) breakfast = models.BooleanField(verbose_n</description>
    </item>
    
    <item>
      <title>DjangoでYou are Trying to add a non-nullable fieldと表示されたときの対策【makemigrations】</title>
      <link>https://noauto-nolife.com/post/django-non-nullable/</link>
      <pubDate>Wed, 18 Nov 2020 08:23:05 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-non-nullable/</guid>
      <description>Djangoのモデルにフィールドを追加して、さあマイグレーションしようとすると、こんな表示がされることがある。 これはなんなのか、対策も兼ねて解説する。 この警告文の解説 要するに、既にレコードが存在する状態で、NULL禁止かつデフォルト値指定なしのフィールドを追加するとこうなる。 デフォルト指定していないので、既存のレコードにはNULL禁止であるにも関わらず、NULLが入ってしまう。そこで既存のレコード</description>
    </item>
    
    <item>
      <title>DjangoでHelloWorld【HttpResponse及びレンダリング】</title>
      <link>https://noauto-nolife.com/post/startup-django-helloworld/</link>
      <pubDate>Mon, 16 Nov 2020 08:50:24 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-django-helloworld/</guid>
      <description>Djangoのハローワールドは、やり方が何通りもある。 普通のPythonであれば、 print(&amp;quot;HelloWorld&amp;quot;) ほぼこの一通りであるが、Djangoの場合は主にHttpResponseの他に、テンプレートをレンダリングして返す方法がある。 一般的な開発においてはテンプレートのレンダリングが主流である。しかし、Django初心者、フレームワーク未経験者には難度が高い。故に、本記事では難度の低いHttpResponseから解説する</description>
    </item>
    
    <item>
      <title>Django-allauthのログインページの装飾を装飾する【テンプレートの追加】</title>
      <link>https://noauto-nolife.com/post/django-allauth-loginpage/</link>
      <pubDate>Wed, 11 Nov 2020 17:59:11 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-allauth-loginpage/</guid>
      <description>django-allauthにより、比較的簡単に認証関係の機能を実装できる。だが、装飾まではサポートされていない。 このような殺風景なログイン画面が表示されてしまうのだ。これをそのままにして顧客に納品させるわけにはいかない。 本記事ではこのdjango-allauthのログインページを装飾させる方法を解説する。 Django-allauthのインストールとsettings.py、urls.pyの設定 まず</description>
    </item>
    
    <item>
      <title>Djangoでページネーションを実装する方法【django.core.paginator】【パラメータ両立】</title>
      <link>https://noauto-nolife.com/post/django-paginator/</link>
      <pubDate>Wed, 11 Nov 2020 17:57:49 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-paginator/</guid>
      <description>殆どのプロジェクトで実装必須になるページネーション。 Djangoではdjango.core.paginatorが用意されているので比較的簡単に実装できる。 しかし、単にページネーションを実装しただけでは他のURLパラメーターが保持されない。例えば、検索とページネーションを両立させることはできない。 本記事では他のURLパラメーターを保持した状態で、ページネーションを実装する術を解説する。 流れ views</description>
    </item>
    
    <item>
      <title>Djangoでスペース区切りでOR検索、AND検索をする方法【django.db.models.Q】</title>
      <link>https://noauto-nolife.com/post/django-or-and-search/</link>
      <pubDate>Wed, 11 Nov 2020 17:56:10 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-or-and-search/</guid>
      <description>普通、検索エンジンで検索する時、こう検索するであろう。 Django UUIDFields 使い方 Djangoのモデルオブジェクトで検索しようとすると、こうなる。 Model.objects.filter(title__contains=&amp;quot;Django UUIDFields 使い方&amp;quot;) これでは検索結果が出てこない。検索時にスペースも文字列の1つとして考えるからだ(『Django UUIDFields 使い方』を含むタイトルを表示) そこで、スペース区切りのキーワード検索をするときは、Qクラスを使用する。 クエリビルダでスペース区切りのキーワード検索をする</description>
    </item>
    
    <item>
      <title>【Restful】DjangoでAjax(jQuery)を実装する方法【Django REST Framework使用】</title>
      <link>https://noauto-nolife.com/post/django-ajax-restful/</link>
      <pubDate>Tue, 10 Nov 2020 14:01:19 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-ajax-restful/</guid>
      <description>先日の記事にて、DjangoでAjax(jQuery)を実装する方法を解説した。 ただ、RestfulAPIを使用すれば、さらに少ないコードでAjaxを実装することができる。 RestfulAPI、Django REST Frameworkとは RestfulAPIとは、HTTPリクエストに応じてサーバーの処理を切り分けることができるAPIのこと。 HTTPリクエストのヘッダ部には、リクエスト送信先のURLとリクエ</description>
    </item>
    
    <item>
      <title>Djangoで画像及びファイルをアップロードする方法【ImageFieldとFileField】【python-magicでMIMEの判定あり】</title>
      <link>https://noauto-nolife.com/post/django-fileupload/</link>
      <pubDate>Thu, 05 Nov 2020 15:30:14 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-fileupload/</guid>
      <description>Djangoで画像やファイルをアップロードする方法をまとめる。 40分Djangoを理解している方向け。 流れ 必要なライブラリのインストール settings.pyの編集 urls.pyの編集 models.pyでフィールドの定義 forms.pyでフォームを作る views.pyで受け取り処理 templatesにフォームを設置 マイグレーション 開発用サーバーの立ち上げ 必要なライブラリのインストール pip install Pillow pip install python-magic P</description>
    </item>
    
    <item>
      <title>DjangoでDBに格納したデータをダンプ(バックアップ)させる【dumpdata】</title>
      <link>https://noauto-nolife.com/post/django-dumpdata/</link>
      <pubDate>Thu, 05 Nov 2020 14:38:34 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-dumpdata/</guid>
      <description>以前、Djangoで開発中に初期データを入力する方法をしたが、Djangoではその逆も可能。 つまり、DBに既に格納されているデータをダンプ(バックアップ)する事ができる。それがこれ python3 manage.py dumpdata [アプリ名] &amp;gt; [アプリ名]/fixture/data.json 実際にやってみるとこうなる。 json形式でダンプされ、そのままでは改行が施されていないので、}},の次に改行を設置する。vimなら下記正規表現を実行 s/}},/}},\r/g 整</description>
    </item>
    
    <item>
      <title>Herokuのデータベース(herokupostgres)の実装と設定方法【Hobby-Plan】</title>
      <link>https://noauto-nolife.com/post/heroku-postgres-settings/</link>
      <pubDate>Thu, 05 Nov 2020 12:05:07 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/heroku-postgres-settings/</guid>
      <description>Heroku postgresの実装方法 プロジェクトのResourcesからHeroku Postgresを指定。 続いて、Submit Order Formを指定する。プランはHobbyを選択。 Add-onsのHerokuPostgresのリンクをクリック、SettingsタブのDatabaseCredentialsのView Credentialsをクリック データベース名などの認証情報が表示される。これをプロジェクトの設定</description>
    </item>
    
    <item>
      <title>Djangoのマイグレーションのエラー時の対処法</title>
      <link>https://noauto-nolife.com/post/django-migrate-error/</link>
      <pubDate>Thu, 05 Nov 2020 08:46:39 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-migrate-error/</guid>
      <description>Djangoで開発を進めている時、マイグレーションのエラーにぶち当たるときがあるが、大抵はmigrationsディレクトリを編集していけばいいだけなので、それほど難しいものではない。 本記事ではmigrationsディレクトリ内のファイル編集を行うことで、マイグレーションのエラー時の対処法をまとめる。 サンプルコード まず、マイグレーションエラーの再現をするために、サンプルのコードを下記に公開した。プロ</description>
    </item>
    
    <item>
      <title>CSS3だけで実装できるアコーディオン【checkbox&#43;transition】</title>
      <link>https://noauto-nolife.com/post/css3-accordion/</link>
      <pubDate>Thu, 29 Oct 2020 17:12:50 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-accordion/</guid>
      <description>また、checkboxとtransitionのコンボネタ。それでyoutubeとかでよくあるアコーディオンを簡単に作ることができる。 アコーディオンの作り方 まず、HTML5。 &amp;lt;input id=&amp;quot;acd_1&amp;quot; class=&amp;quot;chkbox&amp;quot; type=&amp;quot;checkbox&amp;quot;&amp;gt; &amp;lt;label class=&amp;quot;acd_n_button&amp;quot; for=&amp;quot;acd_1&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;acd_n_button_title&amp;quot;&amp;gt;HTML+CSS&amp;lt;/div&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;div class=&amp;quot;acd_n_body&amp;quot;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;ここに項目を記述する&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;ここに項目を記述する&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;ここに項目を記述する&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;p&amp;g</description>
    </item>
    
    <item>
      <title>jQueryでオートコンプリート(入力補正)を実装させる【表記ゆれ対策にも有効】</title>
      <link>https://noauto-nolife.com/post/jquery-autocomplete/</link>
      <pubDate>Thu, 29 Oct 2020 16:52:35 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/jquery-autocomplete/</guid>
      <description>ウェブアプリを作って、ユーザーに何かを文字列を入力させる時、大抵表記ゆれが起こる。 例えば、JAと農業協同組合と農協、ラズパイとラズベリーパイとRaspberry Piとraspberry piなど。 このような表記ゆれを一度でも許すと、検索で引っかからなくなる。しかし、SELECTタグを使うと、項目が増えた時、選択に時間がかかりすぎる。 そこで、文字入力(入力補正)と選択が同時にできるオートコンプリートを</description>
    </item>
    
    <item>
      <title>fontawesomeの実装と利用例のまとめ</title>
      <link>https://noauto-nolife.com/post/startup-fontawesome/</link>
      <pubDate>Thu, 29 Oct 2020 16:48:13 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-fontawesome/</guid>
      <description>fontawesomeを使用することで、簡単なアイコンをページ内に使用することができる。無料の場合は制限があるが、CDNをheadタグ内に書き込めばいいので実装は簡単。 実装方法 headタグ内に下記を追加する。 &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://use.fontawesome.com/releases/v5.1.0/css/all.css&amp;quot; integrity=&amp;quot;sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; これだけでOK。 fontawesome CDN などで検索してくると、下記サイトが出てくるので、バージョンをチェックして最新版をコピペする。 https://fontawesome.com/v5.15/how-to-use/customizing-wordpress/snippets/setup-cdn-webfont#load-all-styles 使い方 fontawesomeのアイコン一覧が掲載されているページ( https://fontawesome.com/icons?d=gallery</description>
    </item>
    
    <item>
      <title>【CSS3】文字に縁取りを加えて視認性UPさせる方法【text-shadow】</title>
      <link>https://noauto-nolife.com/post/css3-textborder/</link>
      <pubDate>Thu, 29 Oct 2020 16:42:03 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-textborder/</guid>
      <description>背景色と文字色が近い場合、文字の縁取りをすることで、視認性を上げることができる。 あまり使うことは無いが、一応備忘録として。 縁取りの作り方 使用するのはtext-shadowだけ。下記のコードを任意の要素に指定すれば良いだけ。 text-shadow: skyblue 1px 1px 0, skyblue -1px -1px 0, skyblue -1px 1px 0, skyblue 1px -1px 0, skyblue 0px 1px 0, skyblue 0-1px 0, skyblue -1px 0 0, skyblue 1px 0 0; こんなふうに縁取りができる。 2pxの縁取りがしたい場合はこっち。 text-shadow: skyblue 2px 0px, skyblue -2px 0px, skyblue 0px -2px, skyblue 0px 2px, skyblue 2px 2px , skyblue -2px 2px, skyblue 2px -2px, skyblue -2px</description>
    </item>
    
    <item>
      <title>【CSS3】スクロール時に奥行きを感じる背景(background)の作り方</title>
      <link>https://noauto-nolife.com/post/css3-deep-bg/</link>
      <pubDate>Thu, 29 Oct 2020 16:39:03 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-deep-bg/</guid>
      <description>最近流行のスクロールしたら背景がスクロールせず、ページ全体に奥行きを感じることができるモダンデザインの背景を作る。 それほど難しくない。CSS習いたての初心者でも簡単に実装できるので、是非とも試してみたいところ。 奥行きのある背景の作り方 まず、HTML。bodyタグ内のみ記述する。 &amp;lt;main&amp;gt; &amp;lt;div class=&amp;quot;fixed_bg bg_1&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;見出し&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;scroll_bg&amp;quot;&amp;gt; &amp;lt;p&amp;gt;コンテンツ&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;fixed_bg bg_2&amp;quot;&amp;gt; &amp;l</description>
    </item>
    
    <item>
      <title>CSS3で折りたたみ式のサイドバーを実装させる【checkbox&#43;transition&#43;position】</title>
      <link>https://noauto-nolife.com/post/css3-sidebar/</link>
      <pubDate>Thu, 29 Oct 2020 16:15:45 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-sidebar/</guid>
      <description>モダンなサイトでよく見かける折りたたみ式のサイドバー。これはCSS3の知識さえあればすぐに実装できる。 HTML5+CSS3を使用した折りたたみ式サイドバー まず、HTML。headerがページタイトルとサイドバーを兼ねている。 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt; &amp;lt;title&amp;gt;折りたたみ式右サイドバー&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;onload.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;header&amp;gt; &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;折りたたみ式右サイドバー</description>
    </item>
    
    <item>
      <title>CSS3を使用した簡単アニメーションの実装【transitionとtransform】</title>
      <link>https://noauto-nolife.com/post/css3-animation/</link>
      <pubDate>Thu, 29 Oct 2020 15:37:51 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-animation/</guid>
      <description>CSS3のアニメーション関係の描画はanimationプロパティを使用しなくてもtransitionプロパティを使用すれば簡単に実装できる。 さらに、transformと組み合わせることで、傾きや回転まで自由自在。本記事ではレベルごとにアニメーションの作り方を解説していく。 対象読者はある程度のHTMLとCSSの基礎を身に着けている方、CSSにおける疑似要素(::beforeと::after)、擬似ク</description>
    </item>
    
    <item>
      <title>CSS3でiOS風のトグルスイッチを作る方法【transition&#43;checkbox】</title>
      <link>https://noauto-nolife.com/post/css3-toggle-switch/</link>
      <pubDate>Thu, 29 Oct 2020 15:37:36 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/css3-toggle-switch/</guid>
      <description>CSS3で実装されたtransitionと兄弟要素のセレクタを組み合わせることでiOS風のトグルスイッチは簡単に作れる。 何も装飾を施していないinputタグのチェックボックスは小さくて見づらいが、この装飾を施すことで、視覚的にも押すことができるスイッチであると認識できるし、押せる範囲が広がる。 iOS風のトグルスイッチの作り方 まずはHTML5から。 &amp;lt;div class=&amp;quot;ui_demo_area&amp;quot;&amp;gt; &amp;lt;input id=&amp;quot;ios_chk_01&amp;quot; class=&amp;quot;ui20-input_chk&amp;quot; type=&amp;quot;checkbox&amp;quot;&amp;gt;&amp;lt;label class=&amp;quot;ui20-ios_conf&amp;quot; for=&amp;quot;ios_chk_01&amp;quot;&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; 続いて、CSS3。 /* ios button */ .ui20-input_chk { display:none; }</description>
    </item>
    
    <item>
      <title>SQLiteの操作方法【テーブル一覧表示、SQLなど】</title>
      <link>https://noauto-nolife.com/post/startup-sqlite3/</link>
      <pubDate>Mon, 26 Oct 2020 13:51:50 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-sqlite3/</guid>
      <description>インストールと基本操作 Ubuntuであればaptコマンドで簡単にインストールできる。 sudo apt install sqlite3 ファイルの閲覧はsqlite3コマンドで実行できる。対象のsqlite3ファイルを指定するだけ。 sqlite3 db.sqlite3 テーブル一覧表示 テーブル一覧表示。 .table 基本的なSQL文 SELECT文。指定したテーブルを参照する。 SELECT カラム名 FROM テーブル名 INSERT文。指定したレコードを追加する。文字列型はダブルクオーテーションでくくる。数値</description>
    </item>
    
    <item>
      <title>DjangoをDEBUG=FalseでHerokuにデプロイする方法</title>
      <link>https://noauto-nolife.com/post/django-deploy-heroku/</link>
      <pubDate>Mon, 26 Oct 2020 11:16:34 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-heroku/</guid>
      <description>プロジェクトのディレクトリ構造は、『現場で使えるDjangoの教科書 基礎編』に準拠している。 requirements.txt もし、仮想環境を使用していない場合、virtualenvを使って必要なライブラリをpipコマンドにてインストールする。 -- HerokuCLIをインストール Herokuではherokuコマンドを実行して、事前にログインをした上でデプロイを行う。下記からインストールする。 https://devcenter.heroku.com/ja/articles/heroku-cli herokuコマンドを実行して、デプロ</description>
    </item>
    
    <item>
      <title>DjangoをLinux(Ubuntu)サーバーにデプロイする方法【Nginx&#43;PostgreSQL】</title>
      <link>https://noauto-nolife.com/post/django-deploy-linux/</link>
      <pubDate>Mon, 26 Oct 2020 11:16:29 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-deploy-linux/</guid>
      <description>DjangoをLinuxサーバーにデプロイできれば、クラウドとは違ってハードウェアの性能を余すこと無く使うことができる。 高度なAIを運用したり、それなりにセキュリティが求められるウェブアプリを運用する予定であれば実機のLinuxサーバーにデプロイしたほうが良い。 デプロイまでの流れ PostgreSQLとNginxのインストール settings.pyの修正 ホームディレクトリにプロジェクト一式を設置 必要</description>
    </item>
    
    <item>
      <title>Djangoで開発中、データベースへ初期データを入力する【バックアップしたデータをloaddataコマンドでリストア】</title>
      <link>https://noauto-nolife.com/post/django-loaddata/</link>
      <pubDate>Sat, 24 Oct 2020 18:12:29 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-loaddata/</guid>
      <description>Djangoで開発中にテストしたい時、デプロイ後に初期データを突っ込んで即公開したい時、どうしてもデータの入力作業が出てくる。 Seleniumで入力作業を自動化する方法もあるが、わざわざそんなことをしなくても初期データを突っ込む方法がある。それが python3 manage.py loaddata bbs/fixture/data.json このようにアプリディレクトリ内にfixtureディレクトリを作り、jsonのデータを指定して、リストアする models.pyに基づいたjsonファ</description>
    </item>
    
    <item>
      <title>Djangoで『このページを表示するにはフォームデータを..』と言われたときの対処法</title>
      <link>https://noauto-nolife.com/post/django-redirect/</link>
      <pubDate>Sat, 24 Oct 2020 17:22:29 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-redirect/</guid>
      <description>『このページを表示するにはフォームデータを再度送信する必要があります。フォームデータを再送信すると以前実行した検索、投稿や注文などの処理が繰り返されます。』 POST文を実行した直後に更新ボタンを押すと、こんなふうに表示される時。こういうときはリダイレクトすればOK。 views.pyを修正する redirectをimport。POST文のreturnにredirect関数を返せばいいだけ。 from django.shortcuts import redirect #P</description>
    </item>
    
    <item>
      <title>Djangoで数値のカンマ区切りを実装させる</title>
      <link>https://noauto-nolife.com/post/django-comma/</link>
      <pubDate>Sat, 24 Oct 2020 16:48:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-comma/</guid>
      <description>在庫とかお金とか扱うウェブアプリだとカンマ区切りは必須。 JSに任せてもいいけど、結局正規表現になる上にユーザーに負担を強いるのはどうかと。 ということでDjango側でカンマ区切りを簡単に実装させる。 settings.pyの追記 INSTALLED_APPSに以下を追加。 &#39;django.contrib.humanize&#39;, 下記をINSTALLED_APPSの上に追加。これで3桁区切りになる。 NUMBER_GROUPING = 3 3桁区切りで表示させたいテンプレートの追記 htmlの冒</description>
    </item>
    
    <item>
      <title>【メール認証】Django-allauthの実装方法とテンプレート編集【ID認証】</title>
      <link>https://noauto-nolife.com/post/startup-django-allauth/</link>
      <pubDate>Sat, 24 Oct 2020 16:32:35 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-django-allauth/</guid>
      <description>ここに、Django-allauthの実装方法をまとめる。主にsettings.pyを操作することになる。 また、allauth付属のテンプレートではHTMLのみなのでテンプレート及びCSSによる装飾も付せて説明する。 はじめに django-allauthは外部ライブラリなので、pipコマンドでインストールする必要がある。 pip install django-allauth ユーザーIDとパスワードを使用した認証方法の実装 ユーザーIDとパスワードを</description>
    </item>
    
    <item>
      <title>DjangoにPythonスクレイピングを実装した簡易検索エンジンの作り方【BeautifulSoup】</title>
      <link>https://noauto-nolife.com/post/django-scraping/</link>
      <pubDate>Sat, 24 Oct 2020 12:25:17 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/django-scraping/</guid>
      <description>DjangoにPythonスクレイピングを実装させるだけで簡易的な検索エンジンを作ることができる。 しかも、モデルの定義は不要でビューとテンプレートだけなので初心者の演習におすすめ。 流れ Djangoの環境構築、プロジェクトの作成等は割愛します。 アプリを作る urls.pyを修正 views.pyを作る テンプレートを作る スクレイピングのコードを作る views.pyを修正 テンプレートを修正 開発サーバーを起動</description>
    </item>
    
    <item>
      <title>JavaScriptほぼ不使用のサイトを作ってGoogle PageSpeed Insightsでスコアを調べてみた</title>
      <link>https://noauto-nolife.com/post/nonjs-pagespeed/</link>
      <pubDate>Thu, 22 Oct 2020 16:27:53 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/nonjs-pagespeed/</guid>
      <description>先日作った自分のサイトなんですけどね。使っているJavaScriptはせいぜいAnalyticsとAdsenceぐらいです。 パソコンのスコア ご覧ください。パソコンのスコア、99点です。直すべきは画像の圧縮とBootstrapの読み込み場所ぐらいでしょう。 改善できる項目、『サーバーの応答時間を速くしてください』&amp;hellip;.。Netlifyさんなんとかできませんか？とは言え、無料だからやむなし。</description>
    </item>
    
    <item>
      <title>Netlifyと静的サイトジェネレーターHUGOで1ヶ月約100円でブログ運営をする方法【独自ドメイン使用】</title>
      <link>https://noauto-nolife.com/post/startup-netlify/</link>
      <pubDate>Thu, 22 Oct 2020 14:28:18 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-netlify/</guid>
      <description>世間ではWordpressや有料版レンタルブログで、一ヶ月に1000円以上かけてブログを運営している人も多々いるが、実際にはそこまでお金をかけなくてもブログ運営は可能。 もっとも、運営者のスキルが要求される。 方法 結論から言うと、静的サイトジェネレーターとGitHub、Netlify、それからムームドメインを使う。 静的サイトジェネレーターとは 静的サイトジェネレーター(Static Site Generator)</description>
    </item>
    
    <item>
      <title>【地理空間情報】GeoDjangoの実装方法【PostGIS&#43;PostgreSQL&#43;国土地理院データ】</title>
      <link>https://noauto-nolife.com/post/startup-geodjango/</link>
      <pubDate>Wed, 21 Oct 2020 16:46:02 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-geodjango/</guid>
      <description>圧倒的に日本語の情報、及びソースコードが不足しているgeodjangoについてまとめています。(勉強してすぐにまとめているので、多少間違いがあるかも。) Ubuntu 18.04 LTS にて動作確認済み。 流れ Djangoのインストール PostgreSQLのインストール GEOS、GDAL、PROJ4、PostGISのインストール プロジェクトの作成 アプリの作成 settings.pyの書き換え models.pyの書き換え 国土交通省</description>
    </item>
    
    <item>
      <title>Djangoビギナーが40分で掲示板アプリを作る方法</title>
      <link>https://noauto-nolife.com/post/startup-django/</link>
      <pubDate>Tue, 20 Oct 2020 14:20:34 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/startup-django/</guid>
      <description>公式のDjangoチュートリアルではよくわからない方向け。 対象読者は既にDjangoをインストール済み、Linux系コマンド習得済み、Python及びHTMLの基本構文を把握済みとする。 注意事項 40分はあくまでも私見に基づく目安である点をご留意いただきたい。 流れ 以下、流れ。 プロジェクトを作る(5分) アプリを作る(5分) settings.pyの書き換え(5分) urls.pyでURLの指定(5分) vi</description>
    </item>
    
    <item>
      <title>【保存版】Ubuntu18.04をインストールした後に真っ先にやる16の設定</title>
      <link>https://noauto-nolife.com/post/ubuntu1804-settings/</link>
      <pubDate>Sat, 12 Jan 2019 14:57:56 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu1804-settings/</guid>
      <description>ほとんど自分用の備忘録です。あまり役に立たないかもしれませんが、トップバーとdockの合成はやっておくと一気に便利になるでしょう。 その1:bashの履歴の上限を開放して、日時を表示させる その2:日本語のディレクトリ名を英語に変更させる その3:各種パッケージをインストールする その4:vimのプラグインをインストールする その5:vimのデフォルトの設定を変更させる その6:UbuntuのトップバーとDo</description>
    </item>
    
    <item>
      <title>UbuntuにSSHでリモートログインする方法【パスワード認証&#43;公開鍵認証&#43;scpコマンド】</title>
      <link>https://noauto-nolife.com/post/ubuntu-ssh/</link>
      <pubDate>Thu, 20 Sep 2018 18:22:19 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/post/ubuntu-ssh/</guid>
      <description>SSH（Secure Shell）とはネットワークに接続されている端末にリモートログインをするための技術のことを言います。 SSHにより直接端末を操作しなくても遠隔地から端末にログインを行い、コマンド入力で簡単に操作できるようになります。それだけでなく、SSHを使用した際にはネットワークを流れる通信がすべて暗号化されるようになるのです。SSHでは暗号化された通信経路を使用するので、通信経路が暗号化され</description>
    </item>
    
    <item>
      <title>このサイトについて</title>
      <link>https://noauto-nolife.com/information/introduction/</link>
      <pubDate>Sat, 02 Dec 2017 10:55:33 +0900</pubDate>
      
      <guid>https://noauto-nolife.com/information/introduction/</guid>
      <description>ここはWEB、AI、Linux関係のことに特化して作られた技術ブログサイトです。 作者について 項目 内容 名前 S.Asahina 経験 2011年〜 資格 ITパスポート(2012年6月),基本情報技術者(2013年春),応用情報技術者(2014年春) 言語 HTML,CSS,JS(jQuery,Vue.js),Python(Django,Flask),PHP(laravel),その他(C,COBOL,JAVAなど) その他技術 Apache,Nginx,MySQL,PostgreSQL,Ubuntu,Raspberry P</description>
    </item>
    
  </channel>
</rss>